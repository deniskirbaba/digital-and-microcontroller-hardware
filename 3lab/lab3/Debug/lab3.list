
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004738  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800496c  0800496c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000078  080049ec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080049ec  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f6  00000000  00000000  0002ac8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021425  00000000  00000000  0002d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6c6  00000000  00000000  0004e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9415  00000000  00000000  00058f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001223b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b8  00000000  00000000  00122404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048f0 	.word	0x080048f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080048f0 	.word	0x080048f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <set_line>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_line () {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_SET); //A
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	4816      	ldr	r0, [pc, #88]	; (8000f34 <set_line+0x64>)
 8000eda:	f001 fa1b 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_SET); //B
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <set_line+0x64>)
 8000ee6:	f001 fa15 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_SET); //C
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <set_line+0x64>)
 8000ef2:	f001 fa0f 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_SET); //D
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <set_line+0x68>)
 8000efe:	f001 fa09 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_SET); //E
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <set_line+0x68>)
 8000f0a:	f001 fa03 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_SET);	//F
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2104      	movs	r1, #4
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <set_line+0x6c>)
 8000f14:	f001 f9fe 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <set_line+0x68>)
 8000f20:	f001 f9f8 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2a:	4802      	ldr	r0, [pc, #8]	; (8000f34 <set_line+0x64>)
 8000f2c:	f001 f9f2 	bl	8002314 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40020c00 	.word	0x40020c00

08000f40 <set_number>:

void set_number (int number)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	f200 81f5 	bhi.w	800133a <set_number+0x3fa>
 8000f50:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <set_number+0x18>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	08000fdf 	.word	0x08000fdf
 8000f60:	0800103d 	.word	0x0800103d
 8000f64:	0800109b 	.word	0x0800109b
 8000f68:	080010f9 	.word	0x080010f9
 8000f6c:	08001157 	.word	0x08001157
 8000f70:	080011b5 	.word	0x080011b5
 8000f74:	08001213 	.word	0x08001213
 8000f78:	08001271 	.word	0x08001271
 8000f7c:	080012dd 	.word	0x080012dd
    switch (number)
    {
        case 0:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	48d2      	ldr	r0, [pc, #840]	; (80012d0 <set_number+0x390>)
 8000f86:	f001 f9c5 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f90:	48cf      	ldr	r0, [pc, #828]	; (80012d0 <set_number+0x390>)
 8000f92:	f001 f9bf 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9c:	48cc      	ldr	r0, [pc, #816]	; (80012d0 <set_number+0x390>)
 8000f9e:	f001 f9b9 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_RESET); //D
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa8:	48ca      	ldr	r0, [pc, #808]	; (80012d4 <set_number+0x394>)
 8000faa:	f001 f9b3 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_RESET); //E
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb4:	48c7      	ldr	r0, [pc, #796]	; (80012d4 <set_number+0x394>)
 8000fb6:	f001 f9ad 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_RESET);	//F
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	48c6      	ldr	r0, [pc, #792]	; (80012d8 <set_number+0x398>)
 8000fc0:	f001 f9a8 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_SET);  //G
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fca:	48c2      	ldr	r0, [pc, #776]	; (80012d4 <set_number+0x394>)
 8000fcc:	f001 f9a2 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd6:	48be      	ldr	r0, [pc, #760]	; (80012d0 <set_number+0x390>)
 8000fd8:	f001 f99c 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 8000fdc:	e1ad      	b.n	800133a <set_number+0x3fa>
        }

        case 1:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_SET); //A
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	48bb      	ldr	r0, [pc, #748]	; (80012d0 <set_number+0x390>)
 8000fe4:	f001 f996 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fee:	48b8      	ldr	r0, [pc, #736]	; (80012d0 <set_number+0x390>)
 8000ff0:	f001 f990 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	48b5      	ldr	r0, [pc, #724]	; (80012d0 <set_number+0x390>)
 8000ffc:	f001 f98a 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_SET); //D
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	48b3      	ldr	r0, [pc, #716]	; (80012d4 <set_number+0x394>)
 8001008:	f001 f984 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_SET); //E
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001012:	48b0      	ldr	r0, [pc, #704]	; (80012d4 <set_number+0x394>)
 8001014:	f001 f97e 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_SET);	//F
 8001018:	2201      	movs	r2, #1
 800101a:	2104      	movs	r1, #4
 800101c:	48ae      	ldr	r0, [pc, #696]	; (80012d8 <set_number+0x398>)
 800101e:	f001 f979 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_SET);  //G
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001028:	48aa      	ldr	r0, [pc, #680]	; (80012d4 <set_number+0x394>)
 800102a:	f001 f973 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001034:	48a6      	ldr	r0, [pc, #664]	; (80012d0 <set_number+0x390>)
 8001036:	f001 f96d 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 800103a:	e17e      	b.n	800133a <set_number+0x3fa>
        }

        case 2:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 800103c:	2200      	movs	r2, #0
 800103e:	2140      	movs	r1, #64	; 0x40
 8001040:	48a3      	ldr	r0, [pc, #652]	; (80012d0 <set_number+0x390>)
 8001042:	f001 f967 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	48a0      	ldr	r0, [pc, #640]	; (80012d0 <set_number+0x390>)
 800104e:	f001 f961 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_SET); //C
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001058:	489d      	ldr	r0, [pc, #628]	; (80012d0 <set_number+0x390>)
 800105a:	f001 f95b 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_RESET); //D
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001064:	489b      	ldr	r0, [pc, #620]	; (80012d4 <set_number+0x394>)
 8001066:	f001 f955 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_RESET); //E
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001070:	4898      	ldr	r0, [pc, #608]	; (80012d4 <set_number+0x394>)
 8001072:	f001 f94f 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_SET);	//F
 8001076:	2201      	movs	r2, #1
 8001078:	2104      	movs	r1, #4
 800107a:	4897      	ldr	r0, [pc, #604]	; (80012d8 <set_number+0x398>)
 800107c:	f001 f94a 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	4893      	ldr	r0, [pc, #588]	; (80012d4 <set_number+0x394>)
 8001088:	f001 f944 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	488f      	ldr	r0, [pc, #572]	; (80012d0 <set_number+0x390>)
 8001094:	f001 f93e 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 8001098:	e14f      	b.n	800133a <set_number+0x3fa>
        }

        case 3:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 800109a:	2200      	movs	r2, #0
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	488c      	ldr	r0, [pc, #560]	; (80012d0 <set_number+0x390>)
 80010a0:	f001 f938 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010aa:	4889      	ldr	r0, [pc, #548]	; (80012d0 <set_number+0x390>)
 80010ac:	f001 f932 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b6:	4886      	ldr	r0, [pc, #536]	; (80012d0 <set_number+0x390>)
 80010b8:	f001 f92c 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_RESET); //D
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4884      	ldr	r0, [pc, #528]	; (80012d4 <set_number+0x394>)
 80010c4:	f001 f926 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_SET); //E
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ce:	4881      	ldr	r0, [pc, #516]	; (80012d4 <set_number+0x394>)
 80010d0:	f001 f920 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_SET);	//F
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	487f      	ldr	r0, [pc, #508]	; (80012d8 <set_number+0x398>)
 80010da:	f001 f91b 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e4:	487b      	ldr	r0, [pc, #492]	; (80012d4 <set_number+0x394>)
 80010e6:	f001 f915 	bl	8002314 <HAL_GPIO_WritePin>

            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f0:	4877      	ldr	r0, [pc, #476]	; (80012d0 <set_number+0x390>)
 80010f2:	f001 f90f 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 80010f6:	e120      	b.n	800133a <set_number+0x3fa>
        }

        case 4:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_SET); //A
 80010f8:	2201      	movs	r2, #1
 80010fa:	2140      	movs	r1, #64	; 0x40
 80010fc:	4874      	ldr	r0, [pc, #464]	; (80012d0 <set_number+0x390>)
 80010fe:	f001 f909 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001108:	4871      	ldr	r0, [pc, #452]	; (80012d0 <set_number+0x390>)
 800110a:	f001 f903 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001114:	486e      	ldr	r0, [pc, #440]	; (80012d0 <set_number+0x390>)
 8001116:	f001 f8fd 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_SET); //D
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001120:	486c      	ldr	r0, [pc, #432]	; (80012d4 <set_number+0x394>)
 8001122:	f001 f8f7 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_SET); //E
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112c:	4869      	ldr	r0, [pc, #420]	; (80012d4 <set_number+0x394>)
 800112e:	f001 f8f1 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_RESET);	//F
 8001132:	2200      	movs	r2, #0
 8001134:	2104      	movs	r1, #4
 8001136:	4868      	ldr	r0, [pc, #416]	; (80012d8 <set_number+0x398>)
 8001138:	f001 f8ec 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	4864      	ldr	r0, [pc, #400]	; (80012d4 <set_number+0x394>)
 8001144:	f001 f8e6 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114e:	4860      	ldr	r0, [pc, #384]	; (80012d0 <set_number+0x390>)
 8001150:	f001 f8e0 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 8001154:	e0f1      	b.n	800133a <set_number+0x3fa>
        }

        case 5:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	485d      	ldr	r0, [pc, #372]	; (80012d0 <set_number+0x390>)
 800115c:	f001 f8da 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_SET); //B
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001166:	485a      	ldr	r0, [pc, #360]	; (80012d0 <set_number+0x390>)
 8001168:	f001 f8d4 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001172:	4857      	ldr	r0, [pc, #348]	; (80012d0 <set_number+0x390>)
 8001174:	f001 f8ce 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_RESET); //D
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117e:	4855      	ldr	r0, [pc, #340]	; (80012d4 <set_number+0x394>)
 8001180:	f001 f8c8 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_SET); //E
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118a:	4852      	ldr	r0, [pc, #328]	; (80012d4 <set_number+0x394>)
 800118c:	f001 f8c2 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_RESET);	//F
 8001190:	2200      	movs	r2, #0
 8001192:	2104      	movs	r1, #4
 8001194:	4850      	ldr	r0, [pc, #320]	; (80012d8 <set_number+0x398>)
 8001196:	f001 f8bd 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a0:	484c      	ldr	r0, [pc, #304]	; (80012d4 <set_number+0x394>)
 80011a2:	f001 f8b7 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ac:	4848      	ldr	r0, [pc, #288]	; (80012d0 <set_number+0x390>)
 80011ae:	f001 f8b1 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 80011b2:	e0c2      	b.n	800133a <set_number+0x3fa>
        }

        case 6:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 80011b4:	2200      	movs	r2, #0
 80011b6:	2140      	movs	r1, #64	; 0x40
 80011b8:	4845      	ldr	r0, [pc, #276]	; (80012d0 <set_number+0x390>)
 80011ba:	f001 f8ab 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_SET); //B
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	4842      	ldr	r0, [pc, #264]	; (80012d0 <set_number+0x390>)
 80011c6:	f001 f8a5 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	483f      	ldr	r0, [pc, #252]	; (80012d0 <set_number+0x390>)
 80011d2:	f001 f89f 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_RESET); //D
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011dc:	483d      	ldr	r0, [pc, #244]	; (80012d4 <set_number+0x394>)
 80011de:	f001 f899 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_RESET); //E
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e8:	483a      	ldr	r0, [pc, #232]	; (80012d4 <set_number+0x394>)
 80011ea:	f001 f893 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_RESET);	//F
 80011ee:	2200      	movs	r2, #0
 80011f0:	2104      	movs	r1, #4
 80011f2:	4839      	ldr	r0, [pc, #228]	; (80012d8 <set_number+0x398>)
 80011f4:	f001 f88e 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fe:	4835      	ldr	r0, [pc, #212]	; (80012d4 <set_number+0x394>)
 8001200:	f001 f888 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120a:	4831      	ldr	r0, [pc, #196]	; (80012d0 <set_number+0x390>)
 800120c:	f001 f882 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 8001210:	e093      	b.n	800133a <set_number+0x3fa>
        }

        case 7:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 8001212:	2200      	movs	r2, #0
 8001214:	2140      	movs	r1, #64	; 0x40
 8001216:	482e      	ldr	r0, [pc, #184]	; (80012d0 <set_number+0x390>)
 8001218:	f001 f87c 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	482b      	ldr	r0, [pc, #172]	; (80012d0 <set_number+0x390>)
 8001224:	f001 f876 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122e:	4828      	ldr	r0, [pc, #160]	; (80012d0 <set_number+0x390>)
 8001230:	f001 f870 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_SET); //D
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123a:	4826      	ldr	r0, [pc, #152]	; (80012d4 <set_number+0x394>)
 800123c:	f001 f86a 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_SET); //E
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001246:	4823      	ldr	r0, [pc, #140]	; (80012d4 <set_number+0x394>)
 8001248:	f001 f864 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_SET);	//F
 800124c:	2201      	movs	r2, #1
 800124e:	2104      	movs	r1, #4
 8001250:	4821      	ldr	r0, [pc, #132]	; (80012d8 <set_number+0x398>)
 8001252:	f001 f85f 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_SET);  //G
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <set_number+0x394>)
 800125e:	f001 f859 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <set_number+0x390>)
 800126a:	f001 f853 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 800126e:	e064      	b.n	800133a <set_number+0x3fa>
        }

        case 8:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	; 0x40
 8001274:	4816      	ldr	r0, [pc, #88]	; (80012d0 <set_number+0x390>)
 8001276:	f001 f84d 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <set_number+0x390>)
 8001282:	f001 f847 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <set_number+0x390>)
 800128e:	f001 f841 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_RESET); //D
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <set_number+0x394>)
 800129a:	f001 f83b 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_RESET); //E
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <set_number+0x394>)
 80012a6:	f001 f835 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_RESET);	//F
 80012aa:	2200      	movs	r2, #0
 80012ac:	2104      	movs	r1, #4
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <set_number+0x398>)
 80012b0:	f001 f830 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <set_number+0x394>)
 80012bc:	f001 f82a 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c6:	4802      	ldr	r0, [pc, #8]	; (80012d0 <set_number+0x390>)
 80012c8:	f001 f824 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 80012cc:	e035      	b.n	800133a <set_number+0x3fa>
 80012ce:	bf00      	nop
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
        }

        case 9:
        {
            HAL_GPIO_WritePin(GPIOA, a_Pin, GPIO_PIN_RESET); //A
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	4818      	ldr	r0, [pc, #96]	; (8001344 <set_number+0x404>)
 80012e2:	f001 f817 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_RESET); //B
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <set_number+0x404>)
 80012ee:	f001 f811 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, c_Pin, GPIO_PIN_RESET); //C
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f8:	4812      	ldr	r0, [pc, #72]	; (8001344 <set_number+0x404>)
 80012fa:	f001 f80b 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, d_Pin, GPIO_PIN_RESET); //D
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <set_number+0x408>)
 8001306:	f001 f805 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, e_Pin, GPIO_PIN_SET); //E
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <set_number+0x408>)
 8001312:	f000 ffff 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, f_Pin, GPIO_PIN_RESET);	//F
 8001316:	2200      	movs	r2, #0
 8001318:	2104      	movs	r1, #4
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <set_number+0x40c>)
 800131c:	f000 fffa 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, g_Pin, GPIO_PIN_RESET);  //G
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <set_number+0x408>)
 8001328:	f000 fff4 	bl	8002314 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dp_Pin, GPIO_PIN_SET);  //dp
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <set_number+0x404>)
 8001334:	f000 ffee 	bl	8002314 <HAL_GPIO_WritePin>

            break;
 8001338:	bf00      	nop
        }
    }
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40020000 	.word	0x40020000
 8001348:	40020800 	.word	0x40020800
 800134c:	40020c00 	.word	0x40020c00

08001350 <display_undef>:

void display_undef () {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2102      	movs	r1, #2
 8001358:	4833      	ldr	r0, [pc, #204]	; (8001428 <display_undef+0xd8>)
 800135a:	f000 ffdb 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2108      	movs	r1, #8
 8001362:	4831      	ldr	r0, [pc, #196]	; (8001428 <display_undef+0xd8>)
 8001364:	f000 ffd6 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136e:	482f      	ldr	r0, [pc, #188]	; (800142c <display_undef+0xdc>)
 8001370:	f000 ffd0 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	482d      	ldr	r0, [pc, #180]	; (8001430 <display_undef+0xe0>)
 800137a:	f000 ffcb 	bl	8002314 <HAL_GPIO_WritePin>
    set_line();
 800137e:	f7ff fda7 	bl	8000ed0 <set_line>
    HAL_Delay(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 fc6a 	bl	8001c5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2102      	movs	r1, #2
 800138c:	4826      	ldr	r0, [pc, #152]	; (8001428 <display_undef+0xd8>)
 800138e:	f000 ffc1 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2108      	movs	r1, #8
 8001396:	4824      	ldr	r0, [pc, #144]	; (8001428 <display_undef+0xd8>)
 8001398:	f000 ffbc 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	4822      	ldr	r0, [pc, #136]	; (800142c <display_undef+0xdc>)
 80013a4:	f000 ffb6 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	4820      	ldr	r0, [pc, #128]	; (8001430 <display_undef+0xe0>)
 80013ae:	f000 ffb1 	bl	8002314 <HAL_GPIO_WritePin>
    set_line();
 80013b2:	f7ff fd8d 	bl	8000ed0 <set_line>
    HAL_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 fc50 	bl	8001c5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2102      	movs	r1, #2
 80013c0:	4819      	ldr	r0, [pc, #100]	; (8001428 <display_undef+0xd8>)
 80013c2:	f000 ffa7 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <display_undef+0xd8>)
 80013cc:	f000 ffa2 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d6:	4815      	ldr	r0, [pc, #84]	; (800142c <display_undef+0xdc>)
 80013d8:	f000 ff9c 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2110      	movs	r1, #16
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <display_undef+0xe0>)
 80013e2:	f000 ff97 	bl	8002314 <HAL_GPIO_WritePin>
    set_line();
 80013e6:	f7ff fd73 	bl	8000ed0 <set_line>
    HAL_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f000 fc36 	bl	8001c5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2102      	movs	r1, #2
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <display_undef+0xd8>)
 80013f6:	f000 ff8d 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2108      	movs	r1, #8
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <display_undef+0xd8>)
 8001400:	f000 ff88 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <display_undef+0xdc>)
 800140c:	f000 ff82 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2110      	movs	r1, #16
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <display_undef+0xe0>)
 8001416:	f000 ff7d 	bl	8002314 <HAL_GPIO_WritePin>
    set_line();
 800141a:	f7ff fd59 	bl	8000ed0 <set_line>
    HAL_Delay(1);
 800141e:	2001      	movs	r0, #1
 8001420:	f000 fc1c 	bl	8001c5c <HAL_Delay>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020400 	.word	0x40020400
 800142c:	40020000 	.word	0x40020000
 8001430:	40020800 	.word	0x40020800

08001434 <display_number>:

void display_number (int number){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2102      	movs	r1, #2
 8001440:	4857      	ldr	r0, [pc, #348]	; (80015a0 <display_number+0x16c>)
 8001442:	f000 ff67 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2108      	movs	r1, #8
 800144a:	4855      	ldr	r0, [pc, #340]	; (80015a0 <display_number+0x16c>)
 800144c:	f000 ff62 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001456:	4853      	ldr	r0, [pc, #332]	; (80015a4 <display_number+0x170>)
 8001458:	f000 ff5c 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2110      	movs	r1, #16
 8001460:	4851      	ldr	r0, [pc, #324]	; (80015a8 <display_number+0x174>)
 8001462:	f000 ff57 	bl	8002314 <HAL_GPIO_WritePin>
    set_number(number % 10);
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4b50      	ldr	r3, [pc, #320]	; (80015ac <display_number+0x178>)
 800146a:	fb83 1302 	smull	r1, r3, r3, r2
 800146e:	1099      	asrs	r1, r3, #2
 8001470:	17d3      	asrs	r3, r2, #31
 8001472:	1ac9      	subs	r1, r1, r3
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	1ad1      	subs	r1, r2, r3
 800147e:	4608      	mov	r0, r1
 8001480:	f7ff fd5e 	bl	8000f40 <set_number>
    HAL_Delay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f000 fbe9 	bl	8001c5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2102      	movs	r1, #2
 800148e:	4844      	ldr	r0, [pc, #272]	; (80015a0 <display_number+0x16c>)
 8001490:	f000 ff40 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2108      	movs	r1, #8
 8001498:	4841      	ldr	r0, [pc, #260]	; (80015a0 <display_number+0x16c>)
 800149a:	f000 ff3b 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a4:	483f      	ldr	r0, [pc, #252]	; (80015a4 <display_number+0x170>)
 80014a6:	f000 ff35 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2110      	movs	r1, #16
 80014ae:	483e      	ldr	r0, [pc, #248]	; (80015a8 <display_number+0x174>)
 80014b0:	f000 ff30 	bl	8002314 <HAL_GPIO_WritePin>
    set_number(number / 10 % 10);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <display_number+0x178>)
 80014b8:	fb82 1203 	smull	r1, r2, r2, r3
 80014bc:	1092      	asrs	r2, r2, #2
 80014be:	17db      	asrs	r3, r3, #31
 80014c0:	1ad2      	subs	r2, r2, r3
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <display_number+0x178>)
 80014c4:	fb83 1302 	smull	r1, r3, r3, r2
 80014c8:	1099      	asrs	r1, r3, #2
 80014ca:	17d3      	asrs	r3, r2, #31
 80014cc:	1ac9      	subs	r1, r1, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	4608      	mov	r0, r1
 80014da:	f7ff fd31 	bl	8000f40 <set_number>
    HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f000 fbbc 	bl	8001c5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2102      	movs	r1, #2
 80014e8:	482d      	ldr	r0, [pc, #180]	; (80015a0 <display_number+0x16c>)
 80014ea:	f000 ff13 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2108      	movs	r1, #8
 80014f2:	482b      	ldr	r0, [pc, #172]	; (80015a0 <display_number+0x16c>)
 80014f4:	f000 ff0e 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fe:	4829      	ldr	r0, [pc, #164]	; (80015a4 <display_number+0x170>)
 8001500:	f000 ff08 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2110      	movs	r1, #16
 8001508:	4827      	ldr	r0, [pc, #156]	; (80015a8 <display_number+0x174>)
 800150a:	f000 ff03 	bl	8002314 <HAL_GPIO_WritePin>
    set_number(number / 100 % 10);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <display_number+0x17c>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1152      	asrs	r2, r2, #5
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <display_number+0x178>)
 800151e:	fb83 1302 	smull	r1, r3, r3, r2
 8001522:	1099      	asrs	r1, r3, #2
 8001524:	17d3      	asrs	r3, r2, #31
 8001526:	1ac9      	subs	r1, r1, r3
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1ad1      	subs	r1, r2, r3
 8001532:	4608      	mov	r0, r1
 8001534:	f7ff fd04 	bl	8000f40 <set_number>
    HAL_Delay(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f000 fb8f 	bl	8001c5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, DIG1_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2102      	movs	r1, #2
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <display_number+0x16c>)
 8001544:	f000 fee6 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2108      	movs	r1, #8
 800154c:	4814      	ldr	r0, [pc, #80]	; (80015a0 <display_number+0x16c>)
 800154e:	f000 fee1 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIG3_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4812      	ldr	r0, [pc, #72]	; (80015a4 <display_number+0x170>)
 800155a:	f000 fedb 	bl	8002314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, DIG4_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2110      	movs	r1, #16
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <display_number+0x174>)
 8001564:	f000 fed6 	bl	8002314 <HAL_GPIO_WritePin>
    set_number(number / 1000 % 10);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <display_number+0x180>)
 800156c:	fb82 1203 	smull	r1, r2, r2, r3
 8001570:	1192      	asrs	r2, r2, #6
 8001572:	17db      	asrs	r3, r3, #31
 8001574:	1ad2      	subs	r2, r2, r3
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <display_number+0x178>)
 8001578:	fb83 1302 	smull	r1, r3, r3, r2
 800157c:	1099      	asrs	r1, r3, #2
 800157e:	17d3      	asrs	r3, r2, #31
 8001580:	1ac9      	subs	r1, r1, r3
 8001582:	460b      	mov	r3, r1
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	1ad1      	subs	r1, r2, r3
 800158c:	4608      	mov	r0, r1
 800158e:	f7ff fcd7 	bl	8000f40 <set_number>
    HAL_Delay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f000 fb62 	bl	8001c5c <HAL_Delay>

}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020800 	.word	0x40020800
 80015ac:	66666667 	.word	0x66666667
 80015b0:	51eb851f 	.word	0x51eb851f
 80015b4:	10624dd3 	.word	0x10624dd3

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015bc:	f000 fadc 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c0:	f000 f81e 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c4:	f000 f8a6 	bl	8001714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015c8:	f000 f87a 	bl	80016c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80015cc:	2204      	movs	r2, #4
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <main+0x38>)
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <main+0x3c>)
 80015d2:	f001 fc5f 	bl	8002e94 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (undef_flag) {
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <main+0x40>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <main+0x2c>
		display_undef();
 80015de:	f7ff feb7 	bl	8001350 <display_undef>
 80015e2:	e7f8      	b.n	80015d6 <main+0x1e>
	}
	else {
		display_number(n);
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <main+0x44>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff23 	bl	8001434 <display_number>
	if (undef_flag) {
 80015ee:	e7f2      	b.n	80015d6 <main+0x1e>
 80015f0:	200000ac 	.word	0x200000ac
 80015f4:	200000b8 	.word	0x200000b8
 80015f8:	20000000 	.word	0x20000000
 80015fc:	200000a0 	.word	0x200000a0

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b094      	sub	sp, #80	; 0x50
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	2234      	movs	r2, #52	; 0x34
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fae4 	bl	8003bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <SystemClock_Config+0xb8>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <SystemClock_Config+0xb8>)
 800162e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <SystemClock_Config+0xb8>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001640:	2300      	movs	r3, #0
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <SystemClock_Config+0xbc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <SystemClock_Config+0xbc>)
 800164e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <SystemClock_Config+0xbc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001660:	2302      	movs	r3, #2
 8001662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001664:	2301      	movs	r3, #1
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001668:	2310      	movs	r3, #16
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4618      	mov	r0, r3
 8001676:	f001 f8dd 	bl	8002834 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001680:	f000 f956 	bl	8001930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fe52 	bl	8002348 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016aa:	f000 f941 	bl	8001930 <Error_Handler>
  }
}
 80016ae:	bf00      	nop
 80016b0:	3750      	adds	r7, #80	; 0x50
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f001 fb3a 	bl	8002d70 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f915 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000b8 	.word	0x200000b8
 8001710:	40004400 	.word	0x40004400

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <MX_GPIO_Init+0x130>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a44      	ldr	r2, [pc, #272]	; (8001844 <MX_GPIO_Init+0x130>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <MX_GPIO_Init+0x130>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <MX_GPIO_Init+0x130>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <MX_GPIO_Init+0x130>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <MX_GPIO_Init+0x130>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <MX_GPIO_Init+0x130>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a36      	ldr	r2, [pc, #216]	; (8001844 <MX_GPIO_Init+0x130>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <MX_GPIO_Init+0x130>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <MX_GPIO_Init+0x130>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <MX_GPIO_Init+0x130>)
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <MX_GPIO_Init+0x130>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a_Pin|DIG3_Pin|c_Pin|b_Pin
 800179a:	2200      	movs	r2, #0
 800179c:	f649 4140 	movw	r1, #40000	; 0x9c40
 80017a0:	4829      	ldr	r0, [pc, #164]	; (8001848 <MX_GPIO_Init+0x134>)
 80017a2:	f000 fdb7 	bl	8002314 <HAL_GPIO_WritePin>
                          |dp_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIG4_Pin|d_Pin|e_Pin|g_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f641 4110 	movw	r1, #7184	; 0x1c10
 80017ac:	4827      	ldr	r0, [pc, #156]	; (800184c <MX_GPIO_Init+0x138>)
 80017ae:	f000 fdb1 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG1_Pin|DIG2_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	210a      	movs	r1, #10
 80017b6:	4826      	ldr	r0, [pc, #152]	; (8001850 <MX_GPIO_Init+0x13c>)
 80017b8:	f000 fdac 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	2104      	movs	r1, #4
 80017c0:	4824      	ldr	r0, [pc, #144]	; (8001854 <MX_GPIO_Init+0x140>)
 80017c2:	f000 fda7 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : a_Pin DIG3_Pin c_Pin b_Pin
                           dp_Pin */
  GPIO_InitStruct.Pin = a_Pin|DIG3_Pin|c_Pin|b_Pin
 80017c6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80017ca:	617b      	str	r3, [r7, #20]
                          |dp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	481a      	ldr	r0, [pc, #104]	; (8001848 <MX_GPIO_Init+0x134>)
 80017e0:	f000 fc04 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG4_Pin d_Pin e_Pin g_Pin */
  GPIO_InitStruct.Pin = DIG4_Pin|d_Pin|e_Pin|g_Pin;
 80017e4:	f641 4310 	movw	r3, #7184	; 0x1c10
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4813      	ldr	r0, [pc, #76]	; (800184c <MX_GPIO_Init+0x138>)
 80017fe:	f000 fbf5 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin;
 8001802:	230a      	movs	r3, #10
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <MX_GPIO_Init+0x13c>)
 800181a:	f000 fbe7 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : f_Pin */
  GPIO_InitStruct.Pin = f_Pin;
 800181e:	2304      	movs	r3, #4
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(f_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <MX_GPIO_Init+0x140>)
 8001836:	f000 fbd9 	bl	8001fec <HAL_GPIO_Init>

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020800 	.word	0x40020800
 8001850:	40020400 	.word	0x40020400
 8001854:	40020c00 	.word	0x40020c00

08001858 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	n_r = ((int)rx_buffer[1] - 48) * 10 + ((int)rx_buffer[2] - 48);  // since the numbers (digits) start from 48 in ASCII code
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_UART_RxCpltCallback+0xb4>)
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	461a      	mov	r2, r3
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_UART_RxCpltCallback+0xb4>)
 8001874:	789b      	ldrb	r3, [r3, #2]
 8001876:	3b30      	subs	r3, #48	; 0x30
 8001878:	4413      	add	r3, r2
 800187a:	4a25      	ldr	r2, [pc, #148]	; (8001910 <HAL_UART_RxCpltCallback+0xb8>)
 800187c:	6013      	str	r3, [r2, #0]
	if (n_r == 0) {
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_UART_RxCpltCallback+0xb8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d107      	bne.n	8001896 <HAL_UART_RxCpltCallback+0x3e>
		undef_flag = 1;
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_UART_RxCpltCallback+0xbc>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
		sprintf(tx_buffer, "N--E");
 800188c:	4922      	ldr	r1, [pc, #136]	; (8001918 <HAL_UART_RxCpltCallback+0xc0>)
 800188e:	4823      	ldr	r0, [pc, #140]	; (800191c <HAL_UART_RxCpltCallback+0xc4>)
 8001890:	f002 f9ac 	bl	8003bec <siprintf>
 8001894:	e02b      	b.n	80018ee <HAL_UART_RxCpltCallback+0x96>
	}
	else {
		undef_flag = 0;
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_UART_RxCpltCallback+0xbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
		res_n = (int)round(log(n_r));
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_UART_RxCpltCallback+0xb8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe57 	bl	8000554 <__aeabi_i2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b10 	vmov	d0, r2, r3
 80018ae:	f002 fe13 	bl	80044d8 <log>
 80018b2:	eeb0 7a40 	vmov.f32	s14, s0
 80018b6:	eef0 7a60 	vmov.f32	s15, s1
 80018ba:	eeb0 0a47 	vmov.f32	s0, s14
 80018be:	eef0 0a67 	vmov.f32	s1, s15
 80018c2:	f002 fdc1 	bl	8004448 <round>
 80018c6:	ec53 2b10 	vmov	r2, r3, d0
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f95b 	bl	8000b88 <__aeabi_d2iz>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_UART_RxCpltCallback+0xc8>)
 80018d6:	6013      	str	r3, [r2, #0]
		n = res_n;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_RxCpltCallback+0xc8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_UART_RxCpltCallback+0xcc>)
 80018de:	6013      	str	r3, [r2, #0]
		sprintf(tx_buffer, "N0%uE", res_n);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_UART_RxCpltCallback+0xc8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4910      	ldr	r1, [pc, #64]	; (8001928 <HAL_UART_RxCpltCallback+0xd0>)
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <HAL_UART_RxCpltCallback+0xc4>)
 80018ea:	f002 f97f 	bl	8003bec <siprintf>
	}
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sizeof(tx_buffer));
 80018ee:	2205      	movs	r2, #5
 80018f0:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_UART_RxCpltCallback+0xc4>)
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <HAL_UART_RxCpltCallback+0xd4>)
 80018f4:	f001 fa89 	bl	8002e0a <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80018f8:	2204      	movs	r2, #4
 80018fa:	4904      	ldr	r1, [pc, #16]	; (800190c <HAL_UART_RxCpltCallback+0xb4>)
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <HAL_UART_RxCpltCallback+0xd4>)
 80018fe:	f001 fac9 	bl	8002e94 <HAL_UART_Receive_IT>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000ac 	.word	0x200000ac
 8001910:	200000a4 	.word	0x200000a4
 8001914:	20000000 	.word	0x20000000
 8001918:	08004908 	.word	0x08004908
 800191c:	200000b0 	.word	0x200000b0
 8001920:	200000a8 	.word	0x200000a8
 8001924:	200000a0 	.word	0x200000a0
 8001928:	08004910 	.word	0x08004910
 800192c:	200000b8 	.word	0x200000b8

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001938:	e7fe      	b.n	8001938 <Error_Handler+0x8>
	...

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_MspInit+0x4c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_MspInit+0x4c>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_MspInit+0x4c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x4c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_UART_MspInit+0x94>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d133      	bne.n	8001a16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e6:	230c      	movs	r3, #12
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f6:	2307      	movs	r3, #7
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <HAL_UART_MspInit+0x9c>)
 8001a02:	f000 faf3 	bl	8001fec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2026      	movs	r0, #38	; 0x26
 8001a0c:	f000 fa25 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a10:	2026      	movs	r0, #38	; 0x26
 8001a12:	f000 fa3e 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40004400 	.word	0x40004400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 f8d0 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART2_IRQHandler+0x10>)
 8001a86:	f001 fa35 	bl	8002ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200000b8 	.word	0x200000b8

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f002 f860 	bl	8003b88 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20020000 	.word	0x20020000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	20000094 	.word	0x20000094
 8001afc:	20000110 	.word	0x20000110

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b4e:	f7ff ffd7 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f002 f81f 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff fd2f 	bl	80015b8 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b68:	08004974 	.word	0x08004974
  ldr r2, =_sbss
 8001b6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b70:	20000110 	.word	0x20000110

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f94f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fec6 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000004 	.word	0x20000004
 8001c14:	2000000c 	.word	0x2000000c
 8001c18:	20000008 	.word	0x20000008

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	200000fc 	.word	0x200000fc

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200000fc 	.word	0x200000fc

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff feb6 	bl	8001c44 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d008      	beq.n	8001ef8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e052      	b.n	8001f9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0216 	bic.w	r2, r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d103      	bne.n	8001f28 <HAL_DMA_Abort+0x62>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0208 	bic.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f48:	e013      	b.n	8001f72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4a:	f7ff fe7b 	bl	8001c44 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d90c      	bls.n	8001f72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e015      	b.n	8001f9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e4      	bne.n	8001f4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	223f      	movs	r2, #63	; 0x3f
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e00c      	b.n	8001fde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e165      	b.n	80022d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8154 	bne.w	80022ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80ae 	beq.w	80022ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <HAL_GPIO_Init+0x300>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a5c      	ldr	r2, [pc, #368]	; (80022ec <HAL_GPIO_Init+0x300>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b5a      	ldr	r3, [pc, #360]	; (80022ec <HAL_GPIO_Init+0x300>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_GPIO_Init+0x304>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4f      	ldr	r2, [pc, #316]	; (80022f4 <HAL_GPIO_Init+0x308>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x21a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_GPIO_Init+0x30c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x216>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4d      	ldr	r2, [pc, #308]	; (80022fc <HAL_GPIO_Init+0x310>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x212>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <HAL_GPIO_Init+0x314>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x20e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_GPIO_Init+0x318>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x20a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <HAL_GPIO_Init+0x31c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x206>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_GPIO_Init+0x320>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x202>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00c      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021ee:	2307      	movs	r3, #7
 80021f0:	e00a      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021f2:	2305      	movs	r3, #5
 80021f4:	e008      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 8002206:	2300      	movs	r3, #0
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f002 0203 	and.w	r2, r2, #3
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4093      	lsls	r3, r2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002218:	4935      	ldr	r1, [pc, #212]	; (80022f0 <HAL_GPIO_Init+0x304>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_GPIO_Init+0x324>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224a:	4a31      	ldr	r2, [pc, #196]	; (8002310 <HAL_GPIO_Init+0x324>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_GPIO_Init+0x324>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002274:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_GPIO_Init+0x324>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_GPIO_Init+0x324>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_GPIO_Init+0x324>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_GPIO_Init+0x324>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_GPIO_Init+0x324>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f67f ae96 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40013800 	.word	0x40013800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40020400 	.word	0x40020400
 80022fc:	40020800 	.word	0x40020800
 8002300:	40020c00 	.word	0x40020c00
 8002304:	40021000 	.word	0x40021000
 8002308:	40021400 	.word	0x40021400
 800230c:	40021800 	.word	0x40021800
 8002310:	40013c00 	.word	0x40013c00

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0cc      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b68      	ldr	r3, [pc, #416]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d90c      	bls.n	8002384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d044      	beq.n	8002468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	2b03      	cmp	r3, #3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e067      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4934      	ldr	r1, [pc, #208]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002438:	f7ff fc04 	bl	8001c44 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7ff fc00 	bl	8001c44 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d20c      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f855 	bl	800257c <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fb64 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00
 8002504:	40023800 	.word	0x40023800
 8002508:	08004918 	.word	0x08004918
 800250c:	20000004 	.word	0x20000004
 8002510:	20000008 	.word	0x20000008

08002514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_GetHCLKFreq+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002530:	f7ff fff0 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	08004928 	.word	0x08004928

08002554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002558:	f7ff ffdc 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0b5b      	lsrs	r3, r3, #13
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	08004928 	.word	0x08004928

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002580:	b087      	sub	sp, #28
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002584:	2600      	movs	r6, #0
 8002586:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002588:	2600      	movs	r6, #0
 800258a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800258c:	2600      	movs	r6, #0
 800258e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002590:	2600      	movs	r6, #0
 8002592:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002594:	2600      	movs	r6, #0
 8002596:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002598:	4ea3      	ldr	r6, [pc, #652]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800259a:	68b6      	ldr	r6, [r6, #8]
 800259c:	f006 060c 	and.w	r6, r6, #12
 80025a0:	2e0c      	cmp	r6, #12
 80025a2:	f200 8137 	bhi.w	8002814 <HAL_RCC_GetSysClockFreq+0x298>
 80025a6:	f20f 0c08 	addw	ip, pc, #8
 80025aa:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025e5 	.word	0x080025e5
 80025b4:	08002815 	.word	0x08002815
 80025b8:	08002815 	.word	0x08002815
 80025bc:	08002815 	.word	0x08002815
 80025c0:	080025eb 	.word	0x080025eb
 80025c4:	08002815 	.word	0x08002815
 80025c8:	08002815 	.word	0x08002815
 80025cc:	08002815 	.word	0x08002815
 80025d0:	080025f1 	.word	0x080025f1
 80025d4:	08002815 	.word	0x08002815
 80025d8:	08002815 	.word	0x08002815
 80025dc:	08002815 	.word	0x08002815
 80025e0:	08002707 	.word	0x08002707
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b91      	ldr	r3, [pc, #580]	; (800282c <HAL_RCC_GetSysClockFreq+0x2b0>)
 80025e6:	613b      	str	r3, [r7, #16]
       break;
 80025e8:	e117      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ea:	4b91      	ldr	r3, [pc, #580]	; (8002830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80025ec:	613b      	str	r3, [r7, #16]
      break;
 80025ee:	e114      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f0:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b8b      	ldr	r3, [pc, #556]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d024      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	461a      	mov	r2, r3
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002616:	f04f 0500 	mov.w	r5, #0
 800261a:	ea02 0004 	and.w	r0, r2, r4
 800261e:	ea03 0105 	and.w	r1, r3, r5
 8002622:	4b83      	ldr	r3, [pc, #524]	; (8002830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002624:	fb03 f201 	mul.w	r2, r3, r1
 8002628:	2300      	movs	r3, #0
 800262a:	fb03 f300 	mul.w	r3, r3, r0
 800262e:	4413      	add	r3, r2
 8002630:	4a7f      	ldr	r2, [pc, #508]	; (8002830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002632:	fba0 0102 	umull	r0, r1, r0, r2
 8002636:	440b      	add	r3, r1
 8002638:	4619      	mov	r1, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	f7fe fac9 	bl	8000bd8 <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4613      	mov	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e04c      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002650:	4b75      	ldr	r3, [pc, #468]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	461a      	mov	r2, r3
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	ea02 0800 	and.w	r8, r2, r0
 8002668:	ea03 0901 	and.w	r9, r3, r1
 800266c:	4640      	mov	r0, r8
 800266e:	4649      	mov	r1, r9
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	014b      	lsls	r3, r1, #5
 800267a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800267e:	0142      	lsls	r2, r0, #5
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	ebb0 0008 	subs.w	r0, r0, r8
 8002688:	eb61 0109 	sbc.w	r1, r1, r9
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	018b      	lsls	r3, r1, #6
 8002696:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800269a:	0182      	lsls	r2, r0, #6
 800269c:	1a12      	subs	r2, r2, r0
 800269e:	eb63 0301 	sbc.w	r3, r3, r1
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	00d9      	lsls	r1, r3, #3
 80026ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026b0:	00d0      	lsls	r0, r2, #3
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	eb12 0208 	adds.w	r2, r2, r8
 80026ba:	eb43 0309 	adc.w	r3, r3, r9
 80026be:	f04f 0000 	mov.w	r0, #0
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	0299      	lsls	r1, r3, #10
 80026c8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026cc:	0290      	lsls	r0, r2, #10
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	461a      	mov	r2, r3
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	f7fe fa7b 	bl	8000bd8 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4613      	mov	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ea:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	3301      	adds	r3, #1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	613b      	str	r3, [r7, #16]
      break;
 8002704:	e089      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002706:	4948      	ldr	r1, [pc, #288]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002708:	6849      	ldr	r1, [r1, #4]
 800270a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800270e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002710:	4945      	ldr	r1, [pc, #276]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002712:	6849      	ldr	r1, [r1, #4]
 8002714:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002718:	2900      	cmp	r1, #0
 800271a:	d024      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271c:	4942      	ldr	r1, [pc, #264]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800271e:	6849      	ldr	r1, [r1, #4]
 8002720:	0989      	lsrs	r1, r1, #6
 8002722:	4608      	mov	r0, r1
 8002724:	f04f 0100 	mov.w	r1, #0
 8002728:	f240 14ff 	movw	r4, #511	; 0x1ff
 800272c:	f04f 0500 	mov.w	r5, #0
 8002730:	ea00 0204 	and.w	r2, r0, r4
 8002734:	ea01 0305 	and.w	r3, r1, r5
 8002738:	493d      	ldr	r1, [pc, #244]	; (8002830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800273a:	fb01 f003 	mul.w	r0, r1, r3
 800273e:	2100      	movs	r1, #0
 8002740:	fb01 f102 	mul.w	r1, r1, r2
 8002744:	1844      	adds	r4, r0, r1
 8002746:	493a      	ldr	r1, [pc, #232]	; (8002830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002748:	fba2 0101 	umull	r0, r1, r2, r1
 800274c:	1863      	adds	r3, r4, r1
 800274e:	4619      	mov	r1, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	461a      	mov	r2, r3
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	f7fe fa3e 	bl	8000bd8 <__aeabi_uldivmod>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4613      	mov	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e04a      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	461a      	mov	r2, r3
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	ea02 0400 	and.w	r4, r2, r0
 800277e:	ea03 0501 	and.w	r5, r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	014b      	lsls	r3, r1, #5
 8002790:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002794:	0142      	lsls	r2, r0, #5
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	1b00      	subs	r0, r0, r4
 800279c:	eb61 0105 	sbc.w	r1, r1, r5
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	018b      	lsls	r3, r1, #6
 80027aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ae:	0182      	lsls	r2, r0, #6
 80027b0:	1a12      	subs	r2, r2, r0
 80027b2:	eb63 0301 	sbc.w	r3, r3, r1
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	00d9      	lsls	r1, r3, #3
 80027c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027c4:	00d0      	lsls	r0, r2, #3
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	1912      	adds	r2, r2, r4
 80027cc:	eb45 0303 	adc.w	r3, r5, r3
 80027d0:	f04f 0000 	mov.w	r0, #0
 80027d4:	f04f 0100 	mov.w	r1, #0
 80027d8:	0299      	lsls	r1, r3, #10
 80027da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027de:	0290      	lsls	r0, r2, #10
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	f7fe f9f2 	bl	8000bd8 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0f1b      	lsrs	r3, r3, #28
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	613b      	str	r3, [r7, #16]
      break;
 8002812:	e002      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002816:	613b      	str	r3, [r7, #16]
      break;
 8002818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281a:	693b      	ldr	r3, [r7, #16]
}
 800281c:	4618      	mov	r0, r3
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800
 800282c:	00f42400 	.word	0x00f42400
 8002830:	017d7840 	.word	0x017d7840

08002834 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e28d      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8083 	beq.w	800295a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002854:	4b94      	ldr	r3, [pc, #592]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b04      	cmp	r3, #4
 800285e:	d019      	beq.n	8002894 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002860:	4b91      	ldr	r3, [pc, #580]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002868:	2b08      	cmp	r3, #8
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800286c:	4b8e      	ldr	r3, [pc, #568]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002878:	d00c      	beq.n	8002894 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287a:	4b8b      	ldr	r3, [pc, #556]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d112      	bne.n	80028ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002892:	d10b      	bne.n	80028ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	4b84      	ldr	r3, [pc, #528]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d05b      	beq.n	8002958 <HAL_RCC_OscConfig+0x124>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d157      	bne.n	8002958 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e25a      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d106      	bne.n	80028c4 <HAL_RCC_OscConfig+0x90>
 80028b6:	4b7c      	ldr	r3, [pc, #496]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7b      	ldr	r2, [pc, #492]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e01d      	b.n	8002900 <HAL_RCC_OscConfig+0xcc>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0xb4>
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a72      	ldr	r2, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0xcc>
 80028e8:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7ff f99c 	bl	8001c44 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff f998 	bl	8001c44 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e21f      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0xdc>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7ff f988 	bl	8001c44 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff f984 	bl	8001c44 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e20b      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x104>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d06f      	beq.n	8002a46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002966:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b00      	cmp	r3, #0
 8002970:	d017      	beq.n	80029a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002972:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800297a:	2b08      	cmp	r3, #8
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x186>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1d3      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x278>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7ff f931 	bl	8001c44 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff f92d 	bl	8001c44 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1b4      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4925      	ldr	r1, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x278>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff f910 	bl	8001c44 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7ff f90c 	bl	8001c44 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e193      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x27c>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff f8f0 	bl	8001c44 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff f8ec 	bl	8001c44 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e173      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x234>
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7ff f8d9 	bl	8001c44 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00e      	b.n	8002ab4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a96:	f7ff f8d5 	bl	8001c44 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e15c      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
 8002ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b8a      	ldr	r3, [pc, #552]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ea      	bne.n	8002a96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8097 	beq.w	8002bfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b83      	ldr	r3, [pc, #524]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b7c      	ldr	r3, [pc, #496]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b79      	ldr	r3, [pc, #484]	; (8002ce4 <HAL_RCC_OscConfig+0x4b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x4b0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a75      	ldr	r2, [pc, #468]	; (8002ce4 <HAL_RCC_OscConfig+0x4b0>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7ff f895 	bl	8001c44 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7ff f891 	bl	8001c44 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e118      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x4b0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x31e>
 8002b44:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a65      	ldr	r2, [pc, #404]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x358>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x340>
 8002b5a:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a60      	ldr	r2, [pc, #384]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5d      	ldr	r2, [pc, #372]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x358>
 8002b74:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a59      	ldr	r2, [pc, #356]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a56      	ldr	r2, [pc, #344]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7ff f856 	bl	8001c44 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7ff f852 	bl	8001c44 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0d7      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x368>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7ff f840 	bl	8001c44 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7ff f83c 	bl	8001c44 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0c1      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80ad 	beq.w	8002d60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d060      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d145      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_RCC_OscConfig+0x4b4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7ff f810 	bl	8001c44 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff f80c 	bl	8001c44 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e093      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	071b      	lsls	r3, r3, #28
 8002c72:	491b      	ldr	r1, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x4b4>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fe ffe1 	bl	8001c44 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fe ffdd 	bl	8001c44 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e064      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x452>
 8002ca4:	e05c      	b.n	8002d60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x4b4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe ffca 	bl	8001c44 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe ffc6 	bl	8001c44 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04d      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x480>
 8002cd2:	e045      	b.n	8002d60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e040      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_RCC_OscConfig+0x538>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d030      	beq.n	8002d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d129      	bne.n	8002d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d122      	bne.n	8002d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d119      	bne.n	8002d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	3b01      	subs	r3, #1
 8002d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d10f      	bne.n	8002d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e03f      	b.n	8002e02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fe fdf8 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2224      	movs	r2, #36	; 0x24
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fd1f 	bl	80037f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	4613      	mov	r3, r2
 8002e16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d130      	bne.n	8002e86 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Transmit_IT+0x26>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e029      	b.n	8002e88 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Transmit_IT+0x38>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e022      	b.n	8002e88 <HAL_UART_Transmit_IT+0x7e>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2221      	movs	r2, #33	; 0x21
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e80:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d11d      	bne.n	8002eea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_UART_Receive_IT+0x26>
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e016      	b.n	8002eec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Receive_IT+0x38>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e00f      	b.n	8002eec <HAL_UART_Receive_IT+0x58>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	461a      	mov	r2, r3
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fab5 	bl	8003450 <UART_Start_Receive_IT>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	e000      	b.n	8002eec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0ba      	sub	sp, #232	; 0xe8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_UART_IRQHandler+0x66>
 8002f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fb95 	bl	8003682 <UART_Receive_IT>
      return;
 8002f58:	e256      	b.n	8003408 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80de 	beq.w	8003120 <HAL_UART_IRQHandler+0x22c>
 8002f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80d1 	beq.w	8003120 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_UART_IRQHandler+0xae>
 8002f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_UART_IRQHandler+0xd2>
 8002fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0202 	orr.w	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_UART_IRQHandler+0xf6>
 8002fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0204 	orr.w	r2, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d011      	beq.n	800301a <HAL_UART_IRQHandler+0x126>
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0208 	orr.w	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 81ed 	beq.w	80033fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_UART_IRQHandler+0x14e>
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fb20 	bl	8003682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_UART_IRQHandler+0x17a>
 8003066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d04f      	beq.n	800310e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa28 	bl	80034c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	d141      	bne.n	8003106 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3314      	adds	r3, #20
 8003088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800309c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3314      	adds	r3, #20
 80030aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1d9      	bne.n	8003082 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d013      	beq.n	80030fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4a7d      	ldr	r2, [pc, #500]	; (80032d0 <HAL_UART_IRQHandler+0x3dc>)
 80030dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe ff5f 	bl	8001fa6 <HAL_DMA_Abort_IT>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030f8:	4610      	mov	r0, r2
 80030fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	e00e      	b.n	800311c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f990 	bl	8003424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003104:	e00a      	b.n	800311c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f98c 	bl	8003424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310c:	e006      	b.n	800311c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f988 	bl	8003424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800311a:	e170      	b.n	80033fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	bf00      	nop
    return;
 800311e:	e16e      	b.n	80033fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 814a 	bne.w	80033be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8143 	beq.w	80033be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 813c 	beq.w	80033be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b40      	cmp	r3, #64	; 0x40
 8003168:	f040 80b4 	bne.w	80032d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8140 	beq.w	8003402 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800318a:	429a      	cmp	r2, r3
 800318c:	f080 8139 	bcs.w	8003402 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003196:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a2:	f000 8088 	beq.w	80032b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80031d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1d9      	bne.n	80031a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3314      	adds	r3, #20
 8003212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003216:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800321a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800321e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e1      	bne.n	80031f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3314      	adds	r3, #20
 8003234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800323e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003252:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e3      	bne.n	800322e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003286:	f023 0310 	bic.w	r3, r3, #16
 800328a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003298:	65ba      	str	r2, [r7, #88]	; 0x58
 800329a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800329e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e3      	bne.n	8003274 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fe08 	bl	8001ec6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8b6 	bl	8003438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032cc:	e099      	b.n	8003402 <HAL_UART_IRQHandler+0x50e>
 80032ce:	bf00      	nop
 80032d0:	0800358b 	.word	0x0800358b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 808b 	beq.w	8003406 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80032f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8086 	beq.w	8003406 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800331e:	647a      	str	r2, [r7, #68]	; 0x44
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e3      	bne.n	80032fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3314      	adds	r3, #20
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	623b      	str	r3, [r7, #32]
   return(result);
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003356:	633a      	str	r2, [r7, #48]	; 0x30
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800335c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335e:	e841 2300 	strex	r3, r2, [r1]
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e3      	bne.n	8003332 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	60fb      	str	r3, [r7, #12]
   return(result);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0310 	bic.w	r3, r3, #16
 800338e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800339c:	61fa      	str	r2, [r7, #28]
 800339e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a0:	69b9      	ldr	r1, [r7, #24]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	e841 2300 	strex	r3, r2, [r1]
 80033a8:	617b      	str	r3, [r7, #20]
   return(result);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e3      	bne.n	8003378 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f83e 	bl	8003438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033bc:	e023      	b.n	8003406 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_UART_IRQHandler+0x4ea>
 80033ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8eb 	bl	80035b2 <UART_Transmit_IT>
    return;
 80033dc:	e014      	b.n	8003408 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00e      	beq.n	8003408 <HAL_UART_IRQHandler+0x514>
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f92b 	bl	8003652 <UART_EndTransmit_IT>
    return;
 80033fc:	e004      	b.n	8003408 <HAL_UART_IRQHandler+0x514>
    return;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_UART_IRQHandler+0x514>
      return;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_UART_IRQHandler+0x514>
      return;
 8003406:	bf00      	nop
  }
}
 8003408:	37e8      	adds	r7, #232	; 0xe8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop

08003410 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2222      	movs	r2, #34	; 0x22
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003494:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0220 	orr.w	r2, r2, #32
 80034b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b095      	sub	sp, #84	; 0x54
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034ec:	643a      	str	r2, [r7, #64]	; 0x40
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3314      	adds	r3, #20
 8003506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	64bb      	str	r3, [r7, #72]	; 0x48
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3314      	adds	r3, #20
 800351e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	2b01      	cmp	r3, #1
 800353a:	d119      	bne.n	8003570 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	60bb      	str	r3, [r7, #8]
   return(result);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0310 	bic.w	r3, r3, #16
 8003552:	647b      	str	r3, [r7, #68]	; 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800355c:	61ba      	str	r2, [r7, #24]
 800355e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6979      	ldr	r1, [r7, #20]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	613b      	str	r3, [r7, #16]
   return(result);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800357e:	bf00      	nop
 8003580:	3754      	adds	r7, #84	; 0x54
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff ff3d 	bl	8003424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b21      	cmp	r3, #33	; 0x21
 80035c4:	d13e      	bne.n	8003644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ce:	d114      	bne.n	80035fa <UART_Transmit_IT+0x48>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d110      	bne.n	80035fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	1c9a      	adds	r2, r3, #2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	621a      	str	r2, [r3, #32]
 80035f8:	e008      	b.n	800360c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	1c59      	adds	r1, r3, #1
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6211      	str	r1, [r2, #32]
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29b      	uxth	r3, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4619      	mov	r1, r3
 800361a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10f      	bne.n	8003640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800362e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fecc 	bl	8003410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08c      	sub	sp, #48	; 0x30
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b22      	cmp	r3, #34	; 0x22
 8003694:	f040 80ab 	bne.w	80037ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a0:	d117      	bne.n	80036d2 <UART_Receive_IT+0x50>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d113      	bne.n	80036d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	1c9a      	adds	r2, r3, #2
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
 80036d0:	e026      	b.n	8003720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e4:	d007      	beq.n	80036f6 <UART_Receive_IT+0x74>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <UART_Receive_IT+0x82>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e008      	b.n	8003716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003710:	b2da      	uxtb	r2, r3
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29b      	uxth	r3, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4619      	mov	r1, r3
 800372e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003730:	2b00      	cmp	r3, #0
 8003732:	d15a      	bne.n	80037ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0220 	bic.w	r2, r2, #32
 8003742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	d135      	bne.n	80037e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	613b      	str	r3, [r7, #16]
   return(result);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f023 0310 	bic.w	r3, r3, #16
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379a:	623a      	str	r2, [r7, #32]
 800379c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	69f9      	ldr	r1, [r7, #28]
 80037a0:	6a3a      	ldr	r2, [r7, #32]
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e5      	bne.n	800377a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d10a      	bne.n	80037d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fe2d 	bl	8003438 <HAL_UARTEx_RxEventCallback>
 80037de:	e002      	b.n	80037e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fe f839 	bl	8001858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e002      	b.n	80037f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3730      	adds	r7, #48	; 0x30
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fc:	b09f      	sub	sp, #124	; 0x7c
 80037fe:	af00      	add	r7, sp, #0
 8003800:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	68d9      	ldr	r1, [r3, #12]
 8003810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	ea40 0301 	orr.w	r3, r0, r1
 8003818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	431a      	orrs	r2, r3
 8003824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	431a      	orrs	r2, r3
 800382a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4313      	orrs	r3, r2
 8003830:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800383c:	f021 010c 	bic.w	r1, r1, #12
 8003840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	6999      	ldr	r1, [r3, #24]
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	ea40 0301 	orr.w	r3, r0, r1
 8003860:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4bc5      	ldr	r3, [pc, #788]	; (8003b7c <UART_SetConfig+0x384>)
 8003868:	429a      	cmp	r2, r3
 800386a:	d004      	beq.n	8003876 <UART_SetConfig+0x7e>
 800386c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4bc3      	ldr	r3, [pc, #780]	; (8003b80 <UART_SetConfig+0x388>)
 8003872:	429a      	cmp	r2, r3
 8003874:	d103      	bne.n	800387e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003876:	f7fe fe6d 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 800387a:	6778      	str	r0, [r7, #116]	; 0x74
 800387c:	e002      	b.n	8003884 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800387e:	f7fe fe55 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003882:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	f040 80b6 	bne.w	80039fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003892:	461c      	mov	r4, r3
 8003894:	f04f 0500 	mov.w	r5, #0
 8003898:	4622      	mov	r2, r4
 800389a:	462b      	mov	r3, r5
 800389c:	1891      	adds	r1, r2, r2
 800389e:	6439      	str	r1, [r7, #64]	; 0x40
 80038a0:	415b      	adcs	r3, r3
 80038a2:	647b      	str	r3, [r7, #68]	; 0x44
 80038a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038a8:	1912      	adds	r2, r2, r4
 80038aa:	eb45 0303 	adc.w	r3, r5, r3
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	00d9      	lsls	r1, r3, #3
 80038b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038bc:	00d0      	lsls	r0, r2, #3
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	1911      	adds	r1, r2, r4
 80038c4:	6639      	str	r1, [r7, #96]	; 0x60
 80038c6:	416b      	adcs	r3, r5
 80038c8:	667b      	str	r3, [r7, #100]	; 0x64
 80038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038d8:	415b      	adcs	r3, r3
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038e4:	f7fd f978 	bl	8000bd8 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4ba5      	ldr	r3, [pc, #660]	; (8003b84 <UART_SetConfig+0x38c>)
 80038ee:	fba3 2302 	umull	r2, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	011e      	lsls	r6, r3, #4
 80038f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f8:	461c      	mov	r4, r3
 80038fa:	f04f 0500 	mov.w	r5, #0
 80038fe:	4622      	mov	r2, r4
 8003900:	462b      	mov	r3, r5
 8003902:	1891      	adds	r1, r2, r2
 8003904:	6339      	str	r1, [r7, #48]	; 0x30
 8003906:	415b      	adcs	r3, r3
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800390e:	1912      	adds	r2, r2, r4
 8003910:	eb45 0303 	adc.w	r3, r5, r3
 8003914:	f04f 0000 	mov.w	r0, #0
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	00d9      	lsls	r1, r3, #3
 800391e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003922:	00d0      	lsls	r0, r2, #3
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	1911      	adds	r1, r2, r4
 800392a:	65b9      	str	r1, [r7, #88]	; 0x58
 800392c:	416b      	adcs	r3, r5
 800392e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	461a      	mov	r2, r3
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	1891      	adds	r1, r2, r2
 800393c:	62b9      	str	r1, [r7, #40]	; 0x28
 800393e:	415b      	adcs	r3, r3
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003946:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800394a:	f7fd f945 	bl	8000bd8 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4b8c      	ldr	r3, [pc, #560]	; (8003b84 <UART_SetConfig+0x38c>)
 8003954:	fba3 1302 	umull	r1, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2164      	movs	r1, #100	; 0x64
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	3332      	adds	r3, #50	; 0x32
 8003966:	4a87      	ldr	r2, [pc, #540]	; (8003b84 <UART_SetConfig+0x38c>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003974:	441e      	add	r6, r3
 8003976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003978:	4618      	mov	r0, r3
 800397a:	f04f 0100 	mov.w	r1, #0
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	1894      	adds	r4, r2, r2
 8003984:	623c      	str	r4, [r7, #32]
 8003986:	415b      	adcs	r3, r3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800398e:	1812      	adds	r2, r2, r0
 8003990:	eb41 0303 	adc.w	r3, r1, r3
 8003994:	f04f 0400 	mov.w	r4, #0
 8003998:	f04f 0500 	mov.w	r5, #0
 800399c:	00dd      	lsls	r5, r3, #3
 800399e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039a2:	00d4      	lsls	r4, r2, #3
 80039a4:	4622      	mov	r2, r4
 80039a6:	462b      	mov	r3, r5
 80039a8:	1814      	adds	r4, r2, r0
 80039aa:	653c      	str	r4, [r7, #80]	; 0x50
 80039ac:	414b      	adcs	r3, r1
 80039ae:	657b      	str	r3, [r7, #84]	; 0x54
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	1891      	adds	r1, r2, r2
 80039bc:	61b9      	str	r1, [r7, #24]
 80039be:	415b      	adcs	r3, r3
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80039ca:	f7fd f905 	bl	8000bd8 <__aeabi_uldivmod>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4b6c      	ldr	r3, [pc, #432]	; (8003b84 <UART_SetConfig+0x38c>)
 80039d4:	fba3 1302 	umull	r1, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	2164      	movs	r1, #100	; 0x64
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	3332      	adds	r3, #50	; 0x32
 80039e6:	4a67      	ldr	r2, [pc, #412]	; (8003b84 <UART_SetConfig+0x38c>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	f003 0207 	and.w	r2, r3, #7
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4432      	add	r2, r6
 80039f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039fa:	e0b9      	b.n	8003b70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fe:	461c      	mov	r4, r3
 8003a00:	f04f 0500 	mov.w	r5, #0
 8003a04:	4622      	mov	r2, r4
 8003a06:	462b      	mov	r3, r5
 8003a08:	1891      	adds	r1, r2, r2
 8003a0a:	6139      	str	r1, [r7, #16]
 8003a0c:	415b      	adcs	r3, r3
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a14:	1912      	adds	r2, r2, r4
 8003a16:	eb45 0303 	adc.w	r3, r5, r3
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	00d9      	lsls	r1, r3, #3
 8003a24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a28:	00d0      	lsls	r0, r2, #3
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	eb12 0804 	adds.w	r8, r2, r4
 8003a32:	eb43 0905 	adc.w	r9, r3, r5
 8003a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	008b      	lsls	r3, r1, #2
 8003a4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a4e:	0082      	lsls	r2, r0, #2
 8003a50:	4640      	mov	r0, r8
 8003a52:	4649      	mov	r1, r9
 8003a54:	f7fd f8c0 	bl	8000bd8 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <UART_SetConfig+0x38c>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011e      	lsls	r6, r3, #4
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	1894      	adds	r4, r2, r2
 8003a74:	60bc      	str	r4, [r7, #8]
 8003a76:	415b      	adcs	r3, r3
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a7e:	1812      	adds	r2, r2, r0
 8003a80:	eb41 0303 	adc.w	r3, r1, r3
 8003a84:	f04f 0400 	mov.w	r4, #0
 8003a88:	f04f 0500 	mov.w	r5, #0
 8003a8c:	00dd      	lsls	r5, r3, #3
 8003a8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a92:	00d4      	lsls	r4, r2, #3
 8003a94:	4622      	mov	r2, r4
 8003a96:	462b      	mov	r3, r5
 8003a98:	1814      	adds	r4, r2, r0
 8003a9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a9c:	414b      	adcs	r3, r1
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	008b      	lsls	r3, r1, #2
 8003ab4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ab8:	0082      	lsls	r2, r0, #2
 8003aba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003abe:	f7fd f88b 	bl	8000bd8 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <UART_SetConfig+0x38c>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2164      	movs	r1, #100	; 0x64
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	3332      	adds	r3, #50	; 0x32
 8003ada:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <UART_SetConfig+0x38c>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae6:	441e      	add	r6, r3
 8003ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aea:	4618      	mov	r0, r3
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	1894      	adds	r4, r2, r2
 8003af6:	603c      	str	r4, [r7, #0]
 8003af8:	415b      	adcs	r3, r3
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b00:	1812      	adds	r2, r2, r0
 8003b02:	eb41 0303 	adc.w	r3, r1, r3
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	f04f 0500 	mov.w	r5, #0
 8003b0e:	00dd      	lsls	r5, r3, #3
 8003b10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b14:	00d4      	lsls	r4, r2, #3
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	eb12 0a00 	adds.w	sl, r2, r0
 8003b1e:	eb43 0b01 	adc.w	fp, r3, r1
 8003b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	008b      	lsls	r3, r1, #2
 8003b36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b3a:	0082      	lsls	r2, r0, #2
 8003b3c:	4650      	mov	r0, sl
 8003b3e:	4659      	mov	r1, fp
 8003b40:	f7fd f84a 	bl	8000bd8 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <UART_SetConfig+0x38c>)
 8003b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2164      	movs	r1, #100	; 0x64
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	3332      	adds	r3, #50	; 0x32
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <UART_SetConfig+0x38c>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 020f 	and.w	r2, r3, #15
 8003b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4432      	add	r2, r6
 8003b6e:	609a      	str	r2, [r3, #8]
}
 8003b70:	bf00      	nop
 8003b72:	377c      	adds	r7, #124	; 0x7c
 8003b74:	46bd      	mov	sp, r7
 8003b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40011000 	.word	0x40011000
 8003b80:	40011400 	.word	0x40011400
 8003b84:	51eb851f 	.word	0x51eb851f

08003b88 <__errno>:
 8003b88:	4b01      	ldr	r3, [pc, #4]	; (8003b90 <__errno+0x8>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000010 	.word	0x20000010

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	4d0d      	ldr	r5, [pc, #52]	; (8003bcc <__libc_init_array+0x38>)
 8003b98:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <__libc_init_array+0x3c>)
 8003b9a:	1b64      	subs	r4, r4, r5
 8003b9c:	10a4      	asrs	r4, r4, #2
 8003b9e:	2600      	movs	r6, #0
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	4d0b      	ldr	r5, [pc, #44]	; (8003bd4 <__libc_init_array+0x40>)
 8003ba6:	4c0c      	ldr	r4, [pc, #48]	; (8003bd8 <__libc_init_array+0x44>)
 8003ba8:	f000 fea2 	bl	80048f0 <_init>
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	0800496c 	.word	0x0800496c
 8003bd0:	0800496c 	.word	0x0800496c
 8003bd4:	0800496c 	.word	0x0800496c
 8003bd8:	08004970 	.word	0x08004970

08003bdc <memset>:
 8003bdc:	4402      	add	r2, r0
 8003bde:	4603      	mov	r3, r0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d100      	bne.n	8003be6 <memset+0xa>
 8003be4:	4770      	bx	lr
 8003be6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bea:	e7f9      	b.n	8003be0 <memset+0x4>

08003bec <siprintf>:
 8003bec:	b40e      	push	{r1, r2, r3}
 8003bee:	b500      	push	{lr}
 8003bf0:	b09c      	sub	sp, #112	; 0x70
 8003bf2:	ab1d      	add	r3, sp, #116	; 0x74
 8003bf4:	9002      	str	r0, [sp, #8]
 8003bf6:	9006      	str	r0, [sp, #24]
 8003bf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bfc:	4809      	ldr	r0, [pc, #36]	; (8003c24 <siprintf+0x38>)
 8003bfe:	9107      	str	r1, [sp, #28]
 8003c00:	9104      	str	r1, [sp, #16]
 8003c02:	4909      	ldr	r1, [pc, #36]	; (8003c28 <siprintf+0x3c>)
 8003c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c08:	9105      	str	r1, [sp, #20]
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	a902      	add	r1, sp, #8
 8003c10:	f000 f868 	bl	8003ce4 <_svfiprintf_r>
 8003c14:	9b02      	ldr	r3, [sp, #8]
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	b01c      	add	sp, #112	; 0x70
 8003c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c20:	b003      	add	sp, #12
 8003c22:	4770      	bx	lr
 8003c24:	20000010 	.word	0x20000010
 8003c28:	ffff0208 	.word	0xffff0208

08003c2c <__ssputs_r>:
 8003c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c30:	688e      	ldr	r6, [r1, #8]
 8003c32:	429e      	cmp	r6, r3
 8003c34:	4682      	mov	sl, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	4690      	mov	r8, r2
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	d838      	bhi.n	8003cb0 <__ssputs_r+0x84>
 8003c3e:	898a      	ldrh	r2, [r1, #12]
 8003c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c44:	d032      	beq.n	8003cac <__ssputs_r+0x80>
 8003c46:	6825      	ldr	r5, [r4, #0]
 8003c48:	6909      	ldr	r1, [r1, #16]
 8003c4a:	eba5 0901 	sub.w	r9, r5, r1
 8003c4e:	6965      	ldr	r5, [r4, #20]
 8003c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c58:	3301      	adds	r3, #1
 8003c5a:	444b      	add	r3, r9
 8003c5c:	106d      	asrs	r5, r5, #1
 8003c5e:	429d      	cmp	r5, r3
 8003c60:	bf38      	it	cc
 8003c62:	461d      	movcc	r5, r3
 8003c64:	0553      	lsls	r3, r2, #21
 8003c66:	d531      	bpl.n	8003ccc <__ssputs_r+0xa0>
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f000 fb47 	bl	80042fc <_malloc_r>
 8003c6e:	4606      	mov	r6, r0
 8003c70:	b950      	cbnz	r0, 8003c88 <__ssputs_r+0x5c>
 8003c72:	230c      	movs	r3, #12
 8003c74:	f8ca 3000 	str.w	r3, [sl]
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c88:	6921      	ldr	r1, [r4, #16]
 8003c8a:	464a      	mov	r2, r9
 8003c8c:	f000 fabe 	bl	800420c <memcpy>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	6126      	str	r6, [r4, #16]
 8003c9e:	6165      	str	r5, [r4, #20]
 8003ca0:	444e      	add	r6, r9
 8003ca2:	eba5 0509 	sub.w	r5, r5, r9
 8003ca6:	6026      	str	r6, [r4, #0]
 8003ca8:	60a5      	str	r5, [r4, #8]
 8003caa:	463e      	mov	r6, r7
 8003cac:	42be      	cmp	r6, r7
 8003cae:	d900      	bls.n	8003cb2 <__ssputs_r+0x86>
 8003cb0:	463e      	mov	r6, r7
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	f000 fab6 	bl	8004228 <memmove>
 8003cbc:	68a3      	ldr	r3, [r4, #8]
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	1b9b      	subs	r3, r3, r6
 8003cc2:	4432      	add	r2, r6
 8003cc4:	60a3      	str	r3, [r4, #8]
 8003cc6:	6022      	str	r2, [r4, #0]
 8003cc8:	2000      	movs	r0, #0
 8003cca:	e7db      	b.n	8003c84 <__ssputs_r+0x58>
 8003ccc:	462a      	mov	r2, r5
 8003cce:	f000 fb6f 	bl	80043b0 <_realloc_r>
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d1e1      	bne.n	8003c9c <__ssputs_r+0x70>
 8003cd8:	6921      	ldr	r1, [r4, #16]
 8003cda:	4650      	mov	r0, sl
 8003cdc:	f000 fabe 	bl	800425c <_free_r>
 8003ce0:	e7c7      	b.n	8003c72 <__ssputs_r+0x46>
	...

08003ce4 <_svfiprintf_r>:
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	4698      	mov	r8, r3
 8003cea:	898b      	ldrh	r3, [r1, #12]
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	b09d      	sub	sp, #116	; 0x74
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	d50e      	bpl.n	8003d16 <_svfiprintf_r+0x32>
 8003cf8:	690b      	ldr	r3, [r1, #16]
 8003cfa:	b963      	cbnz	r3, 8003d16 <_svfiprintf_r+0x32>
 8003cfc:	2140      	movs	r1, #64	; 0x40
 8003cfe:	f000 fafd 	bl	80042fc <_malloc_r>
 8003d02:	6028      	str	r0, [r5, #0]
 8003d04:	6128      	str	r0, [r5, #16]
 8003d06:	b920      	cbnz	r0, 8003d12 <_svfiprintf_r+0x2e>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e0d1      	b.n	8003eb6 <_svfiprintf_r+0x1d2>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	616b      	str	r3, [r5, #20]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d24:	2330      	movs	r3, #48	; 0x30
 8003d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ed0 <_svfiprintf_r+0x1ec>
 8003d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d2e:	f04f 0901 	mov.w	r9, #1
 8003d32:	4623      	mov	r3, r4
 8003d34:	469a      	mov	sl, r3
 8003d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d3a:	b10a      	cbz	r2, 8003d40 <_svfiprintf_r+0x5c>
 8003d3c:	2a25      	cmp	r2, #37	; 0x25
 8003d3e:	d1f9      	bne.n	8003d34 <_svfiprintf_r+0x50>
 8003d40:	ebba 0b04 	subs.w	fp, sl, r4
 8003d44:	d00b      	beq.n	8003d5e <_svfiprintf_r+0x7a>
 8003d46:	465b      	mov	r3, fp
 8003d48:	4622      	mov	r2, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f7ff ff6d 	bl	8003c2c <__ssputs_r>
 8003d52:	3001      	adds	r0, #1
 8003d54:	f000 80aa 	beq.w	8003eac <_svfiprintf_r+0x1c8>
 8003d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d5a:	445a      	add	r2, fp
 8003d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80a2 	beq.w	8003eac <_svfiprintf_r+0x1c8>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d72:	f10a 0a01 	add.w	sl, sl, #1
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	9307      	str	r3, [sp, #28]
 8003d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d80:	4654      	mov	r4, sl
 8003d82:	2205      	movs	r2, #5
 8003d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d88:	4851      	ldr	r0, [pc, #324]	; (8003ed0 <_svfiprintf_r+0x1ec>)
 8003d8a:	f7fc fa41 	bl	8000210 <memchr>
 8003d8e:	9a04      	ldr	r2, [sp, #16]
 8003d90:	b9d8      	cbnz	r0, 8003dca <_svfiprintf_r+0xe6>
 8003d92:	06d0      	lsls	r0, r2, #27
 8003d94:	bf44      	itt	mi
 8003d96:	2320      	movmi	r3, #32
 8003d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d9c:	0711      	lsls	r1, r2, #28
 8003d9e:	bf44      	itt	mi
 8003da0:	232b      	movmi	r3, #43	; 0x2b
 8003da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da6:	f89a 3000 	ldrb.w	r3, [sl]
 8003daa:	2b2a      	cmp	r3, #42	; 0x2a
 8003dac:	d015      	beq.n	8003dda <_svfiprintf_r+0xf6>
 8003dae:	9a07      	ldr	r2, [sp, #28]
 8003db0:	4654      	mov	r4, sl
 8003db2:	2000      	movs	r0, #0
 8003db4:	f04f 0c0a 	mov.w	ip, #10
 8003db8:	4621      	mov	r1, r4
 8003dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dbe:	3b30      	subs	r3, #48	; 0x30
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d94e      	bls.n	8003e62 <_svfiprintf_r+0x17e>
 8003dc4:	b1b0      	cbz	r0, 8003df4 <_svfiprintf_r+0x110>
 8003dc6:	9207      	str	r2, [sp, #28]
 8003dc8:	e014      	b.n	8003df4 <_svfiprintf_r+0x110>
 8003dca:	eba0 0308 	sub.w	r3, r0, r8
 8003dce:	fa09 f303 	lsl.w	r3, r9, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	46a2      	mov	sl, r4
 8003dd8:	e7d2      	b.n	8003d80 <_svfiprintf_r+0x9c>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	9103      	str	r1, [sp, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfbb      	ittet	lt
 8003de6:	425b      	neglt	r3, r3
 8003de8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dec:	9307      	strge	r3, [sp, #28]
 8003dee:	9307      	strlt	r3, [sp, #28]
 8003df0:	bfb8      	it	lt
 8003df2:	9204      	strlt	r2, [sp, #16]
 8003df4:	7823      	ldrb	r3, [r4, #0]
 8003df6:	2b2e      	cmp	r3, #46	; 0x2e
 8003df8:	d10c      	bne.n	8003e14 <_svfiprintf_r+0x130>
 8003dfa:	7863      	ldrb	r3, [r4, #1]
 8003dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dfe:	d135      	bne.n	8003e6c <_svfiprintf_r+0x188>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	1d1a      	adds	r2, r3, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	9203      	str	r2, [sp, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bfb8      	it	lt
 8003e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e10:	3402      	adds	r4, #2
 8003e12:	9305      	str	r3, [sp, #20]
 8003e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ee0 <_svfiprintf_r+0x1fc>
 8003e18:	7821      	ldrb	r1, [r4, #0]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	4650      	mov	r0, sl
 8003e1e:	f7fc f9f7 	bl	8000210 <memchr>
 8003e22:	b140      	cbz	r0, 8003e36 <_svfiprintf_r+0x152>
 8003e24:	2340      	movs	r3, #64	; 0x40
 8003e26:	eba0 000a 	sub.w	r0, r0, sl
 8003e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	4303      	orrs	r3, r0
 8003e32:	3401      	adds	r4, #1
 8003e34:	9304      	str	r3, [sp, #16]
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	4826      	ldr	r0, [pc, #152]	; (8003ed4 <_svfiprintf_r+0x1f0>)
 8003e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e40:	2206      	movs	r2, #6
 8003e42:	f7fc f9e5 	bl	8000210 <memchr>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d038      	beq.n	8003ebc <_svfiprintf_r+0x1d8>
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <_svfiprintf_r+0x1f4>)
 8003e4c:	bb1b      	cbnz	r3, 8003e96 <_svfiprintf_r+0x1b2>
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	3307      	adds	r3, #7
 8003e52:	f023 0307 	bic.w	r3, r3, #7
 8003e56:	3308      	adds	r3, #8
 8003e58:	9303      	str	r3, [sp, #12]
 8003e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5c:	4433      	add	r3, r6
 8003e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e60:	e767      	b.n	8003d32 <_svfiprintf_r+0x4e>
 8003e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e66:	460c      	mov	r4, r1
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7a5      	b.n	8003db8 <_svfiprintf_r+0xd4>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	3401      	adds	r4, #1
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	4619      	mov	r1, r3
 8003e74:	f04f 0c0a 	mov.w	ip, #10
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e7e:	3a30      	subs	r2, #48	; 0x30
 8003e80:	2a09      	cmp	r2, #9
 8003e82:	d903      	bls.n	8003e8c <_svfiprintf_r+0x1a8>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0c5      	beq.n	8003e14 <_svfiprintf_r+0x130>
 8003e88:	9105      	str	r1, [sp, #20]
 8003e8a:	e7c3      	b.n	8003e14 <_svfiprintf_r+0x130>
 8003e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e90:	4604      	mov	r4, r0
 8003e92:	2301      	movs	r3, #1
 8003e94:	e7f0      	b.n	8003e78 <_svfiprintf_r+0x194>
 8003e96:	ab03      	add	r3, sp, #12
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f3af 8000 	nop.w
 8003ea6:	1c42      	adds	r2, r0, #1
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	d1d6      	bne.n	8003e5a <_svfiprintf_r+0x176>
 8003eac:	89ab      	ldrh	r3, [r5, #12]
 8003eae:	065b      	lsls	r3, r3, #25
 8003eb0:	f53f af2c 	bmi.w	8003d0c <_svfiprintf_r+0x28>
 8003eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eb6:	b01d      	add	sp, #116	; 0x74
 8003eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ebc:	ab03      	add	r3, sp, #12
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003ec4:	a904      	add	r1, sp, #16
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	f000 f87a 	bl	8003fc0 <_printf_i>
 8003ecc:	e7eb      	b.n	8003ea6 <_svfiprintf_r+0x1c2>
 8003ece:	bf00      	nop
 8003ed0:	08004930 	.word	0x08004930
 8003ed4:	0800493a 	.word	0x0800493a
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c2d 	.word	0x08003c2d
 8003ee0:	08004936 	.word	0x08004936

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4699      	mov	r9, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bfb8      	it	lt
 8003ef8:	4613      	movlt	r3, r2
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f00:	4607      	mov	r7, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc26      	bgt.n	8003f7a <_printf_common+0x96>
 8003f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f30:	1e13      	subs	r3, r2, #0
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d42b      	bmi.n	8003f94 <_printf_common+0xb0>
 8003f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f40:	4649      	mov	r1, r9
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c0      	blx	r8
 8003f46:	3001      	adds	r0, #1
 8003f48:	d01e      	beq.n	8003f88 <_printf_common+0xa4>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	68e5      	ldr	r5, [r4, #12]
 8003f4e:	6832      	ldr	r2, [r6, #0]
 8003f50:	f003 0306 	and.w	r3, r3, #6
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	bf08      	it	eq
 8003f58:	1aad      	subeq	r5, r5, r2
 8003f5a:	68a3      	ldr	r3, [r4, #8]
 8003f5c:	6922      	ldr	r2, [r4, #16]
 8003f5e:	bf0c      	ite	eq
 8003f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f64:	2500      	movne	r5, #0
 8003f66:	4293      	cmp	r3, r2
 8003f68:	bfc4      	itt	gt
 8003f6a:	1a9b      	subgt	r3, r3, r2
 8003f6c:	18ed      	addgt	r5, r5, r3
 8003f6e:	2600      	movs	r6, #0
 8003f70:	341a      	adds	r4, #26
 8003f72:	42b5      	cmp	r5, r6
 8003f74:	d11a      	bne.n	8003fac <_printf_common+0xc8>
 8003f76:	2000      	movs	r0, #0
 8003f78:	e008      	b.n	8003f8c <_printf_common+0xa8>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4638      	mov	r0, r7
 8003f82:	47c0      	blx	r8
 8003f84:	3001      	adds	r0, #1
 8003f86:	d103      	bne.n	8003f90 <_printf_common+0xac>
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f90:	3501      	adds	r5, #1
 8003f92:	e7c6      	b.n	8003f22 <_printf_common+0x3e>
 8003f94:	18e1      	adds	r1, r4, r3
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f9e:	4422      	add	r2, r4
 8003fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fa8:	3302      	adds	r3, #2
 8003faa:	e7c7      	b.n	8003f3c <_printf_common+0x58>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4622      	mov	r2, r4
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47c0      	blx	r8
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d0e6      	beq.n	8003f88 <_printf_common+0xa4>
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7d9      	b.n	8003f72 <_printf_common+0x8e>
	...

08003fc0 <_printf_i>:
 8003fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	7e27      	ldrb	r7, [r4, #24]
 8003fca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4680      	mov	r8, r0
 8003fd0:	469a      	mov	sl, r3
 8003fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fd6:	d807      	bhi.n	8003fe8 <_printf_i+0x28>
 8003fd8:	2f62      	cmp	r7, #98	; 0x62
 8003fda:	d80a      	bhi.n	8003ff2 <_printf_i+0x32>
 8003fdc:	2f00      	cmp	r7, #0
 8003fde:	f000 80d8 	beq.w	8004192 <_printf_i+0x1d2>
 8003fe2:	2f58      	cmp	r7, #88	; 0x58
 8003fe4:	f000 80a3 	beq.w	800412e <_printf_i+0x16e>
 8003fe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff0:	e03a      	b.n	8004068 <_printf_i+0xa8>
 8003ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ff6:	2b15      	cmp	r3, #21
 8003ff8:	d8f6      	bhi.n	8003fe8 <_printf_i+0x28>
 8003ffa:	a001      	add	r0, pc, #4	; (adr r0, 8004000 <_printf_i+0x40>)
 8003ffc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004000:	08004059 	.word	0x08004059
 8004004:	0800406d 	.word	0x0800406d
 8004008:	08003fe9 	.word	0x08003fe9
 800400c:	08003fe9 	.word	0x08003fe9
 8004010:	08003fe9 	.word	0x08003fe9
 8004014:	08003fe9 	.word	0x08003fe9
 8004018:	0800406d 	.word	0x0800406d
 800401c:	08003fe9 	.word	0x08003fe9
 8004020:	08003fe9 	.word	0x08003fe9
 8004024:	08003fe9 	.word	0x08003fe9
 8004028:	08003fe9 	.word	0x08003fe9
 800402c:	08004179 	.word	0x08004179
 8004030:	0800409d 	.word	0x0800409d
 8004034:	0800415b 	.word	0x0800415b
 8004038:	08003fe9 	.word	0x08003fe9
 800403c:	08003fe9 	.word	0x08003fe9
 8004040:	0800419b 	.word	0x0800419b
 8004044:	08003fe9 	.word	0x08003fe9
 8004048:	0800409d 	.word	0x0800409d
 800404c:	08003fe9 	.word	0x08003fe9
 8004050:	08003fe9 	.word	0x08003fe9
 8004054:	08004163 	.word	0x08004163
 8004058:	680b      	ldr	r3, [r1, #0]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	600a      	str	r2, [r1, #0]
 8004060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004068:	2301      	movs	r3, #1
 800406a:	e0a3      	b.n	80041b4 <_printf_i+0x1f4>
 800406c:	6825      	ldr	r5, [r4, #0]
 800406e:	6808      	ldr	r0, [r1, #0]
 8004070:	062e      	lsls	r6, r5, #24
 8004072:	f100 0304 	add.w	r3, r0, #4
 8004076:	d50a      	bpl.n	800408e <_printf_i+0xce>
 8004078:	6805      	ldr	r5, [r0, #0]
 800407a:	600b      	str	r3, [r1, #0]
 800407c:	2d00      	cmp	r5, #0
 800407e:	da03      	bge.n	8004088 <_printf_i+0xc8>
 8004080:	232d      	movs	r3, #45	; 0x2d
 8004082:	426d      	negs	r5, r5
 8004084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004088:	485e      	ldr	r0, [pc, #376]	; (8004204 <_printf_i+0x244>)
 800408a:	230a      	movs	r3, #10
 800408c:	e019      	b.n	80040c2 <_printf_i+0x102>
 800408e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004092:	6805      	ldr	r5, [r0, #0]
 8004094:	600b      	str	r3, [r1, #0]
 8004096:	bf18      	it	ne
 8004098:	b22d      	sxthne	r5, r5
 800409a:	e7ef      	b.n	800407c <_printf_i+0xbc>
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	6825      	ldr	r5, [r4, #0]
 80040a0:	1d18      	adds	r0, r3, #4
 80040a2:	6008      	str	r0, [r1, #0]
 80040a4:	0628      	lsls	r0, r5, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xec>
 80040a8:	681d      	ldr	r5, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <_printf_i+0xf2>
 80040ac:	0669      	lsls	r1, r5, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xe8>
 80040b0:	881d      	ldrh	r5, [r3, #0]
 80040b2:	4854      	ldr	r0, [pc, #336]	; (8004204 <_printf_i+0x244>)
 80040b4:	2f6f      	cmp	r7, #111	; 0x6f
 80040b6:	bf0c      	ite	eq
 80040b8:	2308      	moveq	r3, #8
 80040ba:	230a      	movne	r3, #10
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c2:	6866      	ldr	r6, [r4, #4]
 80040c4:	60a6      	str	r6, [r4, #8]
 80040c6:	2e00      	cmp	r6, #0
 80040c8:	bfa2      	ittt	ge
 80040ca:	6821      	ldrge	r1, [r4, #0]
 80040cc:	f021 0104 	bicge.w	r1, r1, #4
 80040d0:	6021      	strge	r1, [r4, #0]
 80040d2:	b90d      	cbnz	r5, 80040d8 <_printf_i+0x118>
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	d04d      	beq.n	8004174 <_printf_i+0x1b4>
 80040d8:	4616      	mov	r6, r2
 80040da:	fbb5 f1f3 	udiv	r1, r5, r3
 80040de:	fb03 5711 	mls	r7, r3, r1, r5
 80040e2:	5dc7      	ldrb	r7, [r0, r7]
 80040e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040e8:	462f      	mov	r7, r5
 80040ea:	42bb      	cmp	r3, r7
 80040ec:	460d      	mov	r5, r1
 80040ee:	d9f4      	bls.n	80040da <_printf_i+0x11a>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d10b      	bne.n	800410c <_printf_i+0x14c>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	07df      	lsls	r7, r3, #31
 80040f8:	d508      	bpl.n	800410c <_printf_i+0x14c>
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	6861      	ldr	r1, [r4, #4]
 80040fe:	4299      	cmp	r1, r3
 8004100:	bfde      	ittt	le
 8004102:	2330      	movle	r3, #48	; 0x30
 8004104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800410c:	1b92      	subs	r2, r2, r6
 800410e:	6122      	str	r2, [r4, #16]
 8004110:	f8cd a000 	str.w	sl, [sp]
 8004114:	464b      	mov	r3, r9
 8004116:	aa03      	add	r2, sp, #12
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff fee2 	bl	8003ee4 <_printf_common>
 8004120:	3001      	adds	r0, #1
 8004122:	d14c      	bne.n	80041be <_printf_i+0x1fe>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	b004      	add	sp, #16
 800412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412e:	4835      	ldr	r0, [pc, #212]	; (8004204 <_printf_i+0x244>)
 8004130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	680e      	ldr	r6, [r1, #0]
 8004138:	061f      	lsls	r7, r3, #24
 800413a:	f856 5b04 	ldr.w	r5, [r6], #4
 800413e:	600e      	str	r6, [r1, #0]
 8004140:	d514      	bpl.n	800416c <_printf_i+0x1ac>
 8004142:	07d9      	lsls	r1, r3, #31
 8004144:	bf44      	itt	mi
 8004146:	f043 0320 	orrmi.w	r3, r3, #32
 800414a:	6023      	strmi	r3, [r4, #0]
 800414c:	b91d      	cbnz	r5, 8004156 <_printf_i+0x196>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	f023 0320 	bic.w	r3, r3, #32
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	2310      	movs	r3, #16
 8004158:	e7b0      	b.n	80040bc <_printf_i+0xfc>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f043 0320 	orr.w	r3, r3, #32
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	2378      	movs	r3, #120	; 0x78
 8004164:	4828      	ldr	r0, [pc, #160]	; (8004208 <_printf_i+0x248>)
 8004166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800416a:	e7e3      	b.n	8004134 <_printf_i+0x174>
 800416c:	065e      	lsls	r6, r3, #25
 800416e:	bf48      	it	mi
 8004170:	b2ad      	uxthmi	r5, r5
 8004172:	e7e6      	b.n	8004142 <_printf_i+0x182>
 8004174:	4616      	mov	r6, r2
 8004176:	e7bb      	b.n	80040f0 <_printf_i+0x130>
 8004178:	680b      	ldr	r3, [r1, #0]
 800417a:	6826      	ldr	r6, [r4, #0]
 800417c:	6960      	ldr	r0, [r4, #20]
 800417e:	1d1d      	adds	r5, r3, #4
 8004180:	600d      	str	r5, [r1, #0]
 8004182:	0635      	lsls	r5, r6, #24
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	d501      	bpl.n	800418c <_printf_i+0x1cc>
 8004188:	6018      	str	r0, [r3, #0]
 800418a:	e002      	b.n	8004192 <_printf_i+0x1d2>
 800418c:	0671      	lsls	r1, r6, #25
 800418e:	d5fb      	bpl.n	8004188 <_printf_i+0x1c8>
 8004190:	8018      	strh	r0, [r3, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	4616      	mov	r6, r2
 8004198:	e7ba      	b.n	8004110 <_printf_i+0x150>
 800419a:	680b      	ldr	r3, [r1, #0]
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	600a      	str	r2, [r1, #0]
 80041a0:	681e      	ldr	r6, [r3, #0]
 80041a2:	6862      	ldr	r2, [r4, #4]
 80041a4:	2100      	movs	r1, #0
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7fc f832 	bl	8000210 <memchr>
 80041ac:	b108      	cbz	r0, 80041b2 <_printf_i+0x1f2>
 80041ae:	1b80      	subs	r0, r0, r6
 80041b0:	6060      	str	r0, [r4, #4]
 80041b2:	6863      	ldr	r3, [r4, #4]
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	2300      	movs	r3, #0
 80041b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041bc:	e7a8      	b.n	8004110 <_printf_i+0x150>
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	4632      	mov	r2, r6
 80041c2:	4649      	mov	r1, r9
 80041c4:	4640      	mov	r0, r8
 80041c6:	47d0      	blx	sl
 80041c8:	3001      	adds	r0, #1
 80041ca:	d0ab      	beq.n	8004124 <_printf_i+0x164>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	079b      	lsls	r3, r3, #30
 80041d0:	d413      	bmi.n	80041fa <_printf_i+0x23a>
 80041d2:	68e0      	ldr	r0, [r4, #12]
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	4298      	cmp	r0, r3
 80041d8:	bfb8      	it	lt
 80041da:	4618      	movlt	r0, r3
 80041dc:	e7a4      	b.n	8004128 <_printf_i+0x168>
 80041de:	2301      	movs	r3, #1
 80041e0:	4632      	mov	r2, r6
 80041e2:	4649      	mov	r1, r9
 80041e4:	4640      	mov	r0, r8
 80041e6:	47d0      	blx	sl
 80041e8:	3001      	adds	r0, #1
 80041ea:	d09b      	beq.n	8004124 <_printf_i+0x164>
 80041ec:	3501      	adds	r5, #1
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	9903      	ldr	r1, [sp, #12]
 80041f2:	1a5b      	subs	r3, r3, r1
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dcf2      	bgt.n	80041de <_printf_i+0x21e>
 80041f8:	e7eb      	b.n	80041d2 <_printf_i+0x212>
 80041fa:	2500      	movs	r5, #0
 80041fc:	f104 0619 	add.w	r6, r4, #25
 8004200:	e7f5      	b.n	80041ee <_printf_i+0x22e>
 8004202:	bf00      	nop
 8004204:	08004941 	.word	0x08004941
 8004208:	08004952 	.word	0x08004952

0800420c <memcpy>:
 800420c:	440a      	add	r2, r1
 800420e:	4291      	cmp	r1, r2
 8004210:	f100 33ff 	add.w	r3, r0, #4294967295
 8004214:	d100      	bne.n	8004218 <memcpy+0xc>
 8004216:	4770      	bx	lr
 8004218:	b510      	push	{r4, lr}
 800421a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800421e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004222:	4291      	cmp	r1, r2
 8004224:	d1f9      	bne.n	800421a <memcpy+0xe>
 8004226:	bd10      	pop	{r4, pc}

08004228 <memmove>:
 8004228:	4288      	cmp	r0, r1
 800422a:	b510      	push	{r4, lr}
 800422c:	eb01 0402 	add.w	r4, r1, r2
 8004230:	d902      	bls.n	8004238 <memmove+0x10>
 8004232:	4284      	cmp	r4, r0
 8004234:	4623      	mov	r3, r4
 8004236:	d807      	bhi.n	8004248 <memmove+0x20>
 8004238:	1e43      	subs	r3, r0, #1
 800423a:	42a1      	cmp	r1, r4
 800423c:	d008      	beq.n	8004250 <memmove+0x28>
 800423e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004246:	e7f8      	b.n	800423a <memmove+0x12>
 8004248:	4402      	add	r2, r0
 800424a:	4601      	mov	r1, r0
 800424c:	428a      	cmp	r2, r1
 800424e:	d100      	bne.n	8004252 <memmove+0x2a>
 8004250:	bd10      	pop	{r4, pc}
 8004252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800425a:	e7f7      	b.n	800424c <memmove+0x24>

0800425c <_free_r>:
 800425c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800425e:	2900      	cmp	r1, #0
 8004260:	d048      	beq.n	80042f4 <_free_r+0x98>
 8004262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004266:	9001      	str	r0, [sp, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f1a1 0404 	sub.w	r4, r1, #4
 800426e:	bfb8      	it	lt
 8004270:	18e4      	addlt	r4, r4, r3
 8004272:	f000 f8d3 	bl	800441c <__malloc_lock>
 8004276:	4a20      	ldr	r2, [pc, #128]	; (80042f8 <_free_r+0x9c>)
 8004278:	9801      	ldr	r0, [sp, #4]
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	4615      	mov	r5, r2
 800427e:	b933      	cbnz	r3, 800428e <_free_r+0x32>
 8004280:	6063      	str	r3, [r4, #4]
 8004282:	6014      	str	r4, [r2, #0]
 8004284:	b003      	add	sp, #12
 8004286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800428a:	f000 b8cd 	b.w	8004428 <__malloc_unlock>
 800428e:	42a3      	cmp	r3, r4
 8004290:	d90b      	bls.n	80042aa <_free_r+0x4e>
 8004292:	6821      	ldr	r1, [r4, #0]
 8004294:	1862      	adds	r2, r4, r1
 8004296:	4293      	cmp	r3, r2
 8004298:	bf04      	itt	eq
 800429a:	681a      	ldreq	r2, [r3, #0]
 800429c:	685b      	ldreq	r3, [r3, #4]
 800429e:	6063      	str	r3, [r4, #4]
 80042a0:	bf04      	itt	eq
 80042a2:	1852      	addeq	r2, r2, r1
 80042a4:	6022      	streq	r2, [r4, #0]
 80042a6:	602c      	str	r4, [r5, #0]
 80042a8:	e7ec      	b.n	8004284 <_free_r+0x28>
 80042aa:	461a      	mov	r2, r3
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b10b      	cbz	r3, 80042b4 <_free_r+0x58>
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	d9fa      	bls.n	80042aa <_free_r+0x4e>
 80042b4:	6811      	ldr	r1, [r2, #0]
 80042b6:	1855      	adds	r5, r2, r1
 80042b8:	42a5      	cmp	r5, r4
 80042ba:	d10b      	bne.n	80042d4 <_free_r+0x78>
 80042bc:	6824      	ldr	r4, [r4, #0]
 80042be:	4421      	add	r1, r4
 80042c0:	1854      	adds	r4, r2, r1
 80042c2:	42a3      	cmp	r3, r4
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	d1dd      	bne.n	8004284 <_free_r+0x28>
 80042c8:	681c      	ldr	r4, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	6053      	str	r3, [r2, #4]
 80042ce:	4421      	add	r1, r4
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	e7d7      	b.n	8004284 <_free_r+0x28>
 80042d4:	d902      	bls.n	80042dc <_free_r+0x80>
 80042d6:	230c      	movs	r3, #12
 80042d8:	6003      	str	r3, [r0, #0]
 80042da:	e7d3      	b.n	8004284 <_free_r+0x28>
 80042dc:	6825      	ldr	r5, [r4, #0]
 80042de:	1961      	adds	r1, r4, r5
 80042e0:	428b      	cmp	r3, r1
 80042e2:	bf04      	itt	eq
 80042e4:	6819      	ldreq	r1, [r3, #0]
 80042e6:	685b      	ldreq	r3, [r3, #4]
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	bf04      	itt	eq
 80042ec:	1949      	addeq	r1, r1, r5
 80042ee:	6021      	streq	r1, [r4, #0]
 80042f0:	6054      	str	r4, [r2, #4]
 80042f2:	e7c7      	b.n	8004284 <_free_r+0x28>
 80042f4:	b003      	add	sp, #12
 80042f6:	bd30      	pop	{r4, r5, pc}
 80042f8:	20000098 	.word	0x20000098

080042fc <_malloc_r>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	1ccd      	adds	r5, r1, #3
 8004300:	f025 0503 	bic.w	r5, r5, #3
 8004304:	3508      	adds	r5, #8
 8004306:	2d0c      	cmp	r5, #12
 8004308:	bf38      	it	cc
 800430a:	250c      	movcc	r5, #12
 800430c:	2d00      	cmp	r5, #0
 800430e:	4606      	mov	r6, r0
 8004310:	db01      	blt.n	8004316 <_malloc_r+0x1a>
 8004312:	42a9      	cmp	r1, r5
 8004314:	d903      	bls.n	800431e <_malloc_r+0x22>
 8004316:	230c      	movs	r3, #12
 8004318:	6033      	str	r3, [r6, #0]
 800431a:	2000      	movs	r0, #0
 800431c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800431e:	f000 f87d 	bl	800441c <__malloc_lock>
 8004322:	4921      	ldr	r1, [pc, #132]	; (80043a8 <_malloc_r+0xac>)
 8004324:	680a      	ldr	r2, [r1, #0]
 8004326:	4614      	mov	r4, r2
 8004328:	b99c      	cbnz	r4, 8004352 <_malloc_r+0x56>
 800432a:	4f20      	ldr	r7, [pc, #128]	; (80043ac <_malloc_r+0xb0>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b923      	cbnz	r3, 800433a <_malloc_r+0x3e>
 8004330:	4621      	mov	r1, r4
 8004332:	4630      	mov	r0, r6
 8004334:	f000 f862 	bl	80043fc <_sbrk_r>
 8004338:	6038      	str	r0, [r7, #0]
 800433a:	4629      	mov	r1, r5
 800433c:	4630      	mov	r0, r6
 800433e:	f000 f85d 	bl	80043fc <_sbrk_r>
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	d123      	bne.n	800438e <_malloc_r+0x92>
 8004346:	230c      	movs	r3, #12
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	4630      	mov	r0, r6
 800434c:	f000 f86c 	bl	8004428 <__malloc_unlock>
 8004350:	e7e3      	b.n	800431a <_malloc_r+0x1e>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	1b5b      	subs	r3, r3, r5
 8004356:	d417      	bmi.n	8004388 <_malloc_r+0x8c>
 8004358:	2b0b      	cmp	r3, #11
 800435a:	d903      	bls.n	8004364 <_malloc_r+0x68>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	441c      	add	r4, r3
 8004360:	6025      	str	r5, [r4, #0]
 8004362:	e004      	b.n	800436e <_malloc_r+0x72>
 8004364:	6863      	ldr	r3, [r4, #4]
 8004366:	42a2      	cmp	r2, r4
 8004368:	bf0c      	ite	eq
 800436a:	600b      	streq	r3, [r1, #0]
 800436c:	6053      	strne	r3, [r2, #4]
 800436e:	4630      	mov	r0, r6
 8004370:	f000 f85a 	bl	8004428 <__malloc_unlock>
 8004374:	f104 000b 	add.w	r0, r4, #11
 8004378:	1d23      	adds	r3, r4, #4
 800437a:	f020 0007 	bic.w	r0, r0, #7
 800437e:	1ac2      	subs	r2, r0, r3
 8004380:	d0cc      	beq.n	800431c <_malloc_r+0x20>
 8004382:	1a1b      	subs	r3, r3, r0
 8004384:	50a3      	str	r3, [r4, r2]
 8004386:	e7c9      	b.n	800431c <_malloc_r+0x20>
 8004388:	4622      	mov	r2, r4
 800438a:	6864      	ldr	r4, [r4, #4]
 800438c:	e7cc      	b.n	8004328 <_malloc_r+0x2c>
 800438e:	1cc4      	adds	r4, r0, #3
 8004390:	f024 0403 	bic.w	r4, r4, #3
 8004394:	42a0      	cmp	r0, r4
 8004396:	d0e3      	beq.n	8004360 <_malloc_r+0x64>
 8004398:	1a21      	subs	r1, r4, r0
 800439a:	4630      	mov	r0, r6
 800439c:	f000 f82e 	bl	80043fc <_sbrk_r>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d1dd      	bne.n	8004360 <_malloc_r+0x64>
 80043a4:	e7cf      	b.n	8004346 <_malloc_r+0x4a>
 80043a6:	bf00      	nop
 80043a8:	20000098 	.word	0x20000098
 80043ac:	2000009c 	.word	0x2000009c

080043b0 <_realloc_r>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	4607      	mov	r7, r0
 80043b4:	4614      	mov	r4, r2
 80043b6:	460e      	mov	r6, r1
 80043b8:	b921      	cbnz	r1, 80043c4 <_realloc_r+0x14>
 80043ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043be:	4611      	mov	r1, r2
 80043c0:	f7ff bf9c 	b.w	80042fc <_malloc_r>
 80043c4:	b922      	cbnz	r2, 80043d0 <_realloc_r+0x20>
 80043c6:	f7ff ff49 	bl	800425c <_free_r>
 80043ca:	4625      	mov	r5, r4
 80043cc:	4628      	mov	r0, r5
 80043ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d0:	f000 f830 	bl	8004434 <_malloc_usable_size_r>
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d20f      	bcs.n	80043f8 <_realloc_r+0x48>
 80043d8:	4621      	mov	r1, r4
 80043da:	4638      	mov	r0, r7
 80043dc:	f7ff ff8e 	bl	80042fc <_malloc_r>
 80043e0:	4605      	mov	r5, r0
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d0f2      	beq.n	80043cc <_realloc_r+0x1c>
 80043e6:	4631      	mov	r1, r6
 80043e8:	4622      	mov	r2, r4
 80043ea:	f7ff ff0f 	bl	800420c <memcpy>
 80043ee:	4631      	mov	r1, r6
 80043f0:	4638      	mov	r0, r7
 80043f2:	f7ff ff33 	bl	800425c <_free_r>
 80043f6:	e7e9      	b.n	80043cc <_realloc_r+0x1c>
 80043f8:	4635      	mov	r5, r6
 80043fa:	e7e7      	b.n	80043cc <_realloc_r+0x1c>

080043fc <_sbrk_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4d06      	ldr	r5, [pc, #24]	; (8004418 <_sbrk_r+0x1c>)
 8004400:	2300      	movs	r3, #0
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	f7fd fb44 	bl	8001a94 <_sbrk>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_sbrk_r+0x1a>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_sbrk_r+0x1a>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	20000100 	.word	0x20000100

0800441c <__malloc_lock>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__malloc_lock+0x8>)
 800441e:	f000 b811 	b.w	8004444 <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	20000108 	.word	0x20000108

08004428 <__malloc_unlock>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__malloc_unlock+0x8>)
 800442a:	f000 b80c 	b.w	8004446 <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	20000108 	.word	0x20000108

08004434 <_malloc_usable_size_r>:
 8004434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004438:	1f18      	subs	r0, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfbc      	itt	lt
 800443e:	580b      	ldrlt	r3, [r1, r0]
 8004440:	18c0      	addlt	r0, r0, r3
 8004442:	4770      	bx	lr

08004444 <__retarget_lock_acquire_recursive>:
 8004444:	4770      	bx	lr

08004446 <__retarget_lock_release_recursive>:
 8004446:	4770      	bx	lr

08004448 <round>:
 8004448:	ec51 0b10 	vmov	r0, r1, d0
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8004452:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8004456:	2c13      	cmp	r4, #19
 8004458:	ee10 2a10 	vmov	r2, s0
 800445c:	460b      	mov	r3, r1
 800445e:	dc19      	bgt.n	8004494 <round+0x4c>
 8004460:	2c00      	cmp	r4, #0
 8004462:	da09      	bge.n	8004478 <round+0x30>
 8004464:	3401      	adds	r4, #1
 8004466:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800446a:	d103      	bne.n	8004474 <round+0x2c>
 800446c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004470:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004474:	2100      	movs	r1, #0
 8004476:	e028      	b.n	80044ca <round+0x82>
 8004478:	4d15      	ldr	r5, [pc, #84]	; (80044d0 <round+0x88>)
 800447a:	4125      	asrs	r5, r4
 800447c:	ea01 0605 	and.w	r6, r1, r5
 8004480:	4332      	orrs	r2, r6
 8004482:	d00e      	beq.n	80044a2 <round+0x5a>
 8004484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004488:	fa42 f404 	asr.w	r4, r2, r4
 800448c:	4423      	add	r3, r4
 800448e:	ea23 0305 	bic.w	r3, r3, r5
 8004492:	e7ef      	b.n	8004474 <round+0x2c>
 8004494:	2c33      	cmp	r4, #51	; 0x33
 8004496:	dd07      	ble.n	80044a8 <round+0x60>
 8004498:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800449c:	d101      	bne.n	80044a2 <round+0x5a>
 800449e:	f7fb ff0d 	bl	80002bc <__adddf3>
 80044a2:	ec41 0b10 	vmov	d0, r0, r1
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80044ac:	f04f 35ff 	mov.w	r5, #4294967295
 80044b0:	40f5      	lsrs	r5, r6
 80044b2:	4228      	tst	r0, r5
 80044b4:	d0f5      	beq.n	80044a2 <round+0x5a>
 80044b6:	2101      	movs	r1, #1
 80044b8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80044bc:	fa01 f404 	lsl.w	r4, r1, r4
 80044c0:	1912      	adds	r2, r2, r4
 80044c2:	bf28      	it	cs
 80044c4:	185b      	addcs	r3, r3, r1
 80044c6:	ea22 0105 	bic.w	r1, r2, r5
 80044ca:	4608      	mov	r0, r1
 80044cc:	4619      	mov	r1, r3
 80044ce:	e7e8      	b.n	80044a2 <round+0x5a>
 80044d0:	000fffff 	.word	0x000fffff
 80044d4:	00000000 	.word	0x00000000

080044d8 <log>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	ed2d 8b02 	vpush	{d8}
 80044de:	ec55 4b10 	vmov	r4, r5, d0
 80044e2:	f000 f841 	bl	8004568 <__ieee754_log>
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <log+0x88>)
 80044e8:	eeb0 8a40 	vmov.f32	s16, s0
 80044ec:	eef0 8a60 	vmov.f32	s17, s1
 80044f0:	f993 3000 	ldrsb.w	r3, [r3]
 80044f4:	3301      	adds	r3, #1
 80044f6:	d01a      	beq.n	800452e <log+0x56>
 80044f8:	4622      	mov	r2, r4
 80044fa:	462b      	mov	r3, r5
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fc fb2c 	bl	8000b5c <__aeabi_dcmpun>
 8004504:	b998      	cbnz	r0, 800452e <log+0x56>
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f7fc fb1b 	bl	8000b48 <__aeabi_dcmpgt>
 8004512:	b960      	cbnz	r0, 800452e <log+0x56>
 8004514:	2200      	movs	r2, #0
 8004516:	2300      	movs	r3, #0
 8004518:	4620      	mov	r0, r4
 800451a:	4629      	mov	r1, r5
 800451c:	f7fc faec 	bl	8000af8 <__aeabi_dcmpeq>
 8004520:	b160      	cbz	r0, 800453c <log+0x64>
 8004522:	f7ff fb31 	bl	8003b88 <__errno>
 8004526:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8004558 <log+0x80>
 800452a:	2322      	movs	r3, #34	; 0x22
 800452c:	6003      	str	r3, [r0, #0]
 800452e:	eeb0 0a48 	vmov.f32	s0, s16
 8004532:	eef0 0a68 	vmov.f32	s1, s17
 8004536:	ecbd 8b02 	vpop	{d8}
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	f7ff fb24 	bl	8003b88 <__errno>
 8004540:	ecbd 8b02 	vpop	{d8}
 8004544:	2321      	movs	r3, #33	; 0x21
 8004546:	6003      	str	r3, [r0, #0]
 8004548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800454c:	4805      	ldr	r0, [pc, #20]	; (8004564 <log+0x8c>)
 800454e:	f000 b9c7 	b.w	80048e0 <nan>
 8004552:	bf00      	nop
 8004554:	f3af 8000 	nop.w
 8004558:	00000000 	.word	0x00000000
 800455c:	fff00000 	.word	0xfff00000
 8004560:	20000074 	.word	0x20000074
 8004564:	08004935 	.word	0x08004935

08004568 <__ieee754_log>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	ec51 0b10 	vmov	r0, r1, d0
 8004570:	ed2d 8b04 	vpush	{d8-d9}
 8004574:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004578:	b083      	sub	sp, #12
 800457a:	460d      	mov	r5, r1
 800457c:	da29      	bge.n	80045d2 <__ieee754_log+0x6a>
 800457e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004582:	4303      	orrs	r3, r0
 8004584:	ee10 2a10 	vmov	r2, s0
 8004588:	d10c      	bne.n	80045a4 <__ieee754_log+0x3c>
 800458a:	49cf      	ldr	r1, [pc, #828]	; (80048c8 <__ieee754_log+0x360>)
 800458c:	2200      	movs	r2, #0
 800458e:	2300      	movs	r3, #0
 8004590:	2000      	movs	r0, #0
 8004592:	f7fc f973 	bl	800087c <__aeabi_ddiv>
 8004596:	ec41 0b10 	vmov	d0, r0, r1
 800459a:	b003      	add	sp, #12
 800459c:	ecbd 8b04 	vpop	{d8-d9}
 80045a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a4:	2900      	cmp	r1, #0
 80045a6:	da05      	bge.n	80045b4 <__ieee754_log+0x4c>
 80045a8:	460b      	mov	r3, r1
 80045aa:	f7fb fe85 	bl	80002b8 <__aeabi_dsub>
 80045ae:	2200      	movs	r2, #0
 80045b0:	2300      	movs	r3, #0
 80045b2:	e7ee      	b.n	8004592 <__ieee754_log+0x2a>
 80045b4:	4bc5      	ldr	r3, [pc, #788]	; (80048cc <__ieee754_log+0x364>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	f7fc f836 	bl	8000628 <__aeabi_dmul>
 80045bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80045c0:	460d      	mov	r5, r1
 80045c2:	4ac3      	ldr	r2, [pc, #780]	; (80048d0 <__ieee754_log+0x368>)
 80045c4:	4295      	cmp	r5, r2
 80045c6:	dd06      	ble.n	80045d6 <__ieee754_log+0x6e>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	f7fb fe76 	bl	80002bc <__adddf3>
 80045d0:	e7e1      	b.n	8004596 <__ieee754_log+0x2e>
 80045d2:	2300      	movs	r3, #0
 80045d4:	e7f5      	b.n	80045c2 <__ieee754_log+0x5a>
 80045d6:	152c      	asrs	r4, r5, #20
 80045d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80045dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80045e0:	441c      	add	r4, r3
 80045e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80045e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80045ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80045f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80045f6:	ea42 0105 	orr.w	r1, r2, r5
 80045fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80045fe:	2200      	movs	r2, #0
 8004600:	4bb4      	ldr	r3, [pc, #720]	; (80048d4 <__ieee754_log+0x36c>)
 8004602:	f7fb fe59 	bl	80002b8 <__aeabi_dsub>
 8004606:	1cab      	adds	r3, r5, #2
 8004608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460c:	2b02      	cmp	r3, #2
 800460e:	4682      	mov	sl, r0
 8004610:	468b      	mov	fp, r1
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	dc53      	bgt.n	80046c0 <__ieee754_log+0x158>
 8004618:	2300      	movs	r3, #0
 800461a:	f7fc fa6d 	bl	8000af8 <__aeabi_dcmpeq>
 800461e:	b1d0      	cbz	r0, 8004656 <__ieee754_log+0xee>
 8004620:	2c00      	cmp	r4, #0
 8004622:	f000 8122 	beq.w	800486a <__ieee754_log+0x302>
 8004626:	4620      	mov	r0, r4
 8004628:	f7fb ff94 	bl	8000554 <__aeabi_i2d>
 800462c:	a390      	add	r3, pc, #576	; (adr r3, 8004870 <__ieee754_log+0x308>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	4606      	mov	r6, r0
 8004634:	460f      	mov	r7, r1
 8004636:	f7fb fff7 	bl	8000628 <__aeabi_dmul>
 800463a:	a38f      	add	r3, pc, #572	; (adr r3, 8004878 <__ieee754_log+0x310>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	4604      	mov	r4, r0
 8004642:	460d      	mov	r5, r1
 8004644:	4630      	mov	r0, r6
 8004646:	4639      	mov	r1, r7
 8004648:	f7fb ffee 	bl	8000628 <__aeabi_dmul>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	e7ba      	b.n	80045cc <__ieee754_log+0x64>
 8004656:	a38a      	add	r3, pc, #552	; (adr r3, 8004880 <__ieee754_log+0x318>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	4650      	mov	r0, sl
 800465e:	4659      	mov	r1, fp
 8004660:	f7fb ffe2 	bl	8000628 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	2000      	movs	r0, #0
 800466a:	499b      	ldr	r1, [pc, #620]	; (80048d8 <__ieee754_log+0x370>)
 800466c:	f7fb fe24 	bl	80002b8 <__aeabi_dsub>
 8004670:	4652      	mov	r2, sl
 8004672:	4606      	mov	r6, r0
 8004674:	460f      	mov	r7, r1
 8004676:	465b      	mov	r3, fp
 8004678:	4650      	mov	r0, sl
 800467a:	4659      	mov	r1, fp
 800467c:	f7fb ffd4 	bl	8000628 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4630      	mov	r0, r6
 8004686:	4639      	mov	r1, r7
 8004688:	f7fb ffce 	bl	8000628 <__aeabi_dmul>
 800468c:	4606      	mov	r6, r0
 800468e:	460f      	mov	r7, r1
 8004690:	b914      	cbnz	r4, 8004698 <__ieee754_log+0x130>
 8004692:	4632      	mov	r2, r6
 8004694:	463b      	mov	r3, r7
 8004696:	e0a2      	b.n	80047de <__ieee754_log+0x276>
 8004698:	4620      	mov	r0, r4
 800469a:	f7fb ff5b 	bl	8000554 <__aeabi_i2d>
 800469e:	a374      	add	r3, pc, #464	; (adr r3, 8004870 <__ieee754_log+0x308>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	4680      	mov	r8, r0
 80046a6:	4689      	mov	r9, r1
 80046a8:	f7fb ffbe 	bl	8000628 <__aeabi_dmul>
 80046ac:	a372      	add	r3, pc, #456	; (adr r3, 8004878 <__ieee754_log+0x310>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	4604      	mov	r4, r0
 80046b4:	460d      	mov	r5, r1
 80046b6:	4640      	mov	r0, r8
 80046b8:	4649      	mov	r1, r9
 80046ba:	f7fb ffb5 	bl	8000628 <__aeabi_dmul>
 80046be:	e0a7      	b.n	8004810 <__ieee754_log+0x2a8>
 80046c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046c4:	f7fb fdfa 	bl	80002bc <__adddf3>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4650      	mov	r0, sl
 80046ce:	4659      	mov	r1, fp
 80046d0:	f7fc f8d4 	bl	800087c <__aeabi_ddiv>
 80046d4:	ec41 0b18 	vmov	d8, r0, r1
 80046d8:	4620      	mov	r0, r4
 80046da:	f7fb ff3b 	bl	8000554 <__aeabi_i2d>
 80046de:	ec53 2b18 	vmov	r2, r3, d8
 80046e2:	ec41 0b19 	vmov	d9, r0, r1
 80046e6:	ec51 0b18 	vmov	r0, r1, d8
 80046ea:	f7fb ff9d 	bl	8000628 <__aeabi_dmul>
 80046ee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80046f2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4680      	mov	r8, r0
 80046fe:	4689      	mov	r9, r1
 8004700:	f7fb ff92 	bl	8000628 <__aeabi_dmul>
 8004704:	a360      	add	r3, pc, #384	; (adr r3, 8004888 <__ieee754_log+0x320>)
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	4606      	mov	r6, r0
 800470c:	460f      	mov	r7, r1
 800470e:	f7fb ff8b 	bl	8000628 <__aeabi_dmul>
 8004712:	a35f      	add	r3, pc, #380	; (adr r3, 8004890 <__ieee754_log+0x328>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f7fb fdd0 	bl	80002bc <__adddf3>
 800471c:	4632      	mov	r2, r6
 800471e:	463b      	mov	r3, r7
 8004720:	f7fb ff82 	bl	8000628 <__aeabi_dmul>
 8004724:	a35c      	add	r3, pc, #368	; (adr r3, 8004898 <__ieee754_log+0x330>)
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f7fb fdc7 	bl	80002bc <__adddf3>
 800472e:	4632      	mov	r2, r6
 8004730:	463b      	mov	r3, r7
 8004732:	f7fb ff79 	bl	8000628 <__aeabi_dmul>
 8004736:	a35a      	add	r3, pc, #360	; (adr r3, 80048a0 <__ieee754_log+0x338>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb fdbe 	bl	80002bc <__adddf3>
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	f7fb ff70 	bl	8000628 <__aeabi_dmul>
 8004748:	a357      	add	r3, pc, #348	; (adr r3, 80048a8 <__ieee754_log+0x340>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	4680      	mov	r8, r0
 8004750:	4689      	mov	r9, r1
 8004752:	4630      	mov	r0, r6
 8004754:	4639      	mov	r1, r7
 8004756:	f7fb ff67 	bl	8000628 <__aeabi_dmul>
 800475a:	a355      	add	r3, pc, #340	; (adr r3, 80048b0 <__ieee754_log+0x348>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb fdac 	bl	80002bc <__adddf3>
 8004764:	4632      	mov	r2, r6
 8004766:	463b      	mov	r3, r7
 8004768:	f7fb ff5e 	bl	8000628 <__aeabi_dmul>
 800476c:	a352      	add	r3, pc, #328	; (adr r3, 80048b8 <__ieee754_log+0x350>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb fda3 	bl	80002bc <__adddf3>
 8004776:	4632      	mov	r2, r6
 8004778:	463b      	mov	r3, r7
 800477a:	f7fb ff55 	bl	8000628 <__aeabi_dmul>
 800477e:	460b      	mov	r3, r1
 8004780:	4602      	mov	r2, r0
 8004782:	4649      	mov	r1, r9
 8004784:	4640      	mov	r0, r8
 8004786:	f7fb fd99 	bl	80002bc <__adddf3>
 800478a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800478e:	9b01      	ldr	r3, [sp, #4]
 8004790:	3551      	adds	r5, #81	; 0x51
 8004792:	431d      	orrs	r5, r3
 8004794:	2d00      	cmp	r5, #0
 8004796:	4680      	mov	r8, r0
 8004798:	4689      	mov	r9, r1
 800479a:	dd48      	ble.n	800482e <__ieee754_log+0x2c6>
 800479c:	4b4e      	ldr	r3, [pc, #312]	; (80048d8 <__ieee754_log+0x370>)
 800479e:	2200      	movs	r2, #0
 80047a0:	4650      	mov	r0, sl
 80047a2:	4659      	mov	r1, fp
 80047a4:	f7fb ff40 	bl	8000628 <__aeabi_dmul>
 80047a8:	4652      	mov	r2, sl
 80047aa:	465b      	mov	r3, fp
 80047ac:	f7fb ff3c 	bl	8000628 <__aeabi_dmul>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4640      	mov	r0, r8
 80047ba:	4649      	mov	r1, r9
 80047bc:	f7fb fd7e 	bl	80002bc <__adddf3>
 80047c0:	ec53 2b18 	vmov	r2, r3, d8
 80047c4:	f7fb ff30 	bl	8000628 <__aeabi_dmul>
 80047c8:	4680      	mov	r8, r0
 80047ca:	4689      	mov	r9, r1
 80047cc:	b964      	cbnz	r4, 80047e8 <__ieee754_log+0x280>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4630      	mov	r0, r6
 80047d4:	4639      	mov	r1, r7
 80047d6:	f7fb fd6f 	bl	80002b8 <__aeabi_dsub>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4650      	mov	r0, sl
 80047e0:	4659      	mov	r1, fp
 80047e2:	f7fb fd69 	bl	80002b8 <__aeabi_dsub>
 80047e6:	e6d6      	b.n	8004596 <__ieee754_log+0x2e>
 80047e8:	a321      	add	r3, pc, #132	; (adr r3, 8004870 <__ieee754_log+0x308>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	ec51 0b19 	vmov	r0, r1, d9
 80047f2:	f7fb ff19 	bl	8000628 <__aeabi_dmul>
 80047f6:	a320      	add	r3, pc, #128	; (adr r3, 8004878 <__ieee754_log+0x310>)
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	4604      	mov	r4, r0
 80047fe:	460d      	mov	r5, r1
 8004800:	ec51 0b19 	vmov	r0, r1, d9
 8004804:	f7fb ff10 	bl	8000628 <__aeabi_dmul>
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	f7fb fd56 	bl	80002bc <__adddf3>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4630      	mov	r0, r6
 8004816:	4639      	mov	r1, r7
 8004818:	f7fb fd4e 	bl	80002b8 <__aeabi_dsub>
 800481c:	4652      	mov	r2, sl
 800481e:	465b      	mov	r3, fp
 8004820:	f7fb fd4a 	bl	80002b8 <__aeabi_dsub>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	e7d9      	b.n	80047e2 <__ieee754_log+0x27a>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4650      	mov	r0, sl
 8004834:	4659      	mov	r1, fp
 8004836:	f7fb fd3f 	bl	80002b8 <__aeabi_dsub>
 800483a:	ec53 2b18 	vmov	r2, r3, d8
 800483e:	f7fb fef3 	bl	8000628 <__aeabi_dmul>
 8004842:	4606      	mov	r6, r0
 8004844:	460f      	mov	r7, r1
 8004846:	2c00      	cmp	r4, #0
 8004848:	f43f af23 	beq.w	8004692 <__ieee754_log+0x12a>
 800484c:	a308      	add	r3, pc, #32	; (adr r3, 8004870 <__ieee754_log+0x308>)
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	ec51 0b19 	vmov	r0, r1, d9
 8004856:	f7fb fee7 	bl	8000628 <__aeabi_dmul>
 800485a:	a307      	add	r3, pc, #28	; (adr r3, 8004878 <__ieee754_log+0x310>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	4604      	mov	r4, r0
 8004862:	460d      	mov	r5, r1
 8004864:	ec51 0b19 	vmov	r0, r1, d9
 8004868:	e727      	b.n	80046ba <__ieee754_log+0x152>
 800486a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80048c0 <__ieee754_log+0x358>
 800486e:	e694      	b.n	800459a <__ieee754_log+0x32>
 8004870:	fee00000 	.word	0xfee00000
 8004874:	3fe62e42 	.word	0x3fe62e42
 8004878:	35793c76 	.word	0x35793c76
 800487c:	3dea39ef 	.word	0x3dea39ef
 8004880:	55555555 	.word	0x55555555
 8004884:	3fd55555 	.word	0x3fd55555
 8004888:	df3e5244 	.word	0xdf3e5244
 800488c:	3fc2f112 	.word	0x3fc2f112
 8004890:	96cb03de 	.word	0x96cb03de
 8004894:	3fc74664 	.word	0x3fc74664
 8004898:	94229359 	.word	0x94229359
 800489c:	3fd24924 	.word	0x3fd24924
 80048a0:	55555593 	.word	0x55555593
 80048a4:	3fe55555 	.word	0x3fe55555
 80048a8:	d078c69f 	.word	0xd078c69f
 80048ac:	3fc39a09 	.word	0x3fc39a09
 80048b0:	1d8e78af 	.word	0x1d8e78af
 80048b4:	3fcc71c5 	.word	0x3fcc71c5
 80048b8:	9997fa04 	.word	0x9997fa04
 80048bc:	3fd99999 	.word	0x3fd99999
	...
 80048c8:	c3500000 	.word	0xc3500000
 80048cc:	43500000 	.word	0x43500000
 80048d0:	7fefffff 	.word	0x7fefffff
 80048d4:	3ff00000 	.word	0x3ff00000
 80048d8:	3fe00000 	.word	0x3fe00000
 80048dc:	00000000 	.word	0x00000000

080048e0 <nan>:
 80048e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80048e8 <nan+0x8>
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	00000000 	.word	0x00000000
 80048ec:	7ff80000 	.word	0x7ff80000

080048f0 <_init>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr

080048fc <_fini>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr
