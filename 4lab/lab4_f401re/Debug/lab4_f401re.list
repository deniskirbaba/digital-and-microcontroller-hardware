
lab4_f401re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e70  08005e70  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e78  08005e78  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000090  08005f10  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005f10  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fba7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002002  00000000  00000000  0002fc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00031c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00032950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017352  00000000  00000000  00033578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebd4  00000000  00000000  0004a8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f46a  00000000  00000000  0005949e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fdc  00000000  00000000  000e895c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059cc 	.word	0x080059cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080059cc 	.word	0x080059cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b96e 	b.w	800098c <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468c      	mov	ip, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f040 8083 	bne.w	80007de <__udivmoddi4+0x116>
 80006d8:	428a      	cmp	r2, r1
 80006da:	4617      	mov	r7, r2
 80006dc:	d947      	bls.n	800076e <__udivmoddi4+0xa6>
 80006de:	fab2 f282 	clz	r2, r2
 80006e2:	b142      	cbz	r2, 80006f6 <__udivmoddi4+0x2e>
 80006e4:	f1c2 0020 	rsb	r0, r2, #32
 80006e8:	fa24 f000 	lsr.w	r0, r4, r0
 80006ec:	4091      	lsls	r1, r2
 80006ee:	4097      	lsls	r7, r2
 80006f0:	ea40 0c01 	orr.w	ip, r0, r1
 80006f4:	4094      	lsls	r4, r2
 80006f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006fa:	0c23      	lsrs	r3, r4, #16
 80006fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000700:	fa1f fe87 	uxth.w	lr, r7
 8000704:	fb08 c116 	mls	r1, r8, r6, ip
 8000708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070c:	fb06 f10e 	mul.w	r1, r6, lr
 8000710:	4299      	cmp	r1, r3
 8000712:	d909      	bls.n	8000728 <__udivmoddi4+0x60>
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	f106 30ff 	add.w	r0, r6, #4294967295
 800071a:	f080 8119 	bcs.w	8000950 <__udivmoddi4+0x288>
 800071e:	4299      	cmp	r1, r3
 8000720:	f240 8116 	bls.w	8000950 <__udivmoddi4+0x288>
 8000724:	3e02      	subs	r6, #2
 8000726:	443b      	add	r3, r7
 8000728:	1a5b      	subs	r3, r3, r1
 800072a:	b2a4      	uxth	r4, r4
 800072c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000730:	fb08 3310 	mls	r3, r8, r0, r3
 8000734:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000738:	fb00 fe0e 	mul.w	lr, r0, lr
 800073c:	45a6      	cmp	lr, r4
 800073e:	d909      	bls.n	8000754 <__udivmoddi4+0x8c>
 8000740:	193c      	adds	r4, r7, r4
 8000742:	f100 33ff 	add.w	r3, r0, #4294967295
 8000746:	f080 8105 	bcs.w	8000954 <__udivmoddi4+0x28c>
 800074a:	45a6      	cmp	lr, r4
 800074c:	f240 8102 	bls.w	8000954 <__udivmoddi4+0x28c>
 8000750:	3802      	subs	r0, #2
 8000752:	443c      	add	r4, r7
 8000754:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000758:	eba4 040e 	sub.w	r4, r4, lr
 800075c:	2600      	movs	r6, #0
 800075e:	b11d      	cbz	r5, 8000768 <__udivmoddi4+0xa0>
 8000760:	40d4      	lsrs	r4, r2
 8000762:	2300      	movs	r3, #0
 8000764:	e9c5 4300 	strd	r4, r3, [r5]
 8000768:	4631      	mov	r1, r6
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	b902      	cbnz	r2, 8000772 <__udivmoddi4+0xaa>
 8000770:	deff      	udf	#255	; 0xff
 8000772:	fab2 f282 	clz	r2, r2
 8000776:	2a00      	cmp	r2, #0
 8000778:	d150      	bne.n	800081c <__udivmoddi4+0x154>
 800077a:	1bcb      	subs	r3, r1, r7
 800077c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000780:	fa1f f887 	uxth.w	r8, r7
 8000784:	2601      	movs	r6, #1
 8000786:	fbb3 fcfe 	udiv	ip, r3, lr
 800078a:	0c21      	lsrs	r1, r4, #16
 800078c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000790:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000794:	fb08 f30c 	mul.w	r3, r8, ip
 8000798:	428b      	cmp	r3, r1
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0xe4>
 800079c:	1879      	adds	r1, r7, r1
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0xe2>
 80007a4:	428b      	cmp	r3, r1
 80007a6:	f200 80e9 	bhi.w	800097c <__udivmoddi4+0x2b4>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1ac9      	subs	r1, r1, r3
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x10c>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x10a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80d9 	bhi.w	8000984 <__udivmoddi4+0x2bc>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e7bf      	b.n	800075e <__udivmoddi4+0x96>
 80007de:	428b      	cmp	r3, r1
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0x12e>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	f000 80b1 	beq.w	800094a <__udivmoddi4+0x282>
 80007e8:	2600      	movs	r6, #0
 80007ea:	e9c5 0100 	strd	r0, r1, [r5]
 80007ee:	4630      	mov	r0, r6
 80007f0:	4631      	mov	r1, r6
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	fab3 f683 	clz	r6, r3
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d14a      	bne.n	8000894 <__udivmoddi4+0x1cc>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d302      	bcc.n	8000808 <__udivmoddi4+0x140>
 8000802:	4282      	cmp	r2, r0
 8000804:	f200 80b8 	bhi.w	8000978 <__udivmoddi4+0x2b0>
 8000808:	1a84      	subs	r4, r0, r2
 800080a:	eb61 0103 	sbc.w	r1, r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	468c      	mov	ip, r1
 8000812:	2d00      	cmp	r5, #0
 8000814:	d0a8      	beq.n	8000768 <__udivmoddi4+0xa0>
 8000816:	e9c5 4c00 	strd	r4, ip, [r5]
 800081a:	e7a5      	b.n	8000768 <__udivmoddi4+0xa0>
 800081c:	f1c2 0320 	rsb	r3, r2, #32
 8000820:	fa20 f603 	lsr.w	r6, r0, r3
 8000824:	4097      	lsls	r7, r2
 8000826:	fa01 f002 	lsl.w	r0, r1, r2
 800082a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082e:	40d9      	lsrs	r1, r3
 8000830:	4330      	orrs	r0, r6
 8000832:	0c03      	lsrs	r3, r0, #16
 8000834:	fbb1 f6fe 	udiv	r6, r1, lr
 8000838:	fa1f f887 	uxth.w	r8, r7
 800083c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000844:	fb06 f108 	mul.w	r1, r6, r8
 8000848:	4299      	cmp	r1, r3
 800084a:	fa04 f402 	lsl.w	r4, r4, r2
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x19c>
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	f106 3cff 	add.w	ip, r6, #4294967295
 8000856:	f080 808d 	bcs.w	8000974 <__udivmoddi4+0x2ac>
 800085a:	4299      	cmp	r1, r3
 800085c:	f240 808a 	bls.w	8000974 <__udivmoddi4+0x2ac>
 8000860:	3e02      	subs	r6, #2
 8000862:	443b      	add	r3, r7
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b281      	uxth	r1, r0
 8000868:	fbb3 f0fe 	udiv	r0, r3, lr
 800086c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb00 f308 	mul.w	r3, r0, r8
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0x1c4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000882:	d273      	bcs.n	800096c <__udivmoddi4+0x2a4>
 8000884:	428b      	cmp	r3, r1
 8000886:	d971      	bls.n	800096c <__udivmoddi4+0x2a4>
 8000888:	3802      	subs	r0, #2
 800088a:	4439      	add	r1, r7
 800088c:	1acb      	subs	r3, r1, r3
 800088e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000892:	e778      	b.n	8000786 <__udivmoddi4+0xbe>
 8000894:	f1c6 0c20 	rsb	ip, r6, #32
 8000898:	fa03 f406 	lsl.w	r4, r3, r6
 800089c:	fa22 f30c 	lsr.w	r3, r2, ip
 80008a0:	431c      	orrs	r4, r3
 80008a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008a6:	fa01 f306 	lsl.w	r3, r1, r6
 80008aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80008b2:	431f      	orrs	r7, r3
 80008b4:	0c3b      	lsrs	r3, r7, #16
 80008b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ba:	fa1f f884 	uxth.w	r8, r4
 80008be:	fb0e 1119 	mls	r1, lr, r9, r1
 80008c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008c6:	fb09 fa08 	mul.w	sl, r9, r8
 80008ca:	458a      	cmp	sl, r1
 80008cc:	fa02 f206 	lsl.w	r2, r2, r6
 80008d0:	fa00 f306 	lsl.w	r3, r0, r6
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x220>
 80008d6:	1861      	adds	r1, r4, r1
 80008d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80008dc:	d248      	bcs.n	8000970 <__udivmoddi4+0x2a8>
 80008de:	458a      	cmp	sl, r1
 80008e0:	d946      	bls.n	8000970 <__udivmoddi4+0x2a8>
 80008e2:	f1a9 0902 	sub.w	r9, r9, #2
 80008e6:	4421      	add	r1, r4
 80008e8:	eba1 010a 	sub.w	r1, r1, sl
 80008ec:	b2bf      	uxth	r7, r7
 80008ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008fa:	fb00 f808 	mul.w	r8, r0, r8
 80008fe:	45b8      	cmp	r8, r7
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0x24a>
 8000902:	19e7      	adds	r7, r4, r7
 8000904:	f100 31ff 	add.w	r1, r0, #4294967295
 8000908:	d22e      	bcs.n	8000968 <__udivmoddi4+0x2a0>
 800090a:	45b8      	cmp	r8, r7
 800090c:	d92c      	bls.n	8000968 <__udivmoddi4+0x2a0>
 800090e:	3802      	subs	r0, #2
 8000910:	4427      	add	r7, r4
 8000912:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000916:	eba7 0708 	sub.w	r7, r7, r8
 800091a:	fba0 8902 	umull	r8, r9, r0, r2
 800091e:	454f      	cmp	r7, r9
 8000920:	46c6      	mov	lr, r8
 8000922:	4649      	mov	r1, r9
 8000924:	d31a      	bcc.n	800095c <__udivmoddi4+0x294>
 8000926:	d017      	beq.n	8000958 <__udivmoddi4+0x290>
 8000928:	b15d      	cbz	r5, 8000942 <__udivmoddi4+0x27a>
 800092a:	ebb3 020e 	subs.w	r2, r3, lr
 800092e:	eb67 0701 	sbc.w	r7, r7, r1
 8000932:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000936:	40f2      	lsrs	r2, r6
 8000938:	ea4c 0202 	orr.w	r2, ip, r2
 800093c:	40f7      	lsrs	r7, r6
 800093e:	e9c5 2700 	strd	r2, r7, [r5]
 8000942:	2600      	movs	r6, #0
 8000944:	4631      	mov	r1, r6
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	462e      	mov	r6, r5
 800094c:	4628      	mov	r0, r5
 800094e:	e70b      	b.n	8000768 <__udivmoddi4+0xa0>
 8000950:	4606      	mov	r6, r0
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0x60>
 8000954:	4618      	mov	r0, r3
 8000956:	e6fd      	b.n	8000754 <__udivmoddi4+0x8c>
 8000958:	4543      	cmp	r3, r8
 800095a:	d2e5      	bcs.n	8000928 <__udivmoddi4+0x260>
 800095c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000960:	eb69 0104 	sbc.w	r1, r9, r4
 8000964:	3801      	subs	r0, #1
 8000966:	e7df      	b.n	8000928 <__udivmoddi4+0x260>
 8000968:	4608      	mov	r0, r1
 800096a:	e7d2      	b.n	8000912 <__udivmoddi4+0x24a>
 800096c:	4660      	mov	r0, ip
 800096e:	e78d      	b.n	800088c <__udivmoddi4+0x1c4>
 8000970:	4681      	mov	r9, r0
 8000972:	e7b9      	b.n	80008e8 <__udivmoddi4+0x220>
 8000974:	4666      	mov	r6, ip
 8000976:	e775      	b.n	8000864 <__udivmoddi4+0x19c>
 8000978:	4630      	mov	r0, r6
 800097a:	e74a      	b.n	8000812 <__udivmoddi4+0x14a>
 800097c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000980:	4439      	add	r1, r7
 8000982:	e713      	b.n	80007ac <__udivmoddi4+0xe4>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	e724      	b.n	80007d4 <__udivmoddi4+0x10c>
 800098a:	bf00      	nop

0800098c <__aeabi_idiv0>:
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("%d", sizeof(tx_buffer));
 8000994:	2110      	movs	r1, #16
 8000996:	481d      	ldr	r0, [pc, #116]	; (8000a0c <main+0x7c>)
 8000998:	f003 fb56 	bl	8004048 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 fbcc 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f844 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 f944 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a8:	f000 f91a 	bl	8000be0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009ac:	f000 f8ee 	bl	8000b8c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009b0:	f000 f89c 	bl	8000aec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  t = 0.0;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <main+0x80>)
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <main+0x84>)
 80009be:	f001 ff5d 	bl	800287c <HAL_TIM_Base_Start_IT>
	//bias = rx_buffer.bias;
	//amp = rx_buffer.amp;
	//freq = rx_buffer.freq;
	//phase = rx_buffer.phase;

	tx_buffer.t = t;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <main+0x80>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <main+0x88>)
 80009c8:	6053      	str	r3, [r2, #4]
	tx_buffer.val = bias + amp*sinf(freq*t + phase);
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <main+0x8c>)
 80009cc:	ed93 7a00 	vldr	s14, [r3]
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <main+0x80>)
 80009d2:	edd3 7a00 	vldr	s15, [r3]
 80009d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <main+0x90>)
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e4:	eeb0 0a67 	vmov.f32	s0, s15
 80009e8:	f004 fa84 	bl	8004ef4 <sinf>
 80009ec:	eeb0 7a40 	vmov.f32	s14, s0
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <main+0x94>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <main+0x98>)
 80009fc:	edd3 7a00 	vldr	s15, [r3]
 8000a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <main+0x88>)
 8000a06:	edc3 7a02 	vstr	s15, [r3, #8]
	tx_buffer.t = t;
 8000a0a:	e7da      	b.n	80009c2 <main+0x32>
 8000a0c:	080059e4 	.word	0x080059e4
 8000a10:	200000b8 	.word	0x200000b8
 8000a14:	2000017c 	.word	0x2000017c
 8000a18:	20000010 	.word	0x20000010
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	2000000c 	.word	0x2000000c
 8000a24:	20000004 	.word	0x20000004
 8000a28:	20000000 	.word	0x20000000

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 fafc 	bl	8004038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <SystemClock_Config+0xb8>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <SystemClock_Config+0xb8>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <SystemClock_Config+0xb8>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <SystemClock_Config+0xbc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <SystemClock_Config+0xbc>)
 8000a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <SystemClock_Config+0xbc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0320 	add.w	r3, r7, #32
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fa53 	bl	8001f4c <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000aac:	f000 f906 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fcb6 	bl	800243c <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ad6:	f000 f8f1 	bl	8000cbc <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	463b      	mov	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <MX_TIM1_Init+0x9c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b10:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000b14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b1e:	2209      	movs	r2, #9
 8000b20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b36:	f001 fe51 	bl	80027dc <HAL_TIM_Base_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b40:	f000 f8bc 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b52:	f001 fffd 	bl	8002b50 <HAL_TIM_ConfigClockSource>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b5c:	f000 f8ae 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_TIM1_Init+0x98>)
 8000b6e:	f002 f9f9 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b78:	f000 f8a0 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000017c 	.word	0x2000017c
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART2_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b98:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	f002 fa50 	bl	8003068 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f000 f875 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200001c4 	.word	0x200001c4
 8000bdc:	40004400 	.word	0x40004400

08000be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_DMA_Init+0x4c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <MX_DMA_Init+0x4c>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_DMA_Init+0x4c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2010      	movs	r0, #16
 8000c08:	f000 fbe3 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c0c:	2010      	movs	r0, #16
 8000c0e:	f000 fbfc 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2011      	movs	r0, #17
 8000c18:	f000 fbdb 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f000 fbf4 	bl	800140a <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_GPIO_Init+0x30>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <MX_GPIO_Init+0x30>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_GPIO_Init+0x30>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	00000000 	.word	0x00000000

08000c68 <HAL_TIM_PeriodElapsedCallback>:
//{
//	have_params = 1;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	t += 0.01;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_f2d>
 8000c7a:	a30b      	add	r3, pc, #44	; (adr r3, 8000ca8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	f7ff fb04 	bl	800028c <__adddf3>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f7ff fcb4 	bl	80005f8 <__aeabi_d2f>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c94:	6013      	str	r3, [r2, #0]
	//if (have_params) {
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&tx_buffer, sizeof(tx_buffer));
 8000c96:	2210      	movs	r2, #16
 8000c98:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c9c:	f002 fa32 	bl	8003104 <HAL_UART_Transmit_DMA>
	//}
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	47ae147b 	.word	0x47ae147b
 8000cac:	3f847ae1 	.word	0x3f847ae1
 8000cb0:	200000b8 	.word	0x200000b8
 8000cb4:	20000010 	.word	0x20000010
 8000cb8:	200001c4 	.word	0x200001c4

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_TIM_Base_MspInit+0x48>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d115      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2019      	movs	r0, #25
 8000d4c:	f000 fb41 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d50:	2019      	movs	r0, #25
 8000d52:	f000 fb5a 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40010000 	.word	0x40010000
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a4c      	ldr	r2, [pc, #304]	; (8000eb8 <HAL_UART_MspInit+0x150>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	f040 8091 	bne.w	8000eae <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <HAL_UART_MspInit+0x154>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a49      	ldr	r2, [pc, #292]	; (8000ebc <HAL_UART_MspInit+0x154>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <HAL_UART_MspInit+0x154>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <HAL_UART_MspInit+0x154>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <HAL_UART_MspInit+0x154>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <HAL_UART_MspInit+0x154>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4838      	ldr	r0, [pc, #224]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000de0:	f000 ff30 	bl	8001c44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000de6:	4a38      	ldr	r2, [pc, #224]	; (8000ec8 <HAL_UART_MspInit+0x160>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dea:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000dec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df2:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df8:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e04:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e26:	4827      	ldr	r0, [pc, #156]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e28:	f000 fb0a 	bl	8001440 <HAL_DMA_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e32:	f7ff ff43 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <HAL_UART_MspInit+0x168>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e62:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e82:	4812      	ldr	r0, [pc, #72]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e84:	f000 fadc 	bl	8001440 <HAL_DMA_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000e8e:	f7ff ff15 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2026      	movs	r0, #38	; 0x26
 8000ea4:	f000 fa95 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea8:	2026      	movs	r0, #38	; 0x26
 8000eaa:	f000 faae 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40004400 	.word	0x40004400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	200000bc 	.word	0x200000bc
 8000ec8:	40026088 	.word	0x40026088
 8000ecc:	2000011c 	.word	0x2000011c
 8000ed0:	400260a0 	.word	0x400260a0

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f95c 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA1_Stream5_IRQHandler+0x10>)
 8000f2e:	f000 fc1f 	bl	8001770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000bc 	.word	0x200000bc

08000f3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <DMA1_Stream6_IRQHandler+0x10>)
 8000f42:	f000 fc15 	bl	8001770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000011c 	.word	0x2000011c

08000f50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f56:	f001 fcf3 	bl	8002940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000017c 	.word	0x2000017c

08000f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART2_IRQHandler+0x10>)
 8000f6a:	f002 f949 	bl	8003200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001c4 	.word	0x200001c4

08000f78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e00a      	b.n	8000fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f8a:	f3af 8000 	nop.w
 8000f8e:	4601      	mov	r1, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf0      	blt.n	8000f8a <_read+0x12>
	}

return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x12>
	}
	return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:

int _close(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001012:	605a      	str	r2, [r3, #4]
	return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_isatty>:

int _isatty(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f002 ffae 	bl	8003fe4 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20018000 	.word	0x20018000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	200000ac 	.word	0x200000ac
 80010bc:	20000220 	.word	0x20000220

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001100:	4c0b      	ldr	r4, [pc, #44]	; (8001130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800110e:	f7ff ffd7 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f002 ff6d 	bl	8003ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fc3b 	bl	8000990 <main>
  bx  lr    
 800111a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800111c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001128:	08005e80 	.word	0x08005e80
  ldr r2, =_sbss
 800112c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001130:	2000021c 	.word	0x2000021c

08001134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_Init+0x40>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_Init+0x40>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x40>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f92b 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fdac 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f943 	bl	8001426 <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f90b 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000020 	.word	0x20000020
 80011d4:	20000028 	.word	0x20000028
 80011d8:	20000024 	.word	0x20000024

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000028 	.word	0x20000028
 8001200:	20000208 	.word	0x20000208

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000208 	.word	0x20000208

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff feda 	bl	8001204 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e099      	b.n	8001590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147c:	e00f      	b.n	800149e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800147e:	f7ff fec1 	bl	8001204 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b05      	cmp	r3, #5
 800148a:	d908      	bls.n	800149e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e078      	b.n	8001590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e8      	bne.n	800147e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_DMA_Init+0x158>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d107      	bne.n	8001508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4313      	orrs	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f023 0307 	bic.w	r3, r3, #7
 800151e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4313      	orrs	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	2b04      	cmp	r3, #4
 8001530:	d117      	bne.n	8001562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fb01 	bl	8001b4c <DMA_CheckFifoParam>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800155e:	2301      	movs	r3, #1
 8001560:	e016      	b.n	8001590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fab8 	bl	8001ae0 <DMA_CalcBaseAndBitshift>
 8001570:	4603      	mov	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	223f      	movs	r2, #63	; 0x3f
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	f010803f 	.word	0xf010803f

0800159c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_DMA_Start_IT+0x26>
 80015be:	2302      	movs	r3, #2
 80015c0:	e040      	b.n	8001644 <HAL_DMA_Start_IT+0xa8>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d12f      	bne.n	8001636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2202      	movs	r2, #2
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fa4a 	bl	8001a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	223f      	movs	r2, #63	; 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0216 	orr.w	r2, r2, #22
 800160a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0208 	orr.w	r2, r2, #8
 8001622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e005      	b.n	8001642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001642:	7dfb      	ldrb	r3, [r7, #23]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800165a:	f7ff fdd3 	bl	8001204 <HAL_GetTick>
 800165e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d008      	beq.n	800167e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e052      	b.n	8001724 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0216 	bic.w	r2, r2, #22
 800168c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800169c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <HAL_DMA_Abort+0x62>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0208 	bic.w	r2, r2, #8
 80016bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ce:	e013      	b.n	80016f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d0:	f7ff fd98 	bl	8001204 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d90c      	bls.n	80016f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2220      	movs	r2, #32
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e015      	b.n	8001724 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1e4      	bne.n	80016d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170a:	223f      	movs	r2, #63	; 0x3f
 800170c:	409a      	lsls	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d004      	beq.n	800174a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00c      	b.n	8001764 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2205      	movs	r2, #5
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800177c:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_DMA_IRQHandler+0x258>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a92      	ldr	r2, [pc, #584]	; (80019cc <HAL_DMA_IRQHandler+0x25c>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0a9b      	lsrs	r3, r3, #10
 8001788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2208      	movs	r2, #8
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01a      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	2208      	movs	r2, #8
 80017ca:	409a      	lsls	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d012      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	2201      	movs	r2, #1
 8001800:	409a      	lsls	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	f043 0202 	orr.w	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2204      	movs	r2, #4
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	2204      	movs	r2, #4
 8001836:	409a      	lsls	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	f043 0204 	orr.w	r2, r3, #4
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2210      	movs	r2, #16
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d043      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03c      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2210      	movs	r2, #16
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d018      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d024      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
 800189e:	e01f      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
 80018b0:	e016      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0208 	bic.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	2220      	movs	r2, #32
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 808e 	beq.w	8001a0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8086 	beq.w	8001a0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2220      	movs	r2, #32
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b05      	cmp	r3, #5
 8001918:	d136      	bne.n	8001988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0216 	bic.w	r2, r2, #22
 8001928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <HAL_DMA_IRQHandler+0x1da>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0208 	bic.w	r2, r2, #8
 8001958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	223f      	movs	r2, #63	; 0x3f
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197a:	2b00      	cmp	r3, #0
 800197c:	d07d      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
        }
        return;
 8001986:	e078      	b.n	8001a7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01c      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d108      	bne.n	80019b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d030      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
 80019b4:	e02b      	b.n	8001a0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d027      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
 80019c6:	e022      	b.n	8001a0e <HAL_DMA_IRQHandler+0x29e>
 80019c8:	20000020 	.word	0x20000020
 80019cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0210 	bic.w	r2, r2, #16
 80019ec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d032      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d022      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2205      	movs	r2, #5
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d307      	bcc.n	8001a56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f2      	bne.n	8001a3a <HAL_DMA_IRQHandler+0x2ca>
 8001a54:	e000      	b.n	8001a58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a56:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
 8001a78:	e000      	b.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a7a:	bf00      	nop
    }
  }
}
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop

08001a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b40      	cmp	r3, #64	; 0x40
 8001ab0:	d108      	bne.n	8001ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ac2:	e007      	b.n	8001ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3b10      	subs	r3, #16
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <DMA_CalcBaseAndBitshift+0x64>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <DMA_CalcBaseAndBitshift+0x68>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d909      	bls.n	8001b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b20:	e007      	b.n	8001b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	aaaaaaab 	.word	0xaaaaaaab
 8001b48:	08005a00 	.word	0x08005a00

08001b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11f      	bne.n	8001ba6 <DMA_CheckFifoParam+0x5a>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d856      	bhi.n	8001c1a <DMA_CheckFifoParam+0xce>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <DMA_CheckFifoParam+0x28>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b97 	.word	0x08001b97
 8001b7c:	08001b85 	.word	0x08001b85
 8001b80:	08001c1b 	.word	0x08001c1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d046      	beq.n	8001c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b94:	e043      	b.n	8001c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b9e:	d140      	bne.n	8001c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba4:	e03d      	b.n	8001c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bae:	d121      	bne.n	8001bf4 <DMA_CheckFifoParam+0xa8>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d837      	bhi.n	8001c26 <DMA_CheckFifoParam+0xda>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <DMA_CheckFifoParam+0x70>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd3 	.word	0x08001bd3
 8001bc4:	08001bcd 	.word	0x08001bcd
 8001bc8:	08001be5 	.word	0x08001be5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd0:	e030      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d025      	beq.n	8001c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be2:	e022      	b.n	8001c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bec:	d11f      	bne.n	8001c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bf2:	e01c      	b.n	8001c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d903      	bls.n	8001c02 <DMA_CheckFifoParam+0xb6>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d003      	beq.n	8001c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c00:	e018      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
      break;
 8001c06:	e015      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      break;
 8001c18:	e00b      	b.n	8001c32 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e00a      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e008      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e006      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e004      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e002      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c2e:	bf00      	nop
 8001c30:	e000      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
    }
  } 
  
  return status; 
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e159      	b.n	8001f14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8148 	bne.w	8001f0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a2 	beq.w	8001f0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_GPIO_Init+0x2e8>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a56      	ldr	r2, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x2e8>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HAL_GPIO_Init+0x2e8>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de6:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <HAL_GPIO_Init+0x2ec>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x202>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <HAL_GPIO_Init+0x2f4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x1fe>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a47      	ldr	r2, [pc, #284]	; (8001f3c <HAL_GPIO_Init+0x2f8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x1fa>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a46      	ldr	r2, [pc, #280]	; (8001f40 <HAL_GPIO_Init+0x2fc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x1f6>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <HAL_GPIO_Init+0x300>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x1f2>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x204>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	; (8001f30 <HAL_GPIO_Init+0x2ec>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8a:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f aea2 	bls.w	8001c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e264      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d075      	beq.n	8002056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6a:	4ba3      	ldr	r3, [pc, #652]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d00c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f76:	4ba0      	ldr	r3, [pc, #640]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d112      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f82:	4b9d      	ldr	r3, [pc, #628]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	4b99      	ldr	r3, [pc, #612]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05b      	beq.n	8002054 <HAL_RCC_OscConfig+0x108>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d157      	bne.n	8002054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e23f      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x74>
 8001fb2:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a90      	ldr	r2, [pc, #576]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x98>
 8001fca:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a8a      	ldr	r2, [pc, #552]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a87      	ldr	r2, [pc, #540]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fe4:	4b84      	ldr	r3, [pc, #528]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a83      	ldr	r2, [pc, #524]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a80      	ldr	r2, [pc, #512]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff f8fe 	bl	8001204 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f8fa 	bl	8001204 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e204      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xc0>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff f8ea 	bl	8001204 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f8e6 	bl	8001204 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1f0      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0xe8>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002076:	2b08      	cmp	r3, #8
 8002078:	d11c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x152>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1c4      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4952      	ldr	r1, [pc, #328]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e03a      	b.n	800212a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_RCC_OscConfig+0x2b0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff f89f 	bl	8001204 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ca:	f7ff f89b 	bl	8001204 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1a5      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4940      	ldr	r1, [pc, #256]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x2b0>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f87e 	bl	8001204 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff f87a 	bl	8001204 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e184      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d030      	beq.n	8002198 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_OscConfig+0x2b4>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff f85e 	bl	8001204 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff f85a 	bl	8001204 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e164      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x200>
 800216a:	e015      	b.n	8002198 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_OscConfig+0x2b4>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff f847 	bl	8001204 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217a:	f7ff f843 	bl	8001204 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e14d      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a0 	beq.w	80022e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_OscConfig+0x2b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d121      	bne.n	8002226 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCC_OscConfig+0x2b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_RCC_OscConfig+0x2b8>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7ff f809 	bl	8001204 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e011      	b.n	800221a <HAL_RCC_OscConfig+0x2ce>
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	42470000 	.word	0x42470000
 8002200:	42470e80 	.word	0x42470e80
 8002204:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fffc 	bl	8001204 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e106      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_OscConfig+0x4e4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x2f0>
 800222e:	4b81      	ldr	r3, [pc, #516]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x32a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x312>
 8002244:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a7a      	ldr	r2, [pc, #488]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	4b78      	ldr	r3, [pc, #480]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a77      	ldr	r2, [pc, #476]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x32a>
 800225e:	4b75      	ldr	r3, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a74      	ldr	r2, [pc, #464]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	4b72      	ldr	r3, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a71      	ldr	r2, [pc, #452]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe ffc1 	bl	8001204 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe ffbd 	bl	8001204 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0c5      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ee      	beq.n	8002286 <HAL_RCC_OscConfig+0x33a>
 80022a8:	e014      	b.n	80022d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7fe ffab 	bl	8001204 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe ffa7 	bl	8001204 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0af      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ee      	bne.n	80022b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b56      	ldr	r3, [pc, #344]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a55      	ldr	r2, [pc, #340]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 809b 	beq.w	8002426 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d05c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d141      	bne.n	8002388 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCC_OscConfig+0x4ec>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe ff7b 	bl	8001204 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe ff77 	bl	8001204 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e081      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	019b      	lsls	r3, r3, #6
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	061b      	lsls	r3, r3, #24
 8002354:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_OscConfig+0x4ec>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe ff50 	bl	8001204 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ff4c 	bl	8001204 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e056      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x41c>
 8002386:	e04e      	b.n	8002426 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_RCC_OscConfig+0x4ec>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fe ff39 	bl	8001204 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe ff35 	bl	8001204 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e03f      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x44a>
 80023b4:	e037      	b.n	8002426 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e032      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_RCC_OscConfig+0x4e8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d028      	beq.n	8002422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d121      	bne.n	8002422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d11a      	bne.n	8002422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f2:	4013      	ands	r3, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d111      	bne.n	8002422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40007000 	.word	0x40007000
 8002434:	40023800 	.word	0x40023800
 8002438:	42470060 	.word	0x42470060

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0cc      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d90c      	bls.n	8002478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b8      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002490:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800249a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	494d      	ldr	r1, [pc, #308]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d044      	beq.n	800255c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d119      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fa:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e067      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4934      	ldr	r1, [pc, #208]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800252c:	f7fe fe6a 	bl	8001204 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7fe fe66 	bl	8001204 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e04f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	429a      	cmp	r2, r3
 800255a:	d1eb      	bne.n	8002534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d20c      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4916      	ldr	r1, [pc, #88]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c2:	f000 f821 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	490a      	ldr	r1, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	5ccb      	ldrb	r3, [r1, r3]
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fdca 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	080059e8 	.word	0x080059e8
 8002600:	20000020 	.word	0x20000020
 8002604:	20000024 	.word	0x20000024

08002608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800260e:	2100      	movs	r1, #0
 8002610:	6079      	str	r1, [r7, #4]
 8002612:	2100      	movs	r1, #0
 8002614:	60f9      	str	r1, [r7, #12]
 8002616:	2100      	movs	r1, #0
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800261a:	2100      	movs	r1, #0
 800261c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261e:	4952      	ldr	r1, [pc, #328]	; (8002768 <HAL_RCC_GetSysClockFreq+0x160>)
 8002620:	6889      	ldr	r1, [r1, #8]
 8002622:	f001 010c 	and.w	r1, r1, #12
 8002626:	2908      	cmp	r1, #8
 8002628:	d00d      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x3e>
 800262a:	2908      	cmp	r1, #8
 800262c:	f200 8094 	bhi.w	8002758 <HAL_RCC_GetSysClockFreq+0x150>
 8002630:	2900      	cmp	r1, #0
 8002632:	d002      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x32>
 8002634:	2904      	cmp	r1, #4
 8002636:	d003      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x38>
 8002638:	e08e      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800263a:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_RCC_GetSysClockFreq+0x164>)
 800263c:	60bb      	str	r3, [r7, #8]
       break;
 800263e:	e08e      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002640:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_RCC_GetSysClockFreq+0x168>)
 8002642:	60bb      	str	r3, [r7, #8]
      break;
 8002644:	e08b      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002646:	4948      	ldr	r1, [pc, #288]	; (8002768 <HAL_RCC_GetSysClockFreq+0x160>)
 8002648:	6849      	ldr	r1, [r1, #4]
 800264a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800264e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002650:	4945      	ldr	r1, [pc, #276]	; (8002768 <HAL_RCC_GetSysClockFreq+0x160>)
 8002652:	6849      	ldr	r1, [r1, #4]
 8002654:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002658:	2900      	cmp	r1, #0
 800265a:	d024      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4942      	ldr	r1, [pc, #264]	; (8002768 <HAL_RCC_GetSysClockFreq+0x160>)
 800265e:	6849      	ldr	r1, [r1, #4]
 8002660:	0989      	lsrs	r1, r1, #6
 8002662:	4608      	mov	r0, r1
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	f240 14ff 	movw	r4, #511	; 0x1ff
 800266c:	f04f 0500 	mov.w	r5, #0
 8002670:	ea00 0204 	and.w	r2, r0, r4
 8002674:	ea01 0305 	and.w	r3, r1, r5
 8002678:	493d      	ldr	r1, [pc, #244]	; (8002770 <HAL_RCC_GetSysClockFreq+0x168>)
 800267a:	fb01 f003 	mul.w	r0, r1, r3
 800267e:	2100      	movs	r1, #0
 8002680:	fb01 f102 	mul.w	r1, r1, r2
 8002684:	1844      	adds	r4, r0, r1
 8002686:	493a      	ldr	r1, [pc, #232]	; (8002770 <HAL_RCC_GetSysClockFreq+0x168>)
 8002688:	fba2 0101 	umull	r0, r1, r2, r1
 800268c:	1863      	adds	r3, r4, r1
 800268e:	4619      	mov	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	461a      	mov	r2, r3
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	f7fd fffe 	bl	8000698 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4613      	mov	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e04a      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_RCC_GetSysClockFreq+0x160>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	461a      	mov	r2, r3
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	ea02 0400 	and.w	r4, r2, r0
 80026be:	ea03 0501 	and.w	r5, r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	014b      	lsls	r3, r1, #5
 80026d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026d4:	0142      	lsls	r2, r0, #5
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	1b00      	subs	r0, r0, r4
 80026dc:	eb61 0105 	sbc.w	r1, r1, r5
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	018b      	lsls	r3, r1, #6
 80026ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026ee:	0182      	lsls	r2, r0, #6
 80026f0:	1a12      	subs	r2, r2, r0
 80026f2:	eb63 0301 	sbc.w	r3, r3, r1
 80026f6:	f04f 0000 	mov.w	r0, #0
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	00d9      	lsls	r1, r3, #3
 8002700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002704:	00d0      	lsls	r0, r2, #3
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	1912      	adds	r2, r2, r4
 800270c:	eb45 0303 	adc.w	r3, r5, r3
 8002710:	f04f 0000 	mov.w	r0, #0
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	0299      	lsls	r1, r3, #10
 800271a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800271e:	0290      	lsls	r0, r2, #10
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	f7fd ffb2 	bl	8000698 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_RCC_GetSysClockFreq+0x160>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	60bb      	str	r3, [r7, #8]
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_RCC_GetSysClockFreq+0x164>)
 800275a:	60bb      	str	r3, [r7, #8]
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	68bb      	ldr	r3, [r7, #8]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bdb0      	pop	{r4, r5, r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	017d7840 	.word	0x017d7840

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000020 	.word	0x20000020

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080059f8 	.word	0x080059f8

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	080059f8 	.word	0x080059f8

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e041      	b.n	8002872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fa88 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fa88 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e044      	b.n	800291e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_TIM_Base_Start_IT+0xb0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d018      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x6c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d013      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x6c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_TIM_Base_Start_IT+0xb4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00e      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x6c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_TIM_Base_Start_IT+0xb8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x6c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a17      	ldr	r2, [pc, #92]	; (8002938 <HAL_TIM_Base_Start_IT+0xbc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x6c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_TIM_Base_Start_IT+0xc0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d111      	bne.n	800290c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d010      	beq.n	800291c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	e007      	b.n	800291c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40010000 	.word	0x40010000
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40014000 	.word	0x40014000

08002940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9b5 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f9a7 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f9b8 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0204 	mvn.w	r2, #4
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f98b 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f97d 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f98e 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f961 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f953 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f964 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f937 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f929 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f93a 	bl	8002d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0201 	mvn.w	r2, #1
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f8d2 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fab2 	bl	8003054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8ff 	bl	8002d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0220 	mvn.w	r2, #32
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa7c 	bl	8003040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0b4      	b.n	8002cd6 <HAL_TIM_ConfigClockSource+0x186>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d03e      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002baa:	f200 8087 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	f000 8086 	beq.w	8002cc2 <HAL_TIM_ConfigClockSource+0x172>
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d87f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b70      	cmp	r3, #112	; 0x70
 8002bbe:	d01a      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d87b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b60      	cmp	r3, #96	; 0x60
 8002bc6:	d050      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x11a>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d877      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b50      	cmp	r3, #80	; 0x50
 8002bce:	d03c      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0xfa>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d873      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d058      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x13a>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d86f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b30      	cmp	r3, #48	; 0x30
 8002bde:	d064      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d86b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d060      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d867      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d05a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	e062      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f000 f98d 	bl	8002f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	609a      	str	r2, [r3, #8]
      break;
 8002c22:	e04f      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f000 f976 	bl	8002f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c46:	609a      	str	r2, [r3, #8]
      break;
 8002c48:	e03c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 f8ea 	bl	8002e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2150      	movs	r1, #80	; 0x50
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f943 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002c68:	e02c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 f909 	bl	8002e8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2160      	movs	r1, #96	; 0x60
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f933 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002c88:	e01c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f000 f8ca 	bl	8002e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f923 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 f91a 	bl	8002eee <TIM_ITRx_SetConfig>
      break;
 8002cba:	e003      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a34      	ldr	r2, [pc, #208]	; (8002e14 <TIM_Base_SetConfig+0xe4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00f      	beq.n	8002d68 <TIM_Base_SetConfig+0x38>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d00b      	beq.n	8002d68 <TIM_Base_SetConfig+0x38>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <TIM_Base_SetConfig+0xe8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <TIM_Base_SetConfig+0x38>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <TIM_Base_SetConfig+0xec>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0x38>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a2f      	ldr	r2, [pc, #188]	; (8002e20 <TIM_Base_SetConfig+0xf0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d108      	bne.n	8002d7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <TIM_Base_SetConfig+0xe4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01b      	beq.n	8002dba <TIM_Base_SetConfig+0x8a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d88:	d017      	beq.n	8002dba <TIM_Base_SetConfig+0x8a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <TIM_Base_SetConfig+0xe8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <TIM_Base_SetConfig+0x8a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <TIM_Base_SetConfig+0xec>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00f      	beq.n	8002dba <TIM_Base_SetConfig+0x8a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <TIM_Base_SetConfig+0xf0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00b      	beq.n	8002dba <TIM_Base_SetConfig+0x8a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <TIM_Base_SetConfig+0xf4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <TIM_Base_SetConfig+0x8a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <TIM_Base_SetConfig+0xf8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d003      	beq.n	8002dba <TIM_Base_SetConfig+0x8a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <TIM_Base_SetConfig+0xfc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d108      	bne.n	8002dcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <TIM_Base_SetConfig+0xe4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d103      	bne.n	8002e00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	615a      	str	r2, [r3, #20]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800

08002e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0201 	bic.w	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 030a 	bic.w	r3, r3, #10
 8002e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0210 	bic.w	r2, r3, #16
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	031b      	lsls	r3, r3, #12
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	621a      	str	r2, [r3, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f043 0307 	orr.w	r3, r3, #7
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e050      	b.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d018      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d013      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a16      	ldr	r2, [pc, #88]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4313      	orrs	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40010000 	.word	0x40010000
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800
 8003038:	40000c00 	.word	0x40000c00
 800303c:	40014000 	.word	0x40014000

08003040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e03f      	b.n	80030fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fe6a 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fdd1 	bl	8003c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	d165      	bne.n	80031ea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_Transmit_DMA+0x26>
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e05e      	b.n	80031ec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_UART_Transmit_DMA+0x38>
 8003138:	2302      	movs	r3, #2
 800313a:	e057      	b.n	80031ec <HAL_UART_Transmit_DMA+0xe8>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2221      	movs	r2, #33	; 0x21
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_UART_Transmit_DMA+0xf0>)
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <HAL_UART_Transmit_DMA+0xf4>)
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	4a20      	ldr	r2, [pc, #128]	; (80031fc <HAL_UART_Transmit_DMA+0xf8>)
 800317a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	2200      	movs	r2, #0
 8003182:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3304      	adds	r3, #4
 8003198:	461a      	mov	r2, r3
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f7fe f9fe 	bl	800159c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3314      	adds	r3, #20
 80031b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	617b      	str	r3, [r7, #20]
   return(result);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3314      	adds	r3, #20
 80031d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d2:	627a      	str	r2, [r7, #36]	; 0x24
 80031d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	6a39      	ldr	r1, [r7, #32]
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e5      	bne.n	80031b2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3730      	adds	r7, #48	; 0x30
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	08003785 	.word	0x08003785
 80031f8:	0800381f 	.word	0x0800381f
 80031fc:	0800383b 	.word	0x0800383b

08003200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b0ba      	sub	sp, #232	; 0xe8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800323e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_UART_IRQHandler+0x66>
 8003252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fc3c 	bl	8003adc <UART_Receive_IT>
      return;
 8003264:	e256      	b.n	8003714 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80de 	beq.w	800342c <HAL_UART_IRQHandler+0x22c>
 8003270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800327c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80d1 	beq.w	800342c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800328a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_UART_IRQHandler+0xae>
 8003296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_UART_IRQHandler+0xd2>
 80032ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_UART_IRQHandler+0xf6>
 80032de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d011      	beq.n	8003326 <HAL_UART_IRQHandler+0x126>
 8003302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800330e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0208 	orr.w	r2, r3, #8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 81ed 	beq.w	800370a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_UART_IRQHandler+0x14e>
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fbc7 	bl	8003adc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_UART_IRQHandler+0x17a>
 8003372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d04f      	beq.n	800341a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 facf 	bl	800391e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d141      	bne.n	8003412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3314      	adds	r3, #20
 80033b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1d9      	bne.n	800338e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d013      	beq.n	800340a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	4a7d      	ldr	r2, [pc, #500]	; (80035dc <HAL_UART_IRQHandler+0x3dc>)
 80033e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe f99c 	bl	800172c <HAL_DMA_Abort_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003404:	4610      	mov	r0, r2
 8003406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	e00e      	b.n	8003428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9a4 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	e00a      	b.n	8003428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9a0 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	e006      	b.n	8003428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f99c 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003426:	e170      	b.n	800370a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	bf00      	nop
    return;
 800342a:	e16e      	b.n	800370a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	2b01      	cmp	r3, #1
 8003432:	f040 814a 	bne.w	80036ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8143 	beq.w	80036ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 813c 	beq.w	80036ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b40      	cmp	r3, #64	; 0x40
 8003474:	f040 80b4 	bne.w	80035e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8140 	beq.w	800370e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003496:	429a      	cmp	r2, r3
 8003498:	f080 8139 	bcs.w	800370e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ae:	f000 8088 	beq.w	80035c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1d9      	bne.n	80034b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3314      	adds	r3, #20
 8003504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800350e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3314      	adds	r3, #20
 800351e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800352a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e1      	bne.n	80034fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800354a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3314      	adds	r3, #20
 800355a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800355e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800356c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e3      	bne.n	800353a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003592:	f023 0310 	bic.w	r3, r3, #16
 8003596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80035a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e3      	bne.n	8003580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe f845 	bl	800164c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8ca 	bl	800376c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035d8:	e099      	b.n	800370e <HAL_UART_IRQHandler+0x50e>
 80035da:	bf00      	nop
 80035dc:	080039e5 	.word	0x080039e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 808b 	beq.w	8003712 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8086 	beq.w	8003712 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800361c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800362a:	647a      	str	r2, [r7, #68]	; 0x44
 800362c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e3      	bne.n	8003606 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	623b      	str	r3, [r7, #32]
   return(result);
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003662:	633a      	str	r2, [r7, #48]	; 0x30
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e3      	bne.n	800363e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	60fb      	str	r3, [r7, #12]
   return(result);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0310 	bic.w	r3, r3, #16
 800369a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036a8:	61fa      	str	r2, [r7, #28]
 80036aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	617b      	str	r3, [r7, #20]
   return(result);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e3      	bne.n	8003684 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f852 	bl	800376c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036c8:	e023      	b.n	8003712 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_UART_IRQHandler+0x4ea>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f992 	bl	8003a0c <UART_Transmit_IT>
    return;
 80036e8:	e014      	b.n	8003714 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00e      	beq.n	8003714 <HAL_UART_IRQHandler+0x514>
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9d2 	bl	8003aac <UART_EndTransmit_IT>
    return;
 8003708:	e004      	b.n	8003714 <HAL_UART_IRQHandler+0x514>
    return;
 800370a:	bf00      	nop
 800370c:	e002      	b.n	8003714 <HAL_UART_IRQHandler+0x514>
      return;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_UART_IRQHandler+0x514>
      return;
 8003712:	bf00      	nop
  }
}
 8003714:	37e8      	adds	r7, #232	; 0xe8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop

0800371c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b090      	sub	sp, #64	; 0x40
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d137      	bne.n	8003810 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2200      	movs	r2, #0
 80037a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3314      	adds	r3, #20
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	623b      	str	r3, [r7, #32]
   return(result);
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80037be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c6:	633a      	str	r2, [r7, #48]	; 0x30
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e5      	bne.n	80037a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fa:	61fa      	str	r2, [r7, #28]
 80037fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	617b      	str	r3, [r7, #20]
   return(result);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e5      	bne.n	80037da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800380e:	e002      	b.n	8003816 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003812:	f7ff ff83 	bl	800371c <HAL_UART_TxCpltCallback>
}
 8003816:	bf00      	nop
 8003818:	3740      	adds	r7, #64	; 0x40
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ff7f 	bl	8003730 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b80      	cmp	r3, #128	; 0x80
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b21      	cmp	r3, #33	; 0x21
 800386c:	d108      	bne.n	8003880 <UART_DMAError+0x46>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f000 f827 	bl	80038ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b22      	cmp	r3, #34	; 0x22
 80038a0:	d108      	bne.n	80038b4 <UART_DMAError+0x7a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80038ae:	68b8      	ldr	r0, [r7, #8]
 80038b0:	f000 f835 	bl	800391e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f043 0210 	orr.w	r2, r3, #16
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038c0:	68b8      	ldr	r0, [r7, #8]
 80038c2:	f7ff ff49 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b089      	sub	sp, #36	; 0x24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	61ba      	str	r2, [r7, #24]
 80038f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e5      	bne.n	80038d6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003912:	bf00      	nop
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800391e:	b480      	push	{r7}
 8003920:	b095      	sub	sp, #84	; 0x54
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800393c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003946:	643a      	str	r2, [r7, #64]	; 0x40
 8003948:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800394c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e5      	bne.n	8003926 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3314      	adds	r3, #20
 8003960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	61fb      	str	r3, [r7, #28]
   return(result);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	64bb      	str	r3, [r7, #72]	; 0x48
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800397c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e5      	bne.n	800395a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	2b01      	cmp	r3, #1
 8003994:	d119      	bne.n	80039ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 0310 	bic.w	r3, r3, #16
 80039ac:	647b      	str	r3, [r7, #68]	; 0x44
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b6:	61ba      	str	r2, [r7, #24]
 80039b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	613b      	str	r3, [r7, #16]
   return(result);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e5      	bne.n	8003996 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039d8:	bf00      	nop
 80039da:	3754      	adds	r7, #84	; 0x54
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f7ff feaa 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b21      	cmp	r3, #33	; 0x21
 8003a1e:	d13e      	bne.n	8003a9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a28:	d114      	bne.n	8003a54 <UART_Transmit_IT+0x48>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d110      	bne.n	8003a54 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	1c9a      	adds	r2, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]
 8003a52:	e008      	b.n	8003a66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	1c59      	adds	r1, r3, #1
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6211      	str	r1, [r2, #32]
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4619      	mov	r1, r3
 8003a74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
  }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe25 	bl	800371c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	; 0x30
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b22      	cmp	r3, #34	; 0x22
 8003aee:	f040 80ab 	bne.w	8003c48 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d117      	bne.n	8003b2c <UART_Receive_IT+0x50>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d113      	bne.n	8003b2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	1c9a      	adds	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
 8003b2a:	e026      	b.n	8003b7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d007      	beq.n	8003b50 <UART_Receive_IT+0x74>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <UART_Receive_IT+0x82>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	e008      	b.n	8003b70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4619      	mov	r1, r3
 8003b88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d15a      	bne.n	8003c44 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0220 	bic.w	r2, r2, #32
 8003b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d135      	bne.n	8003c3a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	613b      	str	r3, [r7, #16]
   return(result);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f023 0310 	bic.w	r3, r3, #16
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	623a      	str	r2, [r7, #32]
 8003bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	69f9      	ldr	r1, [r7, #28]
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e5      	bne.n	8003bd4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d10a      	bne.n	8003c2c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fd9a 	bl	800376c <HAL_UARTEx_RxEventCallback>
 8003c38:	e002      	b.n	8003c40 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fd82 	bl	8003744 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e002      	b.n	8003c4a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3730      	adds	r7, #48	; 0x30
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	b09f      	sub	sp, #124	; 0x7c
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6a:	68d9      	ldr	r1, [r3, #12]
 8003c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	ea40 0301 	orr.w	r3, r0, r1
 8003c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c98:	f021 010c 	bic.w	r1, r1, #12
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb2:	6999      	ldr	r1, [r3, #24]
 8003cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	ea40 0301 	orr.w	r3, r0, r1
 8003cbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4bc5      	ldr	r3, [pc, #788]	; (8003fd8 <UART_SetConfig+0x384>)
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d004      	beq.n	8003cd2 <UART_SetConfig+0x7e>
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4bc3      	ldr	r3, [pc, #780]	; (8003fdc <UART_SetConfig+0x388>)
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d103      	bne.n	8003cda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cd2:	f7fe fd6f 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8003cd6:	6778      	str	r0, [r7, #116]	; 0x74
 8003cd8:	e002      	b.n	8003ce0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7fe fd57 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003cde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	f040 80b6 	bne.w	8003e58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cee:	461c      	mov	r4, r3
 8003cf0:	f04f 0500 	mov.w	r5, #0
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	6439      	str	r1, [r7, #64]	; 0x40
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003d00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d04:	1912      	adds	r2, r2, r4
 8003d06:	eb45 0303 	adc.w	r3, r5, r3
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	00d9      	lsls	r1, r3, #3
 8003d14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d18:	00d0      	lsls	r0, r2, #3
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	1911      	adds	r1, r2, r4
 8003d20:	6639      	str	r1, [r7, #96]	; 0x60
 8003d22:	416b      	adcs	r3, r5
 8003d24:	667b      	str	r3, [r7, #100]	; 0x64
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d34:	415b      	adcs	r3, r3
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d40:	f7fc fcaa 	bl	8000698 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4ba5      	ldr	r3, [pc, #660]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	011e      	lsls	r6, r3, #4
 8003d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d54:	461c      	mov	r4, r3
 8003d56:	f04f 0500 	mov.w	r5, #0
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	6339      	str	r1, [r7, #48]	; 0x30
 8003d62:	415b      	adcs	r3, r3
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
 8003d66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d6a:	1912      	adds	r2, r2, r4
 8003d6c:	eb45 0303 	adc.w	r3, r5, r3
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	00d9      	lsls	r1, r3, #3
 8003d7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d7e:	00d0      	lsls	r0, r2, #3
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	1911      	adds	r1, r2, r4
 8003d86:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d88:	416b      	adcs	r3, r5
 8003d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	1891      	adds	r1, r2, r2
 8003d98:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d9a:	415b      	adcs	r3, r3
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003da2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003da6:	f7fc fc77 	bl	8000698 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4b8c      	ldr	r3, [pc, #560]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003db0:	fba3 1302 	umull	r1, r3, r3, r2
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	2164      	movs	r1, #100	; 0x64
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	3332      	adds	r3, #50	; 0x32
 8003dc2:	4a87      	ldr	r2, [pc, #540]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd0:	441e      	add	r6, r3
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	1894      	adds	r4, r2, r2
 8003de0:	623c      	str	r4, [r7, #32]
 8003de2:	415b      	adcs	r3, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dea:	1812      	adds	r2, r2, r0
 8003dec:	eb41 0303 	adc.w	r3, r1, r3
 8003df0:	f04f 0400 	mov.w	r4, #0
 8003df4:	f04f 0500 	mov.w	r5, #0
 8003df8:	00dd      	lsls	r5, r3, #3
 8003dfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dfe:	00d4      	lsls	r4, r2, #3
 8003e00:	4622      	mov	r2, r4
 8003e02:	462b      	mov	r3, r5
 8003e04:	1814      	adds	r4, r2, r0
 8003e06:	653c      	str	r4, [r7, #80]	; 0x50
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	461a      	mov	r2, r3
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	1891      	adds	r1, r2, r2
 8003e18:	61b9      	str	r1, [r7, #24]
 8003e1a:	415b      	adcs	r3, r3
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e26:	f7fc fc37 	bl	8000698 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	; 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	3332      	adds	r3, #50	; 0x32
 8003e42:	4a67      	ldr	r2, [pc, #412]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	f003 0207 	and.w	r2, r3, #7
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4432      	add	r2, r6
 8003e54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e56:	e0b9      	b.n	8003fcc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5a:	461c      	mov	r4, r3
 8003e5c:	f04f 0500 	mov.w	r5, #0
 8003e60:	4622      	mov	r2, r4
 8003e62:	462b      	mov	r3, r5
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	6139      	str	r1, [r7, #16]
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e70:	1912      	adds	r2, r2, r4
 8003e72:	eb45 0303 	adc.w	r3, r5, r3
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	00d9      	lsls	r1, r3, #3
 8003e80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e84:	00d0      	lsls	r0, r2, #3
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	eb12 0804 	adds.w	r8, r2, r4
 8003e8e:	eb43 0905 	adc.w	r9, r3, r5
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f04f 0100 	mov.w	r1, #0
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	008b      	lsls	r3, r1, #2
 8003ea6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eaa:	0082      	lsls	r2, r0, #2
 8003eac:	4640      	mov	r0, r8
 8003eae:	4649      	mov	r1, r9
 8003eb0:	f7fc fbf2 	bl	8000698 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4b49      	ldr	r3, [pc, #292]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003eba:	fba3 2302 	umull	r2, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	011e      	lsls	r6, r3, #4
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	1894      	adds	r4, r2, r2
 8003ed0:	60bc      	str	r4, [r7, #8]
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eda:	1812      	adds	r2, r2, r0
 8003edc:	eb41 0303 	adc.w	r3, r1, r3
 8003ee0:	f04f 0400 	mov.w	r4, #0
 8003ee4:	f04f 0500 	mov.w	r5, #0
 8003ee8:	00dd      	lsls	r5, r3, #3
 8003eea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eee:	00d4      	lsls	r4, r2, #3
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	1814      	adds	r4, r2, r0
 8003ef6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ef8:	414b      	adcs	r3, r1
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f04f 0100 	mov.w	r1, #0
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	008b      	lsls	r3, r1, #2
 8003f10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f14:	0082      	lsls	r2, r0, #2
 8003f16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f1a:	f7fc fbbd 	bl	8000698 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b2f      	ldr	r3, [pc, #188]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	; 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	3332      	adds	r3, #50	; 0x32
 8003f36:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f42:	441e      	add	r6, r3
 8003f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f46:	4618      	mov	r0, r3
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	1894      	adds	r4, r2, r2
 8003f52:	603c      	str	r4, [r7, #0]
 8003f54:	415b      	adcs	r3, r3
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f5c:	1812      	adds	r2, r2, r0
 8003f5e:	eb41 0303 	adc.w	r3, r1, r3
 8003f62:	f04f 0400 	mov.w	r4, #0
 8003f66:	f04f 0500 	mov.w	r5, #0
 8003f6a:	00dd      	lsls	r5, r3, #3
 8003f6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f70:	00d4      	lsls	r4, r2, #3
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	eb12 0a00 	adds.w	sl, r2, r0
 8003f7a:	eb43 0b01 	adc.w	fp, r3, r1
 8003f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	008b      	lsls	r3, r1, #2
 8003f92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f96:	0082      	lsls	r2, r0, #2
 8003f98:	4650      	mov	r0, sl
 8003f9a:	4659      	mov	r1, fp
 8003f9c:	f7fc fb7c 	bl	8000698 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2164      	movs	r1, #100	; 0x64
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	; 0x32
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4432      	add	r2, r6
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	377c      	adds	r7, #124	; 0x7c
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40011000 	.word	0x40011000
 8003fdc:	40011400 	.word	0x40011400
 8003fe0:	51eb851f 	.word	0x51eb851f

08003fe4 <__errno>:
 8003fe4:	4b01      	ldr	r3, [pc, #4]	; (8003fec <__errno+0x8>)
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	2000002c 	.word	0x2000002c

08003ff0 <__libc_init_array>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	4d0d      	ldr	r5, [pc, #52]	; (8004028 <__libc_init_array+0x38>)
 8003ff4:	4c0d      	ldr	r4, [pc, #52]	; (800402c <__libc_init_array+0x3c>)
 8003ff6:	1b64      	subs	r4, r4, r5
 8003ff8:	10a4      	asrs	r4, r4, #2
 8003ffa:	2600      	movs	r6, #0
 8003ffc:	42a6      	cmp	r6, r4
 8003ffe:	d109      	bne.n	8004014 <__libc_init_array+0x24>
 8004000:	4d0b      	ldr	r5, [pc, #44]	; (8004030 <__libc_init_array+0x40>)
 8004002:	4c0c      	ldr	r4, [pc, #48]	; (8004034 <__libc_init_array+0x44>)
 8004004:	f001 fce2 	bl	80059cc <_init>
 8004008:	1b64      	subs	r4, r4, r5
 800400a:	10a4      	asrs	r4, r4, #2
 800400c:	2600      	movs	r6, #0
 800400e:	42a6      	cmp	r6, r4
 8004010:	d105      	bne.n	800401e <__libc_init_array+0x2e>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	f855 3b04 	ldr.w	r3, [r5], #4
 8004018:	4798      	blx	r3
 800401a:	3601      	adds	r6, #1
 800401c:	e7ee      	b.n	8003ffc <__libc_init_array+0xc>
 800401e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004022:	4798      	blx	r3
 8004024:	3601      	adds	r6, #1
 8004026:	e7f2      	b.n	800400e <__libc_init_array+0x1e>
 8004028:	08005e78 	.word	0x08005e78
 800402c:	08005e78 	.word	0x08005e78
 8004030:	08005e78 	.word	0x08005e78
 8004034:	08005e7c 	.word	0x08005e7c

08004038 <memset>:
 8004038:	4402      	add	r2, r0
 800403a:	4603      	mov	r3, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	f803 1b01 	strb.w	r1, [r3], #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <iprintf>:
 8004048:	b40f      	push	{r0, r1, r2, r3}
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <iprintf+0x2c>)
 800404c:	b513      	push	{r0, r1, r4, lr}
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	b124      	cbz	r4, 800405c <iprintf+0x14>
 8004052:	69a3      	ldr	r3, [r4, #24]
 8004054:	b913      	cbnz	r3, 800405c <iprintf+0x14>
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f866 	bl	8004128 <__sinit>
 800405c:	ab05      	add	r3, sp, #20
 800405e:	9a04      	ldr	r2, [sp, #16]
 8004060:	68a1      	ldr	r1, [r4, #8]
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	4620      	mov	r0, r4
 8004066:	f000 f983 	bl	8004370 <_vfiprintf_r>
 800406a:	b002      	add	sp, #8
 800406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004070:	b004      	add	sp, #16
 8004072:	4770      	bx	lr
 8004074:	2000002c 	.word	0x2000002c

08004078 <std>:
 8004078:	2300      	movs	r3, #0
 800407a:	b510      	push	{r4, lr}
 800407c:	4604      	mov	r4, r0
 800407e:	e9c0 3300 	strd	r3, r3, [r0]
 8004082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004086:	6083      	str	r3, [r0, #8]
 8004088:	8181      	strh	r1, [r0, #12]
 800408a:	6643      	str	r3, [r0, #100]	; 0x64
 800408c:	81c2      	strh	r2, [r0, #14]
 800408e:	6183      	str	r3, [r0, #24]
 8004090:	4619      	mov	r1, r3
 8004092:	2208      	movs	r2, #8
 8004094:	305c      	adds	r0, #92	; 0x5c
 8004096:	f7ff ffcf 	bl	8004038 <memset>
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <std+0x38>)
 800409c:	6263      	str	r3, [r4, #36]	; 0x24
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <std+0x3c>)
 80040a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <std+0x40>)
 80040a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <std+0x44>)
 80040a8:	6224      	str	r4, [r4, #32]
 80040aa:	6323      	str	r3, [r4, #48]	; 0x30
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	bf00      	nop
 80040b0:	08004919 	.word	0x08004919
 80040b4:	0800493b 	.word	0x0800493b
 80040b8:	08004973 	.word	0x08004973
 80040bc:	08004997 	.word	0x08004997

080040c0 <_cleanup_r>:
 80040c0:	4901      	ldr	r1, [pc, #4]	; (80040c8 <_cleanup_r+0x8>)
 80040c2:	f000 b8af 	b.w	8004224 <_fwalk_reent>
 80040c6:	bf00      	nop
 80040c8:	08004c71 	.word	0x08004c71

080040cc <__sfmoreglue>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	1e4a      	subs	r2, r1, #1
 80040d0:	2568      	movs	r5, #104	; 0x68
 80040d2:	4355      	muls	r5, r2
 80040d4:	460e      	mov	r6, r1
 80040d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040da:	f000 f8c5 	bl	8004268 <_malloc_r>
 80040de:	4604      	mov	r4, r0
 80040e0:	b140      	cbz	r0, 80040f4 <__sfmoreglue+0x28>
 80040e2:	2100      	movs	r1, #0
 80040e4:	e9c0 1600 	strd	r1, r6, [r0]
 80040e8:	300c      	adds	r0, #12
 80040ea:	60a0      	str	r0, [r4, #8]
 80040ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040f0:	f7ff ffa2 	bl	8004038 <memset>
 80040f4:	4620      	mov	r0, r4
 80040f6:	bd70      	pop	{r4, r5, r6, pc}

080040f8 <__sfp_lock_acquire>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__sfp_lock_acquire+0x8>)
 80040fa:	f000 b8b3 	b.w	8004264 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	20000214 	.word	0x20000214

08004104 <__sfp_lock_release>:
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <__sfp_lock_release+0x8>)
 8004106:	f000 b8ae 	b.w	8004266 <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	20000214 	.word	0x20000214

08004110 <__sinit_lock_acquire>:
 8004110:	4801      	ldr	r0, [pc, #4]	; (8004118 <__sinit_lock_acquire+0x8>)
 8004112:	f000 b8a7 	b.w	8004264 <__retarget_lock_acquire_recursive>
 8004116:	bf00      	nop
 8004118:	2000020f 	.word	0x2000020f

0800411c <__sinit_lock_release>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__sinit_lock_release+0x8>)
 800411e:	f000 b8a2 	b.w	8004266 <__retarget_lock_release_recursive>
 8004122:	bf00      	nop
 8004124:	2000020f 	.word	0x2000020f

08004128 <__sinit>:
 8004128:	b510      	push	{r4, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	f7ff fff0 	bl	8004110 <__sinit_lock_acquire>
 8004130:	69a3      	ldr	r3, [r4, #24]
 8004132:	b11b      	cbz	r3, 800413c <__sinit+0x14>
 8004134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004138:	f7ff bff0 	b.w	800411c <__sinit_lock_release>
 800413c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004140:	6523      	str	r3, [r4, #80]	; 0x50
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <__sinit+0x68>)
 8004144:	4a13      	ldr	r2, [pc, #76]	; (8004194 <__sinit+0x6c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	62a2      	str	r2, [r4, #40]	; 0x28
 800414a:	42a3      	cmp	r3, r4
 800414c:	bf04      	itt	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	61a3      	streq	r3, [r4, #24]
 8004152:	4620      	mov	r0, r4
 8004154:	f000 f820 	bl	8004198 <__sfp>
 8004158:	6060      	str	r0, [r4, #4]
 800415a:	4620      	mov	r0, r4
 800415c:	f000 f81c 	bl	8004198 <__sfp>
 8004160:	60a0      	str	r0, [r4, #8]
 8004162:	4620      	mov	r0, r4
 8004164:	f000 f818 	bl	8004198 <__sfp>
 8004168:	2200      	movs	r2, #0
 800416a:	60e0      	str	r0, [r4, #12]
 800416c:	2104      	movs	r1, #4
 800416e:	6860      	ldr	r0, [r4, #4]
 8004170:	f7ff ff82 	bl	8004078 <std>
 8004174:	68a0      	ldr	r0, [r4, #8]
 8004176:	2201      	movs	r2, #1
 8004178:	2109      	movs	r1, #9
 800417a:	f7ff ff7d 	bl	8004078 <std>
 800417e:	68e0      	ldr	r0, [r4, #12]
 8004180:	2202      	movs	r2, #2
 8004182:	2112      	movs	r1, #18
 8004184:	f7ff ff78 	bl	8004078 <std>
 8004188:	2301      	movs	r3, #1
 800418a:	61a3      	str	r3, [r4, #24]
 800418c:	e7d2      	b.n	8004134 <__sinit+0xc>
 800418e:	bf00      	nop
 8004190:	08005a08 	.word	0x08005a08
 8004194:	080040c1 	.word	0x080040c1

08004198 <__sfp>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	4607      	mov	r7, r0
 800419c:	f7ff ffac 	bl	80040f8 <__sfp_lock_acquire>
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <__sfp+0x84>)
 80041a2:	681e      	ldr	r6, [r3, #0]
 80041a4:	69b3      	ldr	r3, [r6, #24]
 80041a6:	b913      	cbnz	r3, 80041ae <__sfp+0x16>
 80041a8:	4630      	mov	r0, r6
 80041aa:	f7ff ffbd 	bl	8004128 <__sinit>
 80041ae:	3648      	adds	r6, #72	; 0x48
 80041b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	d503      	bpl.n	80041c0 <__sfp+0x28>
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	b30b      	cbz	r3, 8004200 <__sfp+0x68>
 80041bc:	6836      	ldr	r6, [r6, #0]
 80041be:	e7f7      	b.n	80041b0 <__sfp+0x18>
 80041c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041c4:	b9d5      	cbnz	r5, 80041fc <__sfp+0x64>
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <__sfp+0x88>)
 80041c8:	60e3      	str	r3, [r4, #12]
 80041ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041ce:	6665      	str	r5, [r4, #100]	; 0x64
 80041d0:	f000 f847 	bl	8004262 <__retarget_lock_init_recursive>
 80041d4:	f7ff ff96 	bl	8004104 <__sfp_lock_release>
 80041d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041e0:	6025      	str	r5, [r4, #0]
 80041e2:	61a5      	str	r5, [r4, #24]
 80041e4:	2208      	movs	r2, #8
 80041e6:	4629      	mov	r1, r5
 80041e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041ec:	f7ff ff24 	bl	8004038 <memset>
 80041f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041f8:	4620      	mov	r0, r4
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fc:	3468      	adds	r4, #104	; 0x68
 80041fe:	e7d9      	b.n	80041b4 <__sfp+0x1c>
 8004200:	2104      	movs	r1, #4
 8004202:	4638      	mov	r0, r7
 8004204:	f7ff ff62 	bl	80040cc <__sfmoreglue>
 8004208:	4604      	mov	r4, r0
 800420a:	6030      	str	r0, [r6, #0]
 800420c:	2800      	cmp	r0, #0
 800420e:	d1d5      	bne.n	80041bc <__sfp+0x24>
 8004210:	f7ff ff78 	bl	8004104 <__sfp_lock_release>
 8004214:	230c      	movs	r3, #12
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	e7ee      	b.n	80041f8 <__sfp+0x60>
 800421a:	bf00      	nop
 800421c:	08005a08 	.word	0x08005a08
 8004220:	ffff0001 	.word	0xffff0001

08004224 <_fwalk_reent>:
 8004224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004228:	4606      	mov	r6, r0
 800422a:	4688      	mov	r8, r1
 800422c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004230:	2700      	movs	r7, #0
 8004232:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004236:	f1b9 0901 	subs.w	r9, r9, #1
 800423a:	d505      	bpl.n	8004248 <_fwalk_reent+0x24>
 800423c:	6824      	ldr	r4, [r4, #0]
 800423e:	2c00      	cmp	r4, #0
 8004240:	d1f7      	bne.n	8004232 <_fwalk_reent+0xe>
 8004242:	4638      	mov	r0, r7
 8004244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004248:	89ab      	ldrh	r3, [r5, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d907      	bls.n	800425e <_fwalk_reent+0x3a>
 800424e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004252:	3301      	adds	r3, #1
 8004254:	d003      	beq.n	800425e <_fwalk_reent+0x3a>
 8004256:	4629      	mov	r1, r5
 8004258:	4630      	mov	r0, r6
 800425a:	47c0      	blx	r8
 800425c:	4307      	orrs	r7, r0
 800425e:	3568      	adds	r5, #104	; 0x68
 8004260:	e7e9      	b.n	8004236 <_fwalk_reent+0x12>

08004262 <__retarget_lock_init_recursive>:
 8004262:	4770      	bx	lr

08004264 <__retarget_lock_acquire_recursive>:
 8004264:	4770      	bx	lr

08004266 <__retarget_lock_release_recursive>:
 8004266:	4770      	bx	lr

08004268 <_malloc_r>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	1ccd      	adds	r5, r1, #3
 800426c:	f025 0503 	bic.w	r5, r5, #3
 8004270:	3508      	adds	r5, #8
 8004272:	2d0c      	cmp	r5, #12
 8004274:	bf38      	it	cc
 8004276:	250c      	movcc	r5, #12
 8004278:	2d00      	cmp	r5, #0
 800427a:	4606      	mov	r6, r0
 800427c:	db01      	blt.n	8004282 <_malloc_r+0x1a>
 800427e:	42a9      	cmp	r1, r5
 8004280:	d903      	bls.n	800428a <_malloc_r+0x22>
 8004282:	230c      	movs	r3, #12
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	2000      	movs	r0, #0
 8004288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428a:	f000 fda3 	bl	8004dd4 <__malloc_lock>
 800428e:	4921      	ldr	r1, [pc, #132]	; (8004314 <_malloc_r+0xac>)
 8004290:	680a      	ldr	r2, [r1, #0]
 8004292:	4614      	mov	r4, r2
 8004294:	b99c      	cbnz	r4, 80042be <_malloc_r+0x56>
 8004296:	4f20      	ldr	r7, [pc, #128]	; (8004318 <_malloc_r+0xb0>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	b923      	cbnz	r3, 80042a6 <_malloc_r+0x3e>
 800429c:	4621      	mov	r1, r4
 800429e:	4630      	mov	r0, r6
 80042a0:	f000 fb2a 	bl	80048f8 <_sbrk_r>
 80042a4:	6038      	str	r0, [r7, #0]
 80042a6:	4629      	mov	r1, r5
 80042a8:	4630      	mov	r0, r6
 80042aa:	f000 fb25 	bl	80048f8 <_sbrk_r>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d123      	bne.n	80042fa <_malloc_r+0x92>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6033      	str	r3, [r6, #0]
 80042b6:	4630      	mov	r0, r6
 80042b8:	f000 fd92 	bl	8004de0 <__malloc_unlock>
 80042bc:	e7e3      	b.n	8004286 <_malloc_r+0x1e>
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	1b5b      	subs	r3, r3, r5
 80042c2:	d417      	bmi.n	80042f4 <_malloc_r+0x8c>
 80042c4:	2b0b      	cmp	r3, #11
 80042c6:	d903      	bls.n	80042d0 <_malloc_r+0x68>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	441c      	add	r4, r3
 80042cc:	6025      	str	r5, [r4, #0]
 80042ce:	e004      	b.n	80042da <_malloc_r+0x72>
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	42a2      	cmp	r2, r4
 80042d4:	bf0c      	ite	eq
 80042d6:	600b      	streq	r3, [r1, #0]
 80042d8:	6053      	strne	r3, [r2, #4]
 80042da:	4630      	mov	r0, r6
 80042dc:	f000 fd80 	bl	8004de0 <__malloc_unlock>
 80042e0:	f104 000b 	add.w	r0, r4, #11
 80042e4:	1d23      	adds	r3, r4, #4
 80042e6:	f020 0007 	bic.w	r0, r0, #7
 80042ea:	1ac2      	subs	r2, r0, r3
 80042ec:	d0cc      	beq.n	8004288 <_malloc_r+0x20>
 80042ee:	1a1b      	subs	r3, r3, r0
 80042f0:	50a3      	str	r3, [r4, r2]
 80042f2:	e7c9      	b.n	8004288 <_malloc_r+0x20>
 80042f4:	4622      	mov	r2, r4
 80042f6:	6864      	ldr	r4, [r4, #4]
 80042f8:	e7cc      	b.n	8004294 <_malloc_r+0x2c>
 80042fa:	1cc4      	adds	r4, r0, #3
 80042fc:	f024 0403 	bic.w	r4, r4, #3
 8004300:	42a0      	cmp	r0, r4
 8004302:	d0e3      	beq.n	80042cc <_malloc_r+0x64>
 8004304:	1a21      	subs	r1, r4, r0
 8004306:	4630      	mov	r0, r6
 8004308:	f000 faf6 	bl	80048f8 <_sbrk_r>
 800430c:	3001      	adds	r0, #1
 800430e:	d1dd      	bne.n	80042cc <_malloc_r+0x64>
 8004310:	e7cf      	b.n	80042b2 <_malloc_r+0x4a>
 8004312:	bf00      	nop
 8004314:	200000b0 	.word	0x200000b0
 8004318:	200000b4 	.word	0x200000b4

0800431c <__sfputc_r>:
 800431c:	6893      	ldr	r3, [r2, #8]
 800431e:	3b01      	subs	r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	b410      	push	{r4}
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	da08      	bge.n	800433a <__sfputc_r+0x1e>
 8004328:	6994      	ldr	r4, [r2, #24]
 800432a:	42a3      	cmp	r3, r4
 800432c:	db01      	blt.n	8004332 <__sfputc_r+0x16>
 800432e:	290a      	cmp	r1, #10
 8004330:	d103      	bne.n	800433a <__sfputc_r+0x1e>
 8004332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004336:	f000 bb33 	b.w	80049a0 <__swbuf_r>
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	1c58      	adds	r0, r3, #1
 800433e:	6010      	str	r0, [r2, #0]
 8004340:	7019      	strb	r1, [r3, #0]
 8004342:	4608      	mov	r0, r1
 8004344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004348:	4770      	bx	lr

0800434a <__sfputs_r>:
 800434a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434c:	4606      	mov	r6, r0
 800434e:	460f      	mov	r7, r1
 8004350:	4614      	mov	r4, r2
 8004352:	18d5      	adds	r5, r2, r3
 8004354:	42ac      	cmp	r4, r5
 8004356:	d101      	bne.n	800435c <__sfputs_r+0x12>
 8004358:	2000      	movs	r0, #0
 800435a:	e007      	b.n	800436c <__sfputs_r+0x22>
 800435c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004360:	463a      	mov	r2, r7
 8004362:	4630      	mov	r0, r6
 8004364:	f7ff ffda 	bl	800431c <__sfputc_r>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d1f3      	bne.n	8004354 <__sfputs_r+0xa>
 800436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004370 <_vfiprintf_r>:
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	460d      	mov	r5, r1
 8004376:	b09d      	sub	sp, #116	; 0x74
 8004378:	4614      	mov	r4, r2
 800437a:	4698      	mov	r8, r3
 800437c:	4606      	mov	r6, r0
 800437e:	b118      	cbz	r0, 8004388 <_vfiprintf_r+0x18>
 8004380:	6983      	ldr	r3, [r0, #24]
 8004382:	b90b      	cbnz	r3, 8004388 <_vfiprintf_r+0x18>
 8004384:	f7ff fed0 	bl	8004128 <__sinit>
 8004388:	4b89      	ldr	r3, [pc, #548]	; (80045b0 <_vfiprintf_r+0x240>)
 800438a:	429d      	cmp	r5, r3
 800438c:	d11b      	bne.n	80043c6 <_vfiprintf_r+0x56>
 800438e:	6875      	ldr	r5, [r6, #4]
 8004390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004392:	07d9      	lsls	r1, r3, #31
 8004394:	d405      	bmi.n	80043a2 <_vfiprintf_r+0x32>
 8004396:	89ab      	ldrh	r3, [r5, #12]
 8004398:	059a      	lsls	r2, r3, #22
 800439a:	d402      	bmi.n	80043a2 <_vfiprintf_r+0x32>
 800439c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800439e:	f7ff ff61 	bl	8004264 <__retarget_lock_acquire_recursive>
 80043a2:	89ab      	ldrh	r3, [r5, #12]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	d501      	bpl.n	80043ac <_vfiprintf_r+0x3c>
 80043a8:	692b      	ldr	r3, [r5, #16]
 80043aa:	b9eb      	cbnz	r3, 80043e8 <_vfiprintf_r+0x78>
 80043ac:	4629      	mov	r1, r5
 80043ae:	4630      	mov	r0, r6
 80043b0:	f000 fb5a 	bl	8004a68 <__swsetup_r>
 80043b4:	b1c0      	cbz	r0, 80043e8 <_vfiprintf_r+0x78>
 80043b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043b8:	07dc      	lsls	r4, r3, #31
 80043ba:	d50e      	bpl.n	80043da <_vfiprintf_r+0x6a>
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	b01d      	add	sp, #116	; 0x74
 80043c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c6:	4b7b      	ldr	r3, [pc, #492]	; (80045b4 <_vfiprintf_r+0x244>)
 80043c8:	429d      	cmp	r5, r3
 80043ca:	d101      	bne.n	80043d0 <_vfiprintf_r+0x60>
 80043cc:	68b5      	ldr	r5, [r6, #8]
 80043ce:	e7df      	b.n	8004390 <_vfiprintf_r+0x20>
 80043d0:	4b79      	ldr	r3, [pc, #484]	; (80045b8 <_vfiprintf_r+0x248>)
 80043d2:	429d      	cmp	r5, r3
 80043d4:	bf08      	it	eq
 80043d6:	68f5      	ldreq	r5, [r6, #12]
 80043d8:	e7da      	b.n	8004390 <_vfiprintf_r+0x20>
 80043da:	89ab      	ldrh	r3, [r5, #12]
 80043dc:	0598      	lsls	r0, r3, #22
 80043de:	d4ed      	bmi.n	80043bc <_vfiprintf_r+0x4c>
 80043e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043e2:	f7ff ff40 	bl	8004266 <__retarget_lock_release_recursive>
 80043e6:	e7e9      	b.n	80043bc <_vfiprintf_r+0x4c>
 80043e8:	2300      	movs	r3, #0
 80043ea:	9309      	str	r3, [sp, #36]	; 0x24
 80043ec:	2320      	movs	r3, #32
 80043ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80043f6:	2330      	movs	r3, #48	; 0x30
 80043f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045bc <_vfiprintf_r+0x24c>
 80043fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004400:	f04f 0901 	mov.w	r9, #1
 8004404:	4623      	mov	r3, r4
 8004406:	469a      	mov	sl, r3
 8004408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800440c:	b10a      	cbz	r2, 8004412 <_vfiprintf_r+0xa2>
 800440e:	2a25      	cmp	r2, #37	; 0x25
 8004410:	d1f9      	bne.n	8004406 <_vfiprintf_r+0x96>
 8004412:	ebba 0b04 	subs.w	fp, sl, r4
 8004416:	d00b      	beq.n	8004430 <_vfiprintf_r+0xc0>
 8004418:	465b      	mov	r3, fp
 800441a:	4622      	mov	r2, r4
 800441c:	4629      	mov	r1, r5
 800441e:	4630      	mov	r0, r6
 8004420:	f7ff ff93 	bl	800434a <__sfputs_r>
 8004424:	3001      	adds	r0, #1
 8004426:	f000 80aa 	beq.w	800457e <_vfiprintf_r+0x20e>
 800442a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800442c:	445a      	add	r2, fp
 800442e:	9209      	str	r2, [sp, #36]	; 0x24
 8004430:	f89a 3000 	ldrb.w	r3, [sl]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80a2 	beq.w	800457e <_vfiprintf_r+0x20e>
 800443a:	2300      	movs	r3, #0
 800443c:	f04f 32ff 	mov.w	r2, #4294967295
 8004440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004444:	f10a 0a01 	add.w	sl, sl, #1
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	9307      	str	r3, [sp, #28]
 800444c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004450:	931a      	str	r3, [sp, #104]	; 0x68
 8004452:	4654      	mov	r4, sl
 8004454:	2205      	movs	r2, #5
 8004456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800445a:	4858      	ldr	r0, [pc, #352]	; (80045bc <_vfiprintf_r+0x24c>)
 800445c:	f7fb fec0 	bl	80001e0 <memchr>
 8004460:	9a04      	ldr	r2, [sp, #16]
 8004462:	b9d8      	cbnz	r0, 800449c <_vfiprintf_r+0x12c>
 8004464:	06d1      	lsls	r1, r2, #27
 8004466:	bf44      	itt	mi
 8004468:	2320      	movmi	r3, #32
 800446a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800446e:	0713      	lsls	r3, r2, #28
 8004470:	bf44      	itt	mi
 8004472:	232b      	movmi	r3, #43	; 0x2b
 8004474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004478:	f89a 3000 	ldrb.w	r3, [sl]
 800447c:	2b2a      	cmp	r3, #42	; 0x2a
 800447e:	d015      	beq.n	80044ac <_vfiprintf_r+0x13c>
 8004480:	9a07      	ldr	r2, [sp, #28]
 8004482:	4654      	mov	r4, sl
 8004484:	2000      	movs	r0, #0
 8004486:	f04f 0c0a 	mov.w	ip, #10
 800448a:	4621      	mov	r1, r4
 800448c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004490:	3b30      	subs	r3, #48	; 0x30
 8004492:	2b09      	cmp	r3, #9
 8004494:	d94e      	bls.n	8004534 <_vfiprintf_r+0x1c4>
 8004496:	b1b0      	cbz	r0, 80044c6 <_vfiprintf_r+0x156>
 8004498:	9207      	str	r2, [sp, #28]
 800449a:	e014      	b.n	80044c6 <_vfiprintf_r+0x156>
 800449c:	eba0 0308 	sub.w	r3, r0, r8
 80044a0:	fa09 f303 	lsl.w	r3, r9, r3
 80044a4:	4313      	orrs	r3, r2
 80044a6:	9304      	str	r3, [sp, #16]
 80044a8:	46a2      	mov	sl, r4
 80044aa:	e7d2      	b.n	8004452 <_vfiprintf_r+0xe2>
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	1d19      	adds	r1, r3, #4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	9103      	str	r1, [sp, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bfbb      	ittet	lt
 80044b8:	425b      	neglt	r3, r3
 80044ba:	f042 0202 	orrlt.w	r2, r2, #2
 80044be:	9307      	strge	r3, [sp, #28]
 80044c0:	9307      	strlt	r3, [sp, #28]
 80044c2:	bfb8      	it	lt
 80044c4:	9204      	strlt	r2, [sp, #16]
 80044c6:	7823      	ldrb	r3, [r4, #0]
 80044c8:	2b2e      	cmp	r3, #46	; 0x2e
 80044ca:	d10c      	bne.n	80044e6 <_vfiprintf_r+0x176>
 80044cc:	7863      	ldrb	r3, [r4, #1]
 80044ce:	2b2a      	cmp	r3, #42	; 0x2a
 80044d0:	d135      	bne.n	800453e <_vfiprintf_r+0x1ce>
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	9203      	str	r2, [sp, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bfb8      	it	lt
 80044de:	f04f 33ff 	movlt.w	r3, #4294967295
 80044e2:	3402      	adds	r4, #2
 80044e4:	9305      	str	r3, [sp, #20]
 80044e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80045cc <_vfiprintf_r+0x25c>
 80044ea:	7821      	ldrb	r1, [r4, #0]
 80044ec:	2203      	movs	r2, #3
 80044ee:	4650      	mov	r0, sl
 80044f0:	f7fb fe76 	bl	80001e0 <memchr>
 80044f4:	b140      	cbz	r0, 8004508 <_vfiprintf_r+0x198>
 80044f6:	2340      	movs	r3, #64	; 0x40
 80044f8:	eba0 000a 	sub.w	r0, r0, sl
 80044fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004500:	9b04      	ldr	r3, [sp, #16]
 8004502:	4303      	orrs	r3, r0
 8004504:	3401      	adds	r4, #1
 8004506:	9304      	str	r3, [sp, #16]
 8004508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800450c:	482c      	ldr	r0, [pc, #176]	; (80045c0 <_vfiprintf_r+0x250>)
 800450e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004512:	2206      	movs	r2, #6
 8004514:	f7fb fe64 	bl	80001e0 <memchr>
 8004518:	2800      	cmp	r0, #0
 800451a:	d03f      	beq.n	800459c <_vfiprintf_r+0x22c>
 800451c:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <_vfiprintf_r+0x254>)
 800451e:	bb1b      	cbnz	r3, 8004568 <_vfiprintf_r+0x1f8>
 8004520:	9b03      	ldr	r3, [sp, #12]
 8004522:	3307      	adds	r3, #7
 8004524:	f023 0307 	bic.w	r3, r3, #7
 8004528:	3308      	adds	r3, #8
 800452a:	9303      	str	r3, [sp, #12]
 800452c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800452e:	443b      	add	r3, r7
 8004530:	9309      	str	r3, [sp, #36]	; 0x24
 8004532:	e767      	b.n	8004404 <_vfiprintf_r+0x94>
 8004534:	fb0c 3202 	mla	r2, ip, r2, r3
 8004538:	460c      	mov	r4, r1
 800453a:	2001      	movs	r0, #1
 800453c:	e7a5      	b.n	800448a <_vfiprintf_r+0x11a>
 800453e:	2300      	movs	r3, #0
 8004540:	3401      	adds	r4, #1
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	4619      	mov	r1, r3
 8004546:	f04f 0c0a 	mov.w	ip, #10
 800454a:	4620      	mov	r0, r4
 800454c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004550:	3a30      	subs	r2, #48	; 0x30
 8004552:	2a09      	cmp	r2, #9
 8004554:	d903      	bls.n	800455e <_vfiprintf_r+0x1ee>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0c5      	beq.n	80044e6 <_vfiprintf_r+0x176>
 800455a:	9105      	str	r1, [sp, #20]
 800455c:	e7c3      	b.n	80044e6 <_vfiprintf_r+0x176>
 800455e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004562:	4604      	mov	r4, r0
 8004564:	2301      	movs	r3, #1
 8004566:	e7f0      	b.n	800454a <_vfiprintf_r+0x1da>
 8004568:	ab03      	add	r3, sp, #12
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	462a      	mov	r2, r5
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <_vfiprintf_r+0x258>)
 8004570:	a904      	add	r1, sp, #16
 8004572:	4630      	mov	r0, r6
 8004574:	f3af 8000 	nop.w
 8004578:	4607      	mov	r7, r0
 800457a:	1c78      	adds	r0, r7, #1
 800457c:	d1d6      	bne.n	800452c <_vfiprintf_r+0x1bc>
 800457e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004580:	07d9      	lsls	r1, r3, #31
 8004582:	d405      	bmi.n	8004590 <_vfiprintf_r+0x220>
 8004584:	89ab      	ldrh	r3, [r5, #12]
 8004586:	059a      	lsls	r2, r3, #22
 8004588:	d402      	bmi.n	8004590 <_vfiprintf_r+0x220>
 800458a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800458c:	f7ff fe6b 	bl	8004266 <__retarget_lock_release_recursive>
 8004590:	89ab      	ldrh	r3, [r5, #12]
 8004592:	065b      	lsls	r3, r3, #25
 8004594:	f53f af12 	bmi.w	80043bc <_vfiprintf_r+0x4c>
 8004598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800459a:	e711      	b.n	80043c0 <_vfiprintf_r+0x50>
 800459c:	ab03      	add	r3, sp, #12
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	462a      	mov	r2, r5
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <_vfiprintf_r+0x258>)
 80045a4:	a904      	add	r1, sp, #16
 80045a6:	4630      	mov	r0, r6
 80045a8:	f000 f880 	bl	80046ac <_printf_i>
 80045ac:	e7e4      	b.n	8004578 <_vfiprintf_r+0x208>
 80045ae:	bf00      	nop
 80045b0:	08005a2c 	.word	0x08005a2c
 80045b4:	08005a4c 	.word	0x08005a4c
 80045b8:	08005a0c 	.word	0x08005a0c
 80045bc:	08005a6c 	.word	0x08005a6c
 80045c0:	08005a76 	.word	0x08005a76
 80045c4:	00000000 	.word	0x00000000
 80045c8:	0800434b 	.word	0x0800434b
 80045cc:	08005a72 	.word	0x08005a72

080045d0 <_printf_common>:
 80045d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d4:	4616      	mov	r6, r2
 80045d6:	4699      	mov	r9, r3
 80045d8:	688a      	ldr	r2, [r1, #8]
 80045da:	690b      	ldr	r3, [r1, #16]
 80045dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bfb8      	it	lt
 80045e4:	4613      	movlt	r3, r2
 80045e6:	6033      	str	r3, [r6, #0]
 80045e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ec:	4607      	mov	r7, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	b10a      	cbz	r2, 80045f6 <_printf_common+0x26>
 80045f2:	3301      	adds	r3, #1
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	0699      	lsls	r1, r3, #26
 80045fa:	bf42      	ittt	mi
 80045fc:	6833      	ldrmi	r3, [r6, #0]
 80045fe:	3302      	addmi	r3, #2
 8004600:	6033      	strmi	r3, [r6, #0]
 8004602:	6825      	ldr	r5, [r4, #0]
 8004604:	f015 0506 	ands.w	r5, r5, #6
 8004608:	d106      	bne.n	8004618 <_printf_common+0x48>
 800460a:	f104 0a19 	add.w	sl, r4, #25
 800460e:	68e3      	ldr	r3, [r4, #12]
 8004610:	6832      	ldr	r2, [r6, #0]
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	42ab      	cmp	r3, r5
 8004616:	dc26      	bgt.n	8004666 <_printf_common+0x96>
 8004618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800461c:	1e13      	subs	r3, r2, #0
 800461e:	6822      	ldr	r2, [r4, #0]
 8004620:	bf18      	it	ne
 8004622:	2301      	movne	r3, #1
 8004624:	0692      	lsls	r2, r2, #26
 8004626:	d42b      	bmi.n	8004680 <_printf_common+0xb0>
 8004628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800462c:	4649      	mov	r1, r9
 800462e:	4638      	mov	r0, r7
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d01e      	beq.n	8004674 <_printf_common+0xa4>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	68e5      	ldr	r5, [r4, #12]
 800463a:	6832      	ldr	r2, [r6, #0]
 800463c:	f003 0306 	and.w	r3, r3, #6
 8004640:	2b04      	cmp	r3, #4
 8004642:	bf08      	it	eq
 8004644:	1aad      	subeq	r5, r5, r2
 8004646:	68a3      	ldr	r3, [r4, #8]
 8004648:	6922      	ldr	r2, [r4, #16]
 800464a:	bf0c      	ite	eq
 800464c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004650:	2500      	movne	r5, #0
 8004652:	4293      	cmp	r3, r2
 8004654:	bfc4      	itt	gt
 8004656:	1a9b      	subgt	r3, r3, r2
 8004658:	18ed      	addgt	r5, r5, r3
 800465a:	2600      	movs	r6, #0
 800465c:	341a      	adds	r4, #26
 800465e:	42b5      	cmp	r5, r6
 8004660:	d11a      	bne.n	8004698 <_printf_common+0xc8>
 8004662:	2000      	movs	r0, #0
 8004664:	e008      	b.n	8004678 <_printf_common+0xa8>
 8004666:	2301      	movs	r3, #1
 8004668:	4652      	mov	r2, sl
 800466a:	4649      	mov	r1, r9
 800466c:	4638      	mov	r0, r7
 800466e:	47c0      	blx	r8
 8004670:	3001      	adds	r0, #1
 8004672:	d103      	bne.n	800467c <_printf_common+0xac>
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467c:	3501      	adds	r5, #1
 800467e:	e7c6      	b.n	800460e <_printf_common+0x3e>
 8004680:	18e1      	adds	r1, r4, r3
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	2030      	movs	r0, #48	; 0x30
 8004686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800468a:	4422      	add	r2, r4
 800468c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004694:	3302      	adds	r3, #2
 8004696:	e7c7      	b.n	8004628 <_printf_common+0x58>
 8004698:	2301      	movs	r3, #1
 800469a:	4622      	mov	r2, r4
 800469c:	4649      	mov	r1, r9
 800469e:	4638      	mov	r0, r7
 80046a0:	47c0      	blx	r8
 80046a2:	3001      	adds	r0, #1
 80046a4:	d0e6      	beq.n	8004674 <_printf_common+0xa4>
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7d9      	b.n	800465e <_printf_common+0x8e>
	...

080046ac <_printf_i>:
 80046ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	460c      	mov	r4, r1
 80046b2:	4691      	mov	r9, r2
 80046b4:	7e27      	ldrb	r7, [r4, #24]
 80046b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046b8:	2f78      	cmp	r7, #120	; 0x78
 80046ba:	4680      	mov	r8, r0
 80046bc:	469a      	mov	sl, r3
 80046be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046c2:	d807      	bhi.n	80046d4 <_printf_i+0x28>
 80046c4:	2f62      	cmp	r7, #98	; 0x62
 80046c6:	d80a      	bhi.n	80046de <_printf_i+0x32>
 80046c8:	2f00      	cmp	r7, #0
 80046ca:	f000 80d8 	beq.w	800487e <_printf_i+0x1d2>
 80046ce:	2f58      	cmp	r7, #88	; 0x58
 80046d0:	f000 80a3 	beq.w	800481a <_printf_i+0x16e>
 80046d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046dc:	e03a      	b.n	8004754 <_printf_i+0xa8>
 80046de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046e2:	2b15      	cmp	r3, #21
 80046e4:	d8f6      	bhi.n	80046d4 <_printf_i+0x28>
 80046e6:	a001      	add	r0, pc, #4	; (adr r0, 80046ec <_printf_i+0x40>)
 80046e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046ec:	08004745 	.word	0x08004745
 80046f0:	08004759 	.word	0x08004759
 80046f4:	080046d5 	.word	0x080046d5
 80046f8:	080046d5 	.word	0x080046d5
 80046fc:	080046d5 	.word	0x080046d5
 8004700:	080046d5 	.word	0x080046d5
 8004704:	08004759 	.word	0x08004759
 8004708:	080046d5 	.word	0x080046d5
 800470c:	080046d5 	.word	0x080046d5
 8004710:	080046d5 	.word	0x080046d5
 8004714:	080046d5 	.word	0x080046d5
 8004718:	08004865 	.word	0x08004865
 800471c:	08004789 	.word	0x08004789
 8004720:	08004847 	.word	0x08004847
 8004724:	080046d5 	.word	0x080046d5
 8004728:	080046d5 	.word	0x080046d5
 800472c:	08004887 	.word	0x08004887
 8004730:	080046d5 	.word	0x080046d5
 8004734:	08004789 	.word	0x08004789
 8004738:	080046d5 	.word	0x080046d5
 800473c:	080046d5 	.word	0x080046d5
 8004740:	0800484f 	.word	0x0800484f
 8004744:	680b      	ldr	r3, [r1, #0]
 8004746:	1d1a      	adds	r2, r3, #4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	600a      	str	r2, [r1, #0]
 800474c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004754:	2301      	movs	r3, #1
 8004756:	e0a3      	b.n	80048a0 <_printf_i+0x1f4>
 8004758:	6825      	ldr	r5, [r4, #0]
 800475a:	6808      	ldr	r0, [r1, #0]
 800475c:	062e      	lsls	r6, r5, #24
 800475e:	f100 0304 	add.w	r3, r0, #4
 8004762:	d50a      	bpl.n	800477a <_printf_i+0xce>
 8004764:	6805      	ldr	r5, [r0, #0]
 8004766:	600b      	str	r3, [r1, #0]
 8004768:	2d00      	cmp	r5, #0
 800476a:	da03      	bge.n	8004774 <_printf_i+0xc8>
 800476c:	232d      	movs	r3, #45	; 0x2d
 800476e:	426d      	negs	r5, r5
 8004770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004774:	485e      	ldr	r0, [pc, #376]	; (80048f0 <_printf_i+0x244>)
 8004776:	230a      	movs	r3, #10
 8004778:	e019      	b.n	80047ae <_printf_i+0x102>
 800477a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800477e:	6805      	ldr	r5, [r0, #0]
 8004780:	600b      	str	r3, [r1, #0]
 8004782:	bf18      	it	ne
 8004784:	b22d      	sxthne	r5, r5
 8004786:	e7ef      	b.n	8004768 <_printf_i+0xbc>
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	6825      	ldr	r5, [r4, #0]
 800478c:	1d18      	adds	r0, r3, #4
 800478e:	6008      	str	r0, [r1, #0]
 8004790:	0628      	lsls	r0, r5, #24
 8004792:	d501      	bpl.n	8004798 <_printf_i+0xec>
 8004794:	681d      	ldr	r5, [r3, #0]
 8004796:	e002      	b.n	800479e <_printf_i+0xf2>
 8004798:	0669      	lsls	r1, r5, #25
 800479a:	d5fb      	bpl.n	8004794 <_printf_i+0xe8>
 800479c:	881d      	ldrh	r5, [r3, #0]
 800479e:	4854      	ldr	r0, [pc, #336]	; (80048f0 <_printf_i+0x244>)
 80047a0:	2f6f      	cmp	r7, #111	; 0x6f
 80047a2:	bf0c      	ite	eq
 80047a4:	2308      	moveq	r3, #8
 80047a6:	230a      	movne	r3, #10
 80047a8:	2100      	movs	r1, #0
 80047aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ae:	6866      	ldr	r6, [r4, #4]
 80047b0:	60a6      	str	r6, [r4, #8]
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	bfa2      	ittt	ge
 80047b6:	6821      	ldrge	r1, [r4, #0]
 80047b8:	f021 0104 	bicge.w	r1, r1, #4
 80047bc:	6021      	strge	r1, [r4, #0]
 80047be:	b90d      	cbnz	r5, 80047c4 <_printf_i+0x118>
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	d04d      	beq.n	8004860 <_printf_i+0x1b4>
 80047c4:	4616      	mov	r6, r2
 80047c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ca:	fb03 5711 	mls	r7, r3, r1, r5
 80047ce:	5dc7      	ldrb	r7, [r0, r7]
 80047d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047d4:	462f      	mov	r7, r5
 80047d6:	42bb      	cmp	r3, r7
 80047d8:	460d      	mov	r5, r1
 80047da:	d9f4      	bls.n	80047c6 <_printf_i+0x11a>
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <_printf_i+0x14c>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	07df      	lsls	r7, r3, #31
 80047e4:	d508      	bpl.n	80047f8 <_printf_i+0x14c>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	6861      	ldr	r1, [r4, #4]
 80047ea:	4299      	cmp	r1, r3
 80047ec:	bfde      	ittt	le
 80047ee:	2330      	movle	r3, #48	; 0x30
 80047f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047f8:	1b92      	subs	r2, r2, r6
 80047fa:	6122      	str	r2, [r4, #16]
 80047fc:	f8cd a000 	str.w	sl, [sp]
 8004800:	464b      	mov	r3, r9
 8004802:	aa03      	add	r2, sp, #12
 8004804:	4621      	mov	r1, r4
 8004806:	4640      	mov	r0, r8
 8004808:	f7ff fee2 	bl	80045d0 <_printf_common>
 800480c:	3001      	adds	r0, #1
 800480e:	d14c      	bne.n	80048aa <_printf_i+0x1fe>
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	b004      	add	sp, #16
 8004816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481a:	4835      	ldr	r0, [pc, #212]	; (80048f0 <_printf_i+0x244>)
 800481c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	680e      	ldr	r6, [r1, #0]
 8004824:	061f      	lsls	r7, r3, #24
 8004826:	f856 5b04 	ldr.w	r5, [r6], #4
 800482a:	600e      	str	r6, [r1, #0]
 800482c:	d514      	bpl.n	8004858 <_printf_i+0x1ac>
 800482e:	07d9      	lsls	r1, r3, #31
 8004830:	bf44      	itt	mi
 8004832:	f043 0320 	orrmi.w	r3, r3, #32
 8004836:	6023      	strmi	r3, [r4, #0]
 8004838:	b91d      	cbnz	r5, 8004842 <_printf_i+0x196>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f023 0320 	bic.w	r3, r3, #32
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	2310      	movs	r3, #16
 8004844:	e7b0      	b.n	80047a8 <_printf_i+0xfc>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f043 0320 	orr.w	r3, r3, #32
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	2378      	movs	r3, #120	; 0x78
 8004850:	4828      	ldr	r0, [pc, #160]	; (80048f4 <_printf_i+0x248>)
 8004852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004856:	e7e3      	b.n	8004820 <_printf_i+0x174>
 8004858:	065e      	lsls	r6, r3, #25
 800485a:	bf48      	it	mi
 800485c:	b2ad      	uxthmi	r5, r5
 800485e:	e7e6      	b.n	800482e <_printf_i+0x182>
 8004860:	4616      	mov	r6, r2
 8004862:	e7bb      	b.n	80047dc <_printf_i+0x130>
 8004864:	680b      	ldr	r3, [r1, #0]
 8004866:	6826      	ldr	r6, [r4, #0]
 8004868:	6960      	ldr	r0, [r4, #20]
 800486a:	1d1d      	adds	r5, r3, #4
 800486c:	600d      	str	r5, [r1, #0]
 800486e:	0635      	lsls	r5, r6, #24
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	d501      	bpl.n	8004878 <_printf_i+0x1cc>
 8004874:	6018      	str	r0, [r3, #0]
 8004876:	e002      	b.n	800487e <_printf_i+0x1d2>
 8004878:	0671      	lsls	r1, r6, #25
 800487a:	d5fb      	bpl.n	8004874 <_printf_i+0x1c8>
 800487c:	8018      	strh	r0, [r3, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	6123      	str	r3, [r4, #16]
 8004882:	4616      	mov	r6, r2
 8004884:	e7ba      	b.n	80047fc <_printf_i+0x150>
 8004886:	680b      	ldr	r3, [r1, #0]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	600a      	str	r2, [r1, #0]
 800488c:	681e      	ldr	r6, [r3, #0]
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	2100      	movs	r1, #0
 8004892:	4630      	mov	r0, r6
 8004894:	f7fb fca4 	bl	80001e0 <memchr>
 8004898:	b108      	cbz	r0, 800489e <_printf_i+0x1f2>
 800489a:	1b80      	subs	r0, r0, r6
 800489c:	6060      	str	r0, [r4, #4]
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	6123      	str	r3, [r4, #16]
 80048a2:	2300      	movs	r3, #0
 80048a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a8:	e7a8      	b.n	80047fc <_printf_i+0x150>
 80048aa:	6923      	ldr	r3, [r4, #16]
 80048ac:	4632      	mov	r2, r6
 80048ae:	4649      	mov	r1, r9
 80048b0:	4640      	mov	r0, r8
 80048b2:	47d0      	blx	sl
 80048b4:	3001      	adds	r0, #1
 80048b6:	d0ab      	beq.n	8004810 <_printf_i+0x164>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	079b      	lsls	r3, r3, #30
 80048bc:	d413      	bmi.n	80048e6 <_printf_i+0x23a>
 80048be:	68e0      	ldr	r0, [r4, #12]
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	4298      	cmp	r0, r3
 80048c4:	bfb8      	it	lt
 80048c6:	4618      	movlt	r0, r3
 80048c8:	e7a4      	b.n	8004814 <_printf_i+0x168>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4632      	mov	r2, r6
 80048ce:	4649      	mov	r1, r9
 80048d0:	4640      	mov	r0, r8
 80048d2:	47d0      	blx	sl
 80048d4:	3001      	adds	r0, #1
 80048d6:	d09b      	beq.n	8004810 <_printf_i+0x164>
 80048d8:	3501      	adds	r5, #1
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	9903      	ldr	r1, [sp, #12]
 80048de:	1a5b      	subs	r3, r3, r1
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	dcf2      	bgt.n	80048ca <_printf_i+0x21e>
 80048e4:	e7eb      	b.n	80048be <_printf_i+0x212>
 80048e6:	2500      	movs	r5, #0
 80048e8:	f104 0619 	add.w	r6, r4, #25
 80048ec:	e7f5      	b.n	80048da <_printf_i+0x22e>
 80048ee:	bf00      	nop
 80048f0:	08005a7d 	.word	0x08005a7d
 80048f4:	08005a8e 	.word	0x08005a8e

080048f8 <_sbrk_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4d06      	ldr	r5, [pc, #24]	; (8004914 <_sbrk_r+0x1c>)
 80048fc:	2300      	movs	r3, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	f7fc fba6 	bl	8001054 <_sbrk>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_sbrk_r+0x1a>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_sbrk_r+0x1a>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20000218 	.word	0x20000218

08004918 <__sread>:
 8004918:	b510      	push	{r4, lr}
 800491a:	460c      	mov	r4, r1
 800491c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004920:	f000 fab4 	bl	8004e8c <_read_r>
 8004924:	2800      	cmp	r0, #0
 8004926:	bfab      	itete	ge
 8004928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800492a:	89a3      	ldrhlt	r3, [r4, #12]
 800492c:	181b      	addge	r3, r3, r0
 800492e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004932:	bfac      	ite	ge
 8004934:	6563      	strge	r3, [r4, #84]	; 0x54
 8004936:	81a3      	strhlt	r3, [r4, #12]
 8004938:	bd10      	pop	{r4, pc}

0800493a <__swrite>:
 800493a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493e:	461f      	mov	r7, r3
 8004940:	898b      	ldrh	r3, [r1, #12]
 8004942:	05db      	lsls	r3, r3, #23
 8004944:	4605      	mov	r5, r0
 8004946:	460c      	mov	r4, r1
 8004948:	4616      	mov	r6, r2
 800494a:	d505      	bpl.n	8004958 <__swrite+0x1e>
 800494c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004950:	2302      	movs	r3, #2
 8004952:	2200      	movs	r2, #0
 8004954:	f000 f9c8 	bl	8004ce8 <_lseek_r>
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800495e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004962:	81a3      	strh	r3, [r4, #12]
 8004964:	4632      	mov	r2, r6
 8004966:	463b      	mov	r3, r7
 8004968:	4628      	mov	r0, r5
 800496a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800496e:	f000 b869 	b.w	8004a44 <_write_r>

08004972 <__sseek>:
 8004972:	b510      	push	{r4, lr}
 8004974:	460c      	mov	r4, r1
 8004976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497a:	f000 f9b5 	bl	8004ce8 <_lseek_r>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	bf15      	itete	ne
 8004984:	6560      	strne	r0, [r4, #84]	; 0x54
 8004986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800498a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800498e:	81a3      	strheq	r3, [r4, #12]
 8004990:	bf18      	it	ne
 8004992:	81a3      	strhne	r3, [r4, #12]
 8004994:	bd10      	pop	{r4, pc}

08004996 <__sclose>:
 8004996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499a:	f000 b8d3 	b.w	8004b44 <_close_r>
	...

080049a0 <__swbuf_r>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	460e      	mov	r6, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	4605      	mov	r5, r0
 80049a8:	b118      	cbz	r0, 80049b2 <__swbuf_r+0x12>
 80049aa:	6983      	ldr	r3, [r0, #24]
 80049ac:	b90b      	cbnz	r3, 80049b2 <__swbuf_r+0x12>
 80049ae:	f7ff fbbb 	bl	8004128 <__sinit>
 80049b2:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <__swbuf_r+0x98>)
 80049b4:	429c      	cmp	r4, r3
 80049b6:	d12b      	bne.n	8004a10 <__swbuf_r+0x70>
 80049b8:	686c      	ldr	r4, [r5, #4]
 80049ba:	69a3      	ldr	r3, [r4, #24]
 80049bc:	60a3      	str	r3, [r4, #8]
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	071a      	lsls	r2, r3, #28
 80049c2:	d52f      	bpl.n	8004a24 <__swbuf_r+0x84>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	b36b      	cbz	r3, 8004a24 <__swbuf_r+0x84>
 80049c8:	6923      	ldr	r3, [r4, #16]
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	1ac0      	subs	r0, r0, r3
 80049ce:	6963      	ldr	r3, [r4, #20]
 80049d0:	b2f6      	uxtb	r6, r6
 80049d2:	4283      	cmp	r3, r0
 80049d4:	4637      	mov	r7, r6
 80049d6:	dc04      	bgt.n	80049e2 <__swbuf_r+0x42>
 80049d8:	4621      	mov	r1, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 f948 	bl	8004c70 <_fflush_r>
 80049e0:	bb30      	cbnz	r0, 8004a30 <__swbuf_r+0x90>
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	60a3      	str	r3, [r4, #8]
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	6022      	str	r2, [r4, #0]
 80049ee:	701e      	strb	r6, [r3, #0]
 80049f0:	6963      	ldr	r3, [r4, #20]
 80049f2:	3001      	adds	r0, #1
 80049f4:	4283      	cmp	r3, r0
 80049f6:	d004      	beq.n	8004a02 <__swbuf_r+0x62>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	07db      	lsls	r3, r3, #31
 80049fc:	d506      	bpl.n	8004a0c <__swbuf_r+0x6c>
 80049fe:	2e0a      	cmp	r6, #10
 8004a00:	d104      	bne.n	8004a0c <__swbuf_r+0x6c>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 f933 	bl	8004c70 <_fflush_r>
 8004a0a:	b988      	cbnz	r0, 8004a30 <__swbuf_r+0x90>
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <__swbuf_r+0x9c>)
 8004a12:	429c      	cmp	r4, r3
 8004a14:	d101      	bne.n	8004a1a <__swbuf_r+0x7a>
 8004a16:	68ac      	ldr	r4, [r5, #8]
 8004a18:	e7cf      	b.n	80049ba <__swbuf_r+0x1a>
 8004a1a:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <__swbuf_r+0xa0>)
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	bf08      	it	eq
 8004a20:	68ec      	ldreq	r4, [r5, #12]
 8004a22:	e7ca      	b.n	80049ba <__swbuf_r+0x1a>
 8004a24:	4621      	mov	r1, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 f81e 	bl	8004a68 <__swsetup_r>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d0cb      	beq.n	80049c8 <__swbuf_r+0x28>
 8004a30:	f04f 37ff 	mov.w	r7, #4294967295
 8004a34:	e7ea      	b.n	8004a0c <__swbuf_r+0x6c>
 8004a36:	bf00      	nop
 8004a38:	08005a2c 	.word	0x08005a2c
 8004a3c:	08005a4c 	.word	0x08005a4c
 8004a40:	08005a0c 	.word	0x08005a0c

08004a44 <_write_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4d07      	ldr	r5, [pc, #28]	; (8004a64 <_write_r+0x20>)
 8004a48:	4604      	mov	r4, r0
 8004a4a:	4608      	mov	r0, r1
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	2200      	movs	r2, #0
 8004a50:	602a      	str	r2, [r5, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f7fc faad 	bl	8000fb2 <_write>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_write_r+0x1e>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_write_r+0x1e>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	20000218 	.word	0x20000218

08004a68 <__swsetup_r>:
 8004a68:	4b32      	ldr	r3, [pc, #200]	; (8004b34 <__swsetup_r+0xcc>)
 8004a6a:	b570      	push	{r4, r5, r6, lr}
 8004a6c:	681d      	ldr	r5, [r3, #0]
 8004a6e:	4606      	mov	r6, r0
 8004a70:	460c      	mov	r4, r1
 8004a72:	b125      	cbz	r5, 8004a7e <__swsetup_r+0x16>
 8004a74:	69ab      	ldr	r3, [r5, #24]
 8004a76:	b913      	cbnz	r3, 8004a7e <__swsetup_r+0x16>
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff fb55 	bl	8004128 <__sinit>
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <__swsetup_r+0xd0>)
 8004a80:	429c      	cmp	r4, r3
 8004a82:	d10f      	bne.n	8004aa4 <__swsetup_r+0x3c>
 8004a84:	686c      	ldr	r4, [r5, #4]
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a8c:	0719      	lsls	r1, r3, #28
 8004a8e:	d42c      	bmi.n	8004aea <__swsetup_r+0x82>
 8004a90:	06dd      	lsls	r5, r3, #27
 8004a92:	d411      	bmi.n	8004ab8 <__swsetup_r+0x50>
 8004a94:	2309      	movs	r3, #9
 8004a96:	6033      	str	r3, [r6, #0]
 8004a98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	e03e      	b.n	8004b22 <__swsetup_r+0xba>
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <__swsetup_r+0xd4>)
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d101      	bne.n	8004aae <__swsetup_r+0x46>
 8004aaa:	68ac      	ldr	r4, [r5, #8]
 8004aac:	e7eb      	b.n	8004a86 <__swsetup_r+0x1e>
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <__swsetup_r+0xd8>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	bf08      	it	eq
 8004ab4:	68ec      	ldreq	r4, [r5, #12]
 8004ab6:	e7e6      	b.n	8004a86 <__swsetup_r+0x1e>
 8004ab8:	0758      	lsls	r0, r3, #29
 8004aba:	d512      	bpl.n	8004ae2 <__swsetup_r+0x7a>
 8004abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004abe:	b141      	cbz	r1, 8004ad2 <__swsetup_r+0x6a>
 8004ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d002      	beq.n	8004ace <__swsetup_r+0x66>
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f98f 	bl	8004dec <_free_r>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	6063      	str	r3, [r4, #4]
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	f043 0308 	orr.w	r3, r3, #8
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	b94b      	cbnz	r3, 8004b02 <__swsetup_r+0x9a>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af8:	d003      	beq.n	8004b02 <__swsetup_r+0x9a>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 f929 	bl	8004d54 <__smakebuf_r>
 8004b02:	89a0      	ldrh	r0, [r4, #12]
 8004b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b08:	f010 0301 	ands.w	r3, r0, #1
 8004b0c:	d00a      	beq.n	8004b24 <__swsetup_r+0xbc>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60a3      	str	r3, [r4, #8]
 8004b12:	6963      	ldr	r3, [r4, #20]
 8004b14:	425b      	negs	r3, r3
 8004b16:	61a3      	str	r3, [r4, #24]
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	b943      	cbnz	r3, 8004b2e <__swsetup_r+0xc6>
 8004b1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b20:	d1ba      	bne.n	8004a98 <__swsetup_r+0x30>
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	0781      	lsls	r1, r0, #30
 8004b26:	bf58      	it	pl
 8004b28:	6963      	ldrpl	r3, [r4, #20]
 8004b2a:	60a3      	str	r3, [r4, #8]
 8004b2c:	e7f4      	b.n	8004b18 <__swsetup_r+0xb0>
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e7f7      	b.n	8004b22 <__swsetup_r+0xba>
 8004b32:	bf00      	nop
 8004b34:	2000002c 	.word	0x2000002c
 8004b38:	08005a2c 	.word	0x08005a2c
 8004b3c:	08005a4c 	.word	0x08005a4c
 8004b40:	08005a0c 	.word	0x08005a0c

08004b44 <_close_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d06      	ldr	r5, [pc, #24]	; (8004b60 <_close_r+0x1c>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fc fa4b 	bl	8000fea <_close>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_close_r+0x1a>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_close_r+0x1a>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000218 	.word	0x20000218

08004b64 <__sflush_r>:
 8004b64:	898a      	ldrh	r2, [r1, #12]
 8004b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	0710      	lsls	r0, r2, #28
 8004b6e:	460c      	mov	r4, r1
 8004b70:	d458      	bmi.n	8004c24 <__sflush_r+0xc0>
 8004b72:	684b      	ldr	r3, [r1, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	dc05      	bgt.n	8004b84 <__sflush_r+0x20>
 8004b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	dc02      	bgt.n	8004b84 <__sflush_r+0x20>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	d0f9      	beq.n	8004b7e <__sflush_r+0x1a>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b90:	682f      	ldr	r7, [r5, #0]
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	d032      	beq.n	8004bfc <__sflush_r+0x98>
 8004b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	075a      	lsls	r2, r3, #29
 8004b9c:	d505      	bpl.n	8004baa <__sflush_r+0x46>
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	1ac0      	subs	r0, r0, r3
 8004ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ba4:	b10b      	cbz	r3, 8004baa <__sflush_r+0x46>
 8004ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ba8:	1ac0      	subs	r0, r0, r3
 8004baa:	2300      	movs	r3, #0
 8004bac:	4602      	mov	r2, r0
 8004bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bb0:	6a21      	ldr	r1, [r4, #32]
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	47b0      	blx	r6
 8004bb6:	1c43      	adds	r3, r0, #1
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	d106      	bne.n	8004bca <__sflush_r+0x66>
 8004bbc:	6829      	ldr	r1, [r5, #0]
 8004bbe:	291d      	cmp	r1, #29
 8004bc0:	d82c      	bhi.n	8004c1c <__sflush_r+0xb8>
 8004bc2:	4a2a      	ldr	r2, [pc, #168]	; (8004c6c <__sflush_r+0x108>)
 8004bc4:	40ca      	lsrs	r2, r1
 8004bc6:	07d6      	lsls	r6, r2, #31
 8004bc8:	d528      	bpl.n	8004c1c <__sflush_r+0xb8>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	6062      	str	r2, [r4, #4]
 8004bce:	04d9      	lsls	r1, r3, #19
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	6022      	str	r2, [r4, #0]
 8004bd4:	d504      	bpl.n	8004be0 <__sflush_r+0x7c>
 8004bd6:	1c42      	adds	r2, r0, #1
 8004bd8:	d101      	bne.n	8004bde <__sflush_r+0x7a>
 8004bda:	682b      	ldr	r3, [r5, #0]
 8004bdc:	b903      	cbnz	r3, 8004be0 <__sflush_r+0x7c>
 8004bde:	6560      	str	r0, [r4, #84]	; 0x54
 8004be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004be2:	602f      	str	r7, [r5, #0]
 8004be4:	2900      	cmp	r1, #0
 8004be6:	d0ca      	beq.n	8004b7e <__sflush_r+0x1a>
 8004be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bec:	4299      	cmp	r1, r3
 8004bee:	d002      	beq.n	8004bf6 <__sflush_r+0x92>
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 f8fb 	bl	8004dec <_free_r>
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8004bfa:	e7c1      	b.n	8004b80 <__sflush_r+0x1c>
 8004bfc:	6a21      	ldr	r1, [r4, #32]
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b0      	blx	r6
 8004c04:	1c41      	adds	r1, r0, #1
 8004c06:	d1c7      	bne.n	8004b98 <__sflush_r+0x34>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0c4      	beq.n	8004b98 <__sflush_r+0x34>
 8004c0e:	2b1d      	cmp	r3, #29
 8004c10:	d001      	beq.n	8004c16 <__sflush_r+0xb2>
 8004c12:	2b16      	cmp	r3, #22
 8004c14:	d101      	bne.n	8004c1a <__sflush_r+0xb6>
 8004c16:	602f      	str	r7, [r5, #0]
 8004c18:	e7b1      	b.n	8004b7e <__sflush_r+0x1a>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	e7ad      	b.n	8004b80 <__sflush_r+0x1c>
 8004c24:	690f      	ldr	r7, [r1, #16]
 8004c26:	2f00      	cmp	r7, #0
 8004c28:	d0a9      	beq.n	8004b7e <__sflush_r+0x1a>
 8004c2a:	0793      	lsls	r3, r2, #30
 8004c2c:	680e      	ldr	r6, [r1, #0]
 8004c2e:	bf08      	it	eq
 8004c30:	694b      	ldreq	r3, [r1, #20]
 8004c32:	600f      	str	r7, [r1, #0]
 8004c34:	bf18      	it	ne
 8004c36:	2300      	movne	r3, #0
 8004c38:	eba6 0807 	sub.w	r8, r6, r7
 8004c3c:	608b      	str	r3, [r1, #8]
 8004c3e:	f1b8 0f00 	cmp.w	r8, #0
 8004c42:	dd9c      	ble.n	8004b7e <__sflush_r+0x1a>
 8004c44:	6a21      	ldr	r1, [r4, #32]
 8004c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c48:	4643      	mov	r3, r8
 8004c4a:	463a      	mov	r2, r7
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b0      	blx	r6
 8004c50:	2800      	cmp	r0, #0
 8004c52:	dc06      	bgt.n	8004c62 <__sflush_r+0xfe>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	e78e      	b.n	8004b80 <__sflush_r+0x1c>
 8004c62:	4407      	add	r7, r0
 8004c64:	eba8 0800 	sub.w	r8, r8, r0
 8004c68:	e7e9      	b.n	8004c3e <__sflush_r+0xda>
 8004c6a:	bf00      	nop
 8004c6c:	20400001 	.word	0x20400001

08004c70 <_fflush_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	690b      	ldr	r3, [r1, #16]
 8004c74:	4605      	mov	r5, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	b913      	cbnz	r3, 8004c80 <_fflush_r+0x10>
 8004c7a:	2500      	movs	r5, #0
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	b118      	cbz	r0, 8004c8a <_fflush_r+0x1a>
 8004c82:	6983      	ldr	r3, [r0, #24]
 8004c84:	b90b      	cbnz	r3, 8004c8a <_fflush_r+0x1a>
 8004c86:	f7ff fa4f 	bl	8004128 <__sinit>
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <_fflush_r+0x6c>)
 8004c8c:	429c      	cmp	r4, r3
 8004c8e:	d11b      	bne.n	8004cc8 <_fflush_r+0x58>
 8004c90:	686c      	ldr	r4, [r5, #4]
 8004c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ef      	beq.n	8004c7a <_fflush_r+0xa>
 8004c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c9c:	07d0      	lsls	r0, r2, #31
 8004c9e:	d404      	bmi.n	8004caa <_fflush_r+0x3a>
 8004ca0:	0599      	lsls	r1, r3, #22
 8004ca2:	d402      	bmi.n	8004caa <_fflush_r+0x3a>
 8004ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca6:	f7ff fadd 	bl	8004264 <__retarget_lock_acquire_recursive>
 8004caa:	4628      	mov	r0, r5
 8004cac:	4621      	mov	r1, r4
 8004cae:	f7ff ff59 	bl	8004b64 <__sflush_r>
 8004cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cb4:	07da      	lsls	r2, r3, #31
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	d4e0      	bmi.n	8004c7c <_fflush_r+0xc>
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	059b      	lsls	r3, r3, #22
 8004cbe:	d4dd      	bmi.n	8004c7c <_fflush_r+0xc>
 8004cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cc2:	f7ff fad0 	bl	8004266 <__retarget_lock_release_recursive>
 8004cc6:	e7d9      	b.n	8004c7c <_fflush_r+0xc>
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <_fflush_r+0x70>)
 8004cca:	429c      	cmp	r4, r3
 8004ccc:	d101      	bne.n	8004cd2 <_fflush_r+0x62>
 8004cce:	68ac      	ldr	r4, [r5, #8]
 8004cd0:	e7df      	b.n	8004c92 <_fflush_r+0x22>
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <_fflush_r+0x74>)
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	bf08      	it	eq
 8004cd8:	68ec      	ldreq	r4, [r5, #12]
 8004cda:	e7da      	b.n	8004c92 <_fflush_r+0x22>
 8004cdc:	08005a2c 	.word	0x08005a2c
 8004ce0:	08005a4c 	.word	0x08005a4c
 8004ce4:	08005a0c 	.word	0x08005a0c

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d07      	ldr	r5, [pc, #28]	; (8004d08 <_lseek_r+0x20>)
 8004cec:	4604      	mov	r4, r0
 8004cee:	4608      	mov	r0, r1
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fc f99e 	bl	8001038 <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000218 	.word	0x20000218

08004d0c <__swhatbuf_r>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	460e      	mov	r6, r1
 8004d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d14:	2900      	cmp	r1, #0
 8004d16:	b096      	sub	sp, #88	; 0x58
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	da07      	bge.n	8004d2e <__swhatbuf_r+0x22>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	602b      	str	r3, [r5, #0]
 8004d22:	89b3      	ldrh	r3, [r6, #12]
 8004d24:	061a      	lsls	r2, r3, #24
 8004d26:	d410      	bmi.n	8004d4a <__swhatbuf_r+0x3e>
 8004d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2c:	e00e      	b.n	8004d4c <__swhatbuf_r+0x40>
 8004d2e:	466a      	mov	r2, sp
 8004d30:	f000 f8be 	bl	8004eb0 <_fstat_r>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	dbf2      	blt.n	8004d1e <__swhatbuf_r+0x12>
 8004d38:	9a01      	ldr	r2, [sp, #4]
 8004d3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d42:	425a      	negs	r2, r3
 8004d44:	415a      	adcs	r2, r3
 8004d46:	602a      	str	r2, [r5, #0]
 8004d48:	e7ee      	b.n	8004d28 <__swhatbuf_r+0x1c>
 8004d4a:	2340      	movs	r3, #64	; 0x40
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	b016      	add	sp, #88	; 0x58
 8004d52:	bd70      	pop	{r4, r5, r6, pc}

08004d54 <__smakebuf_r>:
 8004d54:	898b      	ldrh	r3, [r1, #12]
 8004d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d58:	079d      	lsls	r5, r3, #30
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	d507      	bpl.n	8004d70 <__smakebuf_r+0x1c>
 8004d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	6123      	str	r3, [r4, #16]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	6163      	str	r3, [r4, #20]
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	ab01      	add	r3, sp, #4
 8004d72:	466a      	mov	r2, sp
 8004d74:	f7ff ffca 	bl	8004d0c <__swhatbuf_r>
 8004d78:	9900      	ldr	r1, [sp, #0]
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f7ff fa73 	bl	8004268 <_malloc_r>
 8004d82:	b948      	cbnz	r0, 8004d98 <__smakebuf_r+0x44>
 8004d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d88:	059a      	lsls	r2, r3, #22
 8004d8a:	d4ef      	bmi.n	8004d6c <__smakebuf_r+0x18>
 8004d8c:	f023 0303 	bic.w	r3, r3, #3
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	e7e3      	b.n	8004d60 <__smakebuf_r+0xc>
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <__smakebuf_r+0x7c>)
 8004d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	6020      	str	r0, [r4, #0]
 8004da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	6163      	str	r3, [r4, #20]
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	6120      	str	r0, [r4, #16]
 8004dae:	b15b      	cbz	r3, 8004dc8 <__smakebuf_r+0x74>
 8004db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db4:	4630      	mov	r0, r6
 8004db6:	f000 f88d 	bl	8004ed4 <_isatty_r>
 8004dba:	b128      	cbz	r0, 8004dc8 <__smakebuf_r+0x74>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	89a0      	ldrh	r0, [r4, #12]
 8004dca:	4305      	orrs	r5, r0
 8004dcc:	81a5      	strh	r5, [r4, #12]
 8004dce:	e7cd      	b.n	8004d6c <__smakebuf_r+0x18>
 8004dd0:	080040c1 	.word	0x080040c1

08004dd4 <__malloc_lock>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <__malloc_lock+0x8>)
 8004dd6:	f7ff ba45 	b.w	8004264 <__retarget_lock_acquire_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20000210 	.word	0x20000210

08004de0 <__malloc_unlock>:
 8004de0:	4801      	ldr	r0, [pc, #4]	; (8004de8 <__malloc_unlock+0x8>)
 8004de2:	f7ff ba40 	b.w	8004266 <__retarget_lock_release_recursive>
 8004de6:	bf00      	nop
 8004de8:	20000210 	.word	0x20000210

08004dec <_free_r>:
 8004dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dee:	2900      	cmp	r1, #0
 8004df0:	d048      	beq.n	8004e84 <_free_r+0x98>
 8004df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df6:	9001      	str	r0, [sp, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8004dfe:	bfb8      	it	lt
 8004e00:	18e4      	addlt	r4, r4, r3
 8004e02:	f7ff ffe7 	bl	8004dd4 <__malloc_lock>
 8004e06:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <_free_r+0x9c>)
 8004e08:	9801      	ldr	r0, [sp, #4]
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	4615      	mov	r5, r2
 8004e0e:	b933      	cbnz	r3, 8004e1e <_free_r+0x32>
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	6014      	str	r4, [r2, #0]
 8004e14:	b003      	add	sp, #12
 8004e16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e1a:	f7ff bfe1 	b.w	8004de0 <__malloc_unlock>
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	d90b      	bls.n	8004e3a <_free_r+0x4e>
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	1862      	adds	r2, r4, r1
 8004e26:	4293      	cmp	r3, r2
 8004e28:	bf04      	itt	eq
 8004e2a:	681a      	ldreq	r2, [r3, #0]
 8004e2c:	685b      	ldreq	r3, [r3, #4]
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	bf04      	itt	eq
 8004e32:	1852      	addeq	r2, r2, r1
 8004e34:	6022      	streq	r2, [r4, #0]
 8004e36:	602c      	str	r4, [r5, #0]
 8004e38:	e7ec      	b.n	8004e14 <_free_r+0x28>
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b10b      	cbz	r3, 8004e44 <_free_r+0x58>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x4e>
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	1855      	adds	r5, r2, r1
 8004e48:	42a5      	cmp	r5, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x78>
 8004e4c:	6824      	ldr	r4, [r4, #0]
 8004e4e:	4421      	add	r1, r4
 8004e50:	1854      	adds	r4, r2, r1
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	d1dd      	bne.n	8004e14 <_free_r+0x28>
 8004e58:	681c      	ldr	r4, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	6053      	str	r3, [r2, #4]
 8004e5e:	4421      	add	r1, r4
 8004e60:	6011      	str	r1, [r2, #0]
 8004e62:	e7d7      	b.n	8004e14 <_free_r+0x28>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x80>
 8004e66:	230c      	movs	r3, #12
 8004e68:	6003      	str	r3, [r0, #0]
 8004e6a:	e7d3      	b.n	8004e14 <_free_r+0x28>
 8004e6c:	6825      	ldr	r5, [r4, #0]
 8004e6e:	1961      	adds	r1, r4, r5
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf04      	itt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	bf04      	itt	eq
 8004e7c:	1949      	addeq	r1, r1, r5
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	6054      	str	r4, [r2, #4]
 8004e82:	e7c7      	b.n	8004e14 <_free_r+0x28>
 8004e84:	b003      	add	sp, #12
 8004e86:	bd30      	pop	{r4, r5, pc}
 8004e88:	200000b0 	.word	0x200000b0

08004e8c <_read_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4d07      	ldr	r5, [pc, #28]	; (8004eac <_read_r+0x20>)
 8004e90:	4604      	mov	r4, r0
 8004e92:	4608      	mov	r0, r1
 8004e94:	4611      	mov	r1, r2
 8004e96:	2200      	movs	r2, #0
 8004e98:	602a      	str	r2, [r5, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f7fc f86c 	bl	8000f78 <_read>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_read_r+0x1e>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_read_r+0x1e>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	20000218 	.word	0x20000218

08004eb0 <_fstat_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d07      	ldr	r5, [pc, #28]	; (8004ed0 <_fstat_r+0x20>)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	602b      	str	r3, [r5, #0]
 8004ebe:	f7fc f8a0 	bl	8001002 <_fstat>
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	d102      	bne.n	8004ecc <_fstat_r+0x1c>
 8004ec6:	682b      	ldr	r3, [r5, #0]
 8004ec8:	b103      	cbz	r3, 8004ecc <_fstat_r+0x1c>
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000218 	.word	0x20000218

08004ed4 <_isatty_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d06      	ldr	r5, [pc, #24]	; (8004ef0 <_isatty_r+0x1c>)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4604      	mov	r4, r0
 8004edc:	4608      	mov	r0, r1
 8004ede:	602b      	str	r3, [r5, #0]
 8004ee0:	f7fc f89f 	bl	8001022 <_isatty>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d102      	bne.n	8004eee <_isatty_r+0x1a>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	b103      	cbz	r3, 8004eee <_isatty_r+0x1a>
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	20000218 	.word	0x20000218

08004ef4 <sinf>:
 8004ef4:	ee10 3a10 	vmov	r3, s0
 8004ef8:	b507      	push	{r0, r1, r2, lr}
 8004efa:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <sinf+0x7c>)
 8004efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f00:	4293      	cmp	r3, r2
 8004f02:	dc05      	bgt.n	8004f10 <sinf+0x1c>
 8004f04:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004f74 <sinf+0x80>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f000 fc5b 	bl	80057c4 <__kernel_sinf>
 8004f0e:	e004      	b.n	8004f1a <sinf+0x26>
 8004f10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f14:	db04      	blt.n	8004f20 <sinf+0x2c>
 8004f16:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004f1a:	b003      	add	sp, #12
 8004f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f20:	4668      	mov	r0, sp
 8004f22:	f000 f829 	bl	8004f78 <__ieee754_rem_pio2f>
 8004f26:	f000 0003 	and.w	r0, r0, #3
 8004f2a:	2801      	cmp	r0, #1
 8004f2c:	d008      	beq.n	8004f40 <sinf+0x4c>
 8004f2e:	2802      	cmp	r0, #2
 8004f30:	d00d      	beq.n	8004f4e <sinf+0x5a>
 8004f32:	b9b0      	cbnz	r0, 8004f62 <sinf+0x6e>
 8004f34:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f38:	ed9d 0a00 	vldr	s0, [sp]
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	e7e4      	b.n	8004f0a <sinf+0x16>
 8004f40:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f44:	ed9d 0a00 	vldr	s0, [sp]
 8004f48:	f000 f952 	bl	80051f0 <__kernel_cosf>
 8004f4c:	e7e5      	b.n	8004f1a <sinf+0x26>
 8004f4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f52:	ed9d 0a00 	vldr	s0, [sp]
 8004f56:	2001      	movs	r0, #1
 8004f58:	f000 fc34 	bl	80057c4 <__kernel_sinf>
 8004f5c:	eeb1 0a40 	vneg.f32	s0, s0
 8004f60:	e7db      	b.n	8004f1a <sinf+0x26>
 8004f62:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f66:	ed9d 0a00 	vldr	s0, [sp]
 8004f6a:	f000 f941 	bl	80051f0 <__kernel_cosf>
 8004f6e:	e7f5      	b.n	8004f5c <sinf+0x68>
 8004f70:	3f490fd8 	.word	0x3f490fd8
 8004f74:	00000000 	.word	0x00000000

08004f78 <__ieee754_rem_pio2f>:
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	ee10 6a10 	vmov	r6, s0
 8004f7e:	4b8e      	ldr	r3, [pc, #568]	; (80051b8 <__ieee754_rem_pio2f+0x240>)
 8004f80:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004f84:	429d      	cmp	r5, r3
 8004f86:	b087      	sub	sp, #28
 8004f88:	eef0 7a40 	vmov.f32	s15, s0
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	dc05      	bgt.n	8004f9c <__ieee754_rem_pio2f+0x24>
 8004f90:	2300      	movs	r3, #0
 8004f92:	ed80 0a00 	vstr	s0, [r0]
 8004f96:	6043      	str	r3, [r0, #4]
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e01a      	b.n	8004fd2 <__ieee754_rem_pio2f+0x5a>
 8004f9c:	4b87      	ldr	r3, [pc, #540]	; (80051bc <__ieee754_rem_pio2f+0x244>)
 8004f9e:	429d      	cmp	r5, r3
 8004fa0:	dc46      	bgt.n	8005030 <__ieee754_rem_pio2f+0xb8>
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80051c0 <__ieee754_rem_pio2f+0x248>
 8004fa8:	4b86      	ldr	r3, [pc, #536]	; (80051c4 <__ieee754_rem_pio2f+0x24c>)
 8004faa:	f025 050f 	bic.w	r5, r5, #15
 8004fae:	dd1f      	ble.n	8004ff0 <__ieee754_rem_pio2f+0x78>
 8004fb0:	429d      	cmp	r5, r3
 8004fb2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004fb6:	d00e      	beq.n	8004fd6 <__ieee754_rem_pio2f+0x5e>
 8004fb8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80051c8 <__ieee754_rem_pio2f+0x250>
 8004fbc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004fc0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004fc4:	ed80 0a00 	vstr	s0, [r0]
 8004fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fcc:	2001      	movs	r0, #1
 8004fce:	edc4 7a01 	vstr	s15, [r4, #4]
 8004fd2:	b007      	add	sp, #28
 8004fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80051cc <__ieee754_rem_pio2f+0x254>
 8004fda:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80051d0 <__ieee754_rem_pio2f+0x258>
 8004fde:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004fe2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004fe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004fea:	edc0 6a00 	vstr	s13, [r0]
 8004fee:	e7eb      	b.n	8004fc8 <__ieee754_rem_pio2f+0x50>
 8004ff0:	429d      	cmp	r5, r3
 8004ff2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004ff6:	d00e      	beq.n	8005016 <__ieee754_rem_pio2f+0x9e>
 8004ff8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80051c8 <__ieee754_rem_pio2f+0x250>
 8004ffc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005000:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005004:	ed80 0a00 	vstr	s0, [r0]
 8005008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	edc4 7a01 	vstr	s15, [r4, #4]
 8005014:	e7dd      	b.n	8004fd2 <__ieee754_rem_pio2f+0x5a>
 8005016:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80051cc <__ieee754_rem_pio2f+0x254>
 800501a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80051d0 <__ieee754_rem_pio2f+0x258>
 800501e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005022:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005026:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800502a:	edc0 6a00 	vstr	s13, [r0]
 800502e:	e7eb      	b.n	8005008 <__ieee754_rem_pio2f+0x90>
 8005030:	4b68      	ldr	r3, [pc, #416]	; (80051d4 <__ieee754_rem_pio2f+0x25c>)
 8005032:	429d      	cmp	r5, r3
 8005034:	dc72      	bgt.n	800511c <__ieee754_rem_pio2f+0x1a4>
 8005036:	f000 fc0d 	bl	8005854 <fabsf>
 800503a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80051d8 <__ieee754_rem_pio2f+0x260>
 800503e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005042:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800504a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800504e:	ee17 0a90 	vmov	r0, s15
 8005052:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80051c0 <__ieee754_rem_pio2f+0x248>
 8005056:	eea7 0a67 	vfms.f32	s0, s14, s15
 800505a:	281f      	cmp	r0, #31
 800505c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80051c8 <__ieee754_rem_pio2f+0x250>
 8005060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005064:	eeb1 6a47 	vneg.f32	s12, s14
 8005068:	ee70 6a67 	vsub.f32	s13, s0, s15
 800506c:	ee16 2a90 	vmov	r2, s13
 8005070:	dc1c      	bgt.n	80050ac <__ieee754_rem_pio2f+0x134>
 8005072:	495a      	ldr	r1, [pc, #360]	; (80051dc <__ieee754_rem_pio2f+0x264>)
 8005074:	1e47      	subs	r7, r0, #1
 8005076:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800507a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800507e:	428b      	cmp	r3, r1
 8005080:	d014      	beq.n	80050ac <__ieee754_rem_pio2f+0x134>
 8005082:	6022      	str	r2, [r4, #0]
 8005084:	ed94 7a00 	vldr	s14, [r4]
 8005088:	ee30 0a47 	vsub.f32	s0, s0, s14
 800508c:	2e00      	cmp	r6, #0
 800508e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005092:	ed84 0a01 	vstr	s0, [r4, #4]
 8005096:	da9c      	bge.n	8004fd2 <__ieee754_rem_pio2f+0x5a>
 8005098:	eeb1 7a47 	vneg.f32	s14, s14
 800509c:	eeb1 0a40 	vneg.f32	s0, s0
 80050a0:	ed84 7a00 	vstr	s14, [r4]
 80050a4:	ed84 0a01 	vstr	s0, [r4, #4]
 80050a8:	4240      	negs	r0, r0
 80050aa:	e792      	b.n	8004fd2 <__ieee754_rem_pio2f+0x5a>
 80050ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80050b0:	15eb      	asrs	r3, r5, #23
 80050b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80050b6:	2d08      	cmp	r5, #8
 80050b8:	dde3      	ble.n	8005082 <__ieee754_rem_pio2f+0x10a>
 80050ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 80051cc <__ieee754_rem_pio2f+0x254>
 80050be:	eef0 6a40 	vmov.f32	s13, s0
 80050c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80050c6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80050ca:	eea6 0a27 	vfma.f32	s0, s12, s15
 80050ce:	eddf 7a40 	vldr	s15, [pc, #256]	; 80051d0 <__ieee754_rem_pio2f+0x258>
 80050d2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80050d6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80050da:	eef0 7a40 	vmov.f32	s15, s0
 80050de:	ee15 2a90 	vmov	r2, s11
 80050e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80050e6:	1a5b      	subs	r3, r3, r1
 80050e8:	2b19      	cmp	r3, #25
 80050ea:	dc04      	bgt.n	80050f6 <__ieee754_rem_pio2f+0x17e>
 80050ec:	edc4 5a00 	vstr	s11, [r4]
 80050f0:	eeb0 0a66 	vmov.f32	s0, s13
 80050f4:	e7c6      	b.n	8005084 <__ieee754_rem_pio2f+0x10c>
 80050f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80051e0 <__ieee754_rem_pio2f+0x268>
 80050fa:	eeb0 0a66 	vmov.f32	s0, s13
 80050fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005102:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005106:	eddf 6a37 	vldr	s13, [pc, #220]	; 80051e4 <__ieee754_rem_pio2f+0x26c>
 800510a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800510e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005112:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005116:	ed84 7a00 	vstr	s14, [r4]
 800511a:	e7b3      	b.n	8005084 <__ieee754_rem_pio2f+0x10c>
 800511c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005120:	db06      	blt.n	8005130 <__ieee754_rem_pio2f+0x1b8>
 8005122:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005126:	edc0 7a01 	vstr	s15, [r0, #4]
 800512a:	edc0 7a00 	vstr	s15, [r0]
 800512e:	e733      	b.n	8004f98 <__ieee754_rem_pio2f+0x20>
 8005130:	15ea      	asrs	r2, r5, #23
 8005132:	3a86      	subs	r2, #134	; 0x86
 8005134:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005140:	eddf 6a29 	vldr	s13, [pc, #164]	; 80051e8 <__ieee754_rem_pio2f+0x270>
 8005144:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800514c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005154:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005158:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800515c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005160:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005164:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005168:	eef5 7a40 	vcmp.f32	s15, #0.0
 800516c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005170:	edcd 7a05 	vstr	s15, [sp, #20]
 8005174:	d11e      	bne.n	80051b4 <__ieee754_rem_pio2f+0x23c>
 8005176:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	bf14      	ite	ne
 8005180:	2302      	movne	r3, #2
 8005182:	2301      	moveq	r3, #1
 8005184:	4919      	ldr	r1, [pc, #100]	; (80051ec <__ieee754_rem_pio2f+0x274>)
 8005186:	9101      	str	r1, [sp, #4]
 8005188:	2102      	movs	r1, #2
 800518a:	9100      	str	r1, [sp, #0]
 800518c:	a803      	add	r0, sp, #12
 800518e:	4621      	mov	r1, r4
 8005190:	f000 f88e 	bl	80052b0 <__kernel_rem_pio2f>
 8005194:	2e00      	cmp	r6, #0
 8005196:	f6bf af1c 	bge.w	8004fd2 <__ieee754_rem_pio2f+0x5a>
 800519a:	edd4 7a00 	vldr	s15, [r4]
 800519e:	eef1 7a67 	vneg.f32	s15, s15
 80051a2:	edc4 7a00 	vstr	s15, [r4]
 80051a6:	edd4 7a01 	vldr	s15, [r4, #4]
 80051aa:	eef1 7a67 	vneg.f32	s15, s15
 80051ae:	edc4 7a01 	vstr	s15, [r4, #4]
 80051b2:	e779      	b.n	80050a8 <__ieee754_rem_pio2f+0x130>
 80051b4:	2303      	movs	r3, #3
 80051b6:	e7e5      	b.n	8005184 <__ieee754_rem_pio2f+0x20c>
 80051b8:	3f490fd8 	.word	0x3f490fd8
 80051bc:	4016cbe3 	.word	0x4016cbe3
 80051c0:	3fc90f80 	.word	0x3fc90f80
 80051c4:	3fc90fd0 	.word	0x3fc90fd0
 80051c8:	37354443 	.word	0x37354443
 80051cc:	37354400 	.word	0x37354400
 80051d0:	2e85a308 	.word	0x2e85a308
 80051d4:	43490f80 	.word	0x43490f80
 80051d8:	3f22f984 	.word	0x3f22f984
 80051dc:	08005aa0 	.word	0x08005aa0
 80051e0:	2e85a300 	.word	0x2e85a300
 80051e4:	248d3132 	.word	0x248d3132
 80051e8:	43800000 	.word	0x43800000
 80051ec:	08005b20 	.word	0x08005b20

080051f0 <__kernel_cosf>:
 80051f0:	ee10 3a10 	vmov	r3, s0
 80051f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80051fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005200:	da05      	bge.n	800520e <__kernel_cosf+0x1e>
 8005202:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005206:	ee17 2a90 	vmov	r2, s15
 800520a:	2a00      	cmp	r2, #0
 800520c:	d03d      	beq.n	800528a <__kernel_cosf+0x9a>
 800520e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8005212:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005290 <__kernel_cosf+0xa0>
 8005216:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005294 <__kernel_cosf+0xa4>
 800521a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005298 <__kernel_cosf+0xa8>
 800521e:	4a1f      	ldr	r2, [pc, #124]	; (800529c <__kernel_cosf+0xac>)
 8005220:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005224:	4293      	cmp	r3, r2
 8005226:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80052a0 <__kernel_cosf+0xb0>
 800522a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800522e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80052a4 <__kernel_cosf+0xb4>
 8005232:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005236:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80052a8 <__kernel_cosf+0xb8>
 800523a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800523e:	eeb0 7a66 	vmov.f32	s14, s13
 8005242:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005246:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800524a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800524e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8005252:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8005256:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800525a:	dc04      	bgt.n	8005266 <__kernel_cosf+0x76>
 800525c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005260:	ee36 0a47 	vsub.f32	s0, s12, s14
 8005264:	4770      	bx	lr
 8005266:	4a11      	ldr	r2, [pc, #68]	; (80052ac <__kernel_cosf+0xbc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	bfda      	itte	le
 800526c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005270:	ee06 3a90 	vmovle	s13, r3
 8005274:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005278:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800527c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8005280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005284:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005288:	4770      	bx	lr
 800528a:	eeb0 0a46 	vmov.f32	s0, s12
 800528e:	4770      	bx	lr
 8005290:	ad47d74e 	.word	0xad47d74e
 8005294:	310f74f6 	.word	0x310f74f6
 8005298:	3d2aaaab 	.word	0x3d2aaaab
 800529c:	3e999999 	.word	0x3e999999
 80052a0:	b493f27c 	.word	0xb493f27c
 80052a4:	37d00d01 	.word	0x37d00d01
 80052a8:	bab60b61 	.word	0xbab60b61
 80052ac:	3f480000 	.word	0x3f480000

080052b0 <__kernel_rem_pio2f>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	ed2d 8b04 	vpush	{d8-d9}
 80052b8:	b0d7      	sub	sp, #348	; 0x15c
 80052ba:	4616      	mov	r6, r2
 80052bc:	4698      	mov	r8, r3
 80052be:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80052c0:	4bbb      	ldr	r3, [pc, #748]	; (80055b0 <__kernel_rem_pio2f+0x300>)
 80052c2:	9001      	str	r0, [sp, #4]
 80052c4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80052c8:	1d33      	adds	r3, r6, #4
 80052ca:	460d      	mov	r5, r1
 80052cc:	f108 39ff 	add.w	r9, r8, #4294967295
 80052d0:	db29      	blt.n	8005326 <__kernel_rem_pio2f+0x76>
 80052d2:	1ef1      	subs	r1, r6, #3
 80052d4:	bf48      	it	mi
 80052d6:	1d31      	addmi	r1, r6, #4
 80052d8:	10c9      	asrs	r1, r1, #3
 80052da:	1c4c      	adds	r4, r1, #1
 80052dc:	00e3      	lsls	r3, r4, #3
 80052de:	9302      	str	r3, [sp, #8]
 80052e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80052e2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80055c0 <__kernel_rem_pio2f+0x310>
 80052e6:	eba1 0009 	sub.w	r0, r1, r9
 80052ea:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80052ee:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80052f2:	eb07 0c09 	add.w	ip, r7, r9
 80052f6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80052fa:	2300      	movs	r3, #0
 80052fc:	4563      	cmp	r3, ip
 80052fe:	dd14      	ble.n	800532a <__kernel_rem_pio2f+0x7a>
 8005300:	ab1a      	add	r3, sp, #104	; 0x68
 8005302:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8005306:	46cc      	mov	ip, r9
 8005308:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800530c:	f1c8 0b01 	rsb	fp, r8, #1
 8005310:	eb0b 020c 	add.w	r2, fp, ip
 8005314:	4297      	cmp	r7, r2
 8005316:	db27      	blt.n	8005368 <__kernel_rem_pio2f+0xb8>
 8005318:	f8dd e004 	ldr.w	lr, [sp, #4]
 800531c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80055c0 <__kernel_rem_pio2f+0x310>
 8005320:	4618      	mov	r0, r3
 8005322:	2200      	movs	r2, #0
 8005324:	e016      	b.n	8005354 <__kernel_rem_pio2f+0xa4>
 8005326:	2100      	movs	r1, #0
 8005328:	e7d7      	b.n	80052da <__kernel_rem_pio2f+0x2a>
 800532a:	42d8      	cmn	r0, r3
 800532c:	bf5d      	ittte	pl
 800532e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8005332:	ee07 2a90 	vmovpl	s15, r2
 8005336:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800533a:	eef0 7a47 	vmovmi.f32	s15, s14
 800533e:	ecea 7a01 	vstmia	sl!, {s15}
 8005342:	3301      	adds	r3, #1
 8005344:	e7da      	b.n	80052fc <__kernel_rem_pio2f+0x4c>
 8005346:	ecfe 6a01 	vldmia	lr!, {s13}
 800534a:	ed90 7a00 	vldr	s14, [r0]
 800534e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005352:	3201      	adds	r2, #1
 8005354:	454a      	cmp	r2, r9
 8005356:	f1a0 0004 	sub.w	r0, r0, #4
 800535a:	ddf4      	ble.n	8005346 <__kernel_rem_pio2f+0x96>
 800535c:	ecea 7a01 	vstmia	sl!, {s15}
 8005360:	3304      	adds	r3, #4
 8005362:	f10c 0c01 	add.w	ip, ip, #1
 8005366:	e7d3      	b.n	8005310 <__kernel_rem_pio2f+0x60>
 8005368:	ab06      	add	r3, sp, #24
 800536a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005372:	eddf 8a92 	vldr	s17, [pc, #584]	; 80055bc <__kernel_rem_pio2f+0x30c>
 8005376:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80055b8 <__kernel_rem_pio2f+0x308>
 800537a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	46ba      	mov	sl, r7
 8005382:	ab56      	add	r3, sp, #344	; 0x158
 8005384:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005388:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800538c:	ab06      	add	r3, sp, #24
 800538e:	4618      	mov	r0, r3
 8005390:	4652      	mov	r2, sl
 8005392:	2a00      	cmp	r2, #0
 8005394:	dc51      	bgt.n	800543a <__kernel_rem_pio2f+0x18a>
 8005396:	4620      	mov	r0, r4
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	f000 faa5 	bl	80058e8 <scalbnf>
 800539e:	eeb0 8a40 	vmov.f32	s16, s0
 80053a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80053a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80053aa:	f000 fa5b 	bl	8005864 <floorf>
 80053ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80053b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80053b6:	2c00      	cmp	r4, #0
 80053b8:	9b05      	ldr	r3, [sp, #20]
 80053ba:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80053be:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80053c2:	edcd 7a00 	vstr	s15, [sp]
 80053c6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80053ca:	dd4b      	ble.n	8005464 <__kernel_rem_pio2f+0x1b4>
 80053cc:	f10a 3cff 	add.w	ip, sl, #4294967295
 80053d0:	aa06      	add	r2, sp, #24
 80053d2:	f1c4 0e08 	rsb	lr, r4, #8
 80053d6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80053da:	ee17 1a90 	vmov	r1, s15
 80053de:	fa42 f00e 	asr.w	r0, r2, lr
 80053e2:	4401      	add	r1, r0
 80053e4:	9100      	str	r1, [sp, #0]
 80053e6:	fa00 f00e 	lsl.w	r0, r0, lr
 80053ea:	a906      	add	r1, sp, #24
 80053ec:	1a12      	subs	r2, r2, r0
 80053ee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80053f2:	f1c4 0007 	rsb	r0, r4, #7
 80053f6:	fa42 fb00 	asr.w	fp, r2, r0
 80053fa:	f1bb 0f00 	cmp.w	fp, #0
 80053fe:	dd43      	ble.n	8005488 <__kernel_rem_pio2f+0x1d8>
 8005400:	9a00      	ldr	r2, [sp, #0]
 8005402:	f04f 0e00 	mov.w	lr, #0
 8005406:	3201      	adds	r2, #1
 8005408:	9200      	str	r2, [sp, #0]
 800540a:	4670      	mov	r0, lr
 800540c:	45f2      	cmp	sl, lr
 800540e:	dc6c      	bgt.n	80054ea <__kernel_rem_pio2f+0x23a>
 8005410:	2c00      	cmp	r4, #0
 8005412:	dd04      	ble.n	800541e <__kernel_rem_pio2f+0x16e>
 8005414:	2c01      	cmp	r4, #1
 8005416:	d079      	beq.n	800550c <__kernel_rem_pio2f+0x25c>
 8005418:	2c02      	cmp	r4, #2
 800541a:	f000 8082 	beq.w	8005522 <__kernel_rem_pio2f+0x272>
 800541e:	f1bb 0f02 	cmp.w	fp, #2
 8005422:	d131      	bne.n	8005488 <__kernel_rem_pio2f+0x1d8>
 8005424:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005428:	ee30 8a48 	vsub.f32	s16, s0, s16
 800542c:	b360      	cbz	r0, 8005488 <__kernel_rem_pio2f+0x1d8>
 800542e:	4620      	mov	r0, r4
 8005430:	f000 fa5a 	bl	80058e8 <scalbnf>
 8005434:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005438:	e026      	b.n	8005488 <__kernel_rem_pio2f+0x1d8>
 800543a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800543e:	3a01      	subs	r2, #1
 8005440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005444:	a942      	add	r1, sp, #264	; 0x108
 8005446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800544a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800544e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005452:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005456:	eca0 0a01 	vstmia	r0!, {s0}
 800545a:	ed9c 0a00 	vldr	s0, [ip]
 800545e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005462:	e796      	b.n	8005392 <__kernel_rem_pio2f+0xe2>
 8005464:	d107      	bne.n	8005476 <__kernel_rem_pio2f+0x1c6>
 8005466:	f10a 32ff 	add.w	r2, sl, #4294967295
 800546a:	a906      	add	r1, sp, #24
 800546c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005470:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8005474:	e7c1      	b.n	80053fa <__kernel_rem_pio2f+0x14a>
 8005476:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800547a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800547e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005482:	da2f      	bge.n	80054e4 <__kernel_rem_pio2f+0x234>
 8005484:	f04f 0b00 	mov.w	fp, #0
 8005488:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005490:	f040 8098 	bne.w	80055c4 <__kernel_rem_pio2f+0x314>
 8005494:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005498:	469c      	mov	ip, r3
 800549a:	2200      	movs	r2, #0
 800549c:	45bc      	cmp	ip, r7
 800549e:	da48      	bge.n	8005532 <__kernel_rem_pio2f+0x282>
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d05f      	beq.n	8005564 <__kernel_rem_pio2f+0x2b4>
 80054a4:	aa06      	add	r2, sp, #24
 80054a6:	3c08      	subs	r4, #8
 80054a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054ac:	2900      	cmp	r1, #0
 80054ae:	d07d      	beq.n	80055ac <__kernel_rem_pio2f+0x2fc>
 80054b0:	4620      	mov	r0, r4
 80054b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	f000 fa16 	bl	80058e8 <scalbnf>
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80055bc <__kernel_rem_pio2f+0x30c>
 80054c2:	4619      	mov	r1, r3
 80054c4:	2900      	cmp	r1, #0
 80054c6:	f280 80af 	bge.w	8005628 <__kernel_rem_pio2f+0x378>
 80054ca:	4618      	mov	r0, r3
 80054cc:	2400      	movs	r4, #0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f2c0 80d0 	blt.w	8005674 <__kernel_rem_pio2f+0x3c4>
 80054d4:	a942      	add	r1, sp, #264	; 0x108
 80054d6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80054da:	4a36      	ldr	r2, [pc, #216]	; (80055b4 <__kernel_rem_pio2f+0x304>)
 80054dc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80055c0 <__kernel_rem_pio2f+0x310>
 80054e0:	2100      	movs	r1, #0
 80054e2:	e0bb      	b.n	800565c <__kernel_rem_pio2f+0x3ac>
 80054e4:	f04f 0b02 	mov.w	fp, #2
 80054e8:	e78a      	b.n	8005400 <__kernel_rem_pio2f+0x150>
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	b948      	cbnz	r0, 8005502 <__kernel_rem_pio2f+0x252>
 80054ee:	b11a      	cbz	r2, 80054f8 <__kernel_rem_pio2f+0x248>
 80054f0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f10e 0e01 	add.w	lr, lr, #1
 80054fc:	3304      	adds	r3, #4
 80054fe:	4610      	mov	r0, r2
 8005500:	e784      	b.n	800540c <__kernel_rem_pio2f+0x15c>
 8005502:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	4602      	mov	r2, r0
 800550a:	e7f5      	b.n	80054f8 <__kernel_rem_pio2f+0x248>
 800550c:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005510:	ab06      	add	r3, sp, #24
 8005512:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551a:	aa06      	add	r2, sp, #24
 800551c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8005520:	e77d      	b.n	800541e <__kernel_rem_pio2f+0x16e>
 8005522:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005526:	ab06      	add	r3, sp, #24
 8005528:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	e7f3      	b.n	800551a <__kernel_rem_pio2f+0x26a>
 8005532:	a906      	add	r1, sp, #24
 8005534:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8005538:	f10c 3cff 	add.w	ip, ip, #4294967295
 800553c:	4302      	orrs	r2, r0
 800553e:	e7ad      	b.n	800549c <__kernel_rem_pio2f+0x1ec>
 8005540:	3001      	adds	r0, #1
 8005542:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005546:	2a00      	cmp	r2, #0
 8005548:	d0fa      	beq.n	8005540 <__kernel_rem_pio2f+0x290>
 800554a:	a91a      	add	r1, sp, #104	; 0x68
 800554c:	eb0a 0208 	add.w	r2, sl, r8
 8005550:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005554:	f10a 0301 	add.w	r3, sl, #1
 8005558:	eb0a 0100 	add.w	r1, sl, r0
 800555c:	4299      	cmp	r1, r3
 800555e:	da04      	bge.n	800556a <__kernel_rem_pio2f+0x2ba>
 8005560:	468a      	mov	sl, r1
 8005562:	e70e      	b.n	8005382 <__kernel_rem_pio2f+0xd2>
 8005564:	9b04      	ldr	r3, [sp, #16]
 8005566:	2001      	movs	r0, #1
 8005568:	e7eb      	b.n	8005542 <__kernel_rem_pio2f+0x292>
 800556a:	9803      	ldr	r0, [sp, #12]
 800556c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005570:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005574:	9000      	str	r0, [sp, #0]
 8005576:	ee07 0a90 	vmov	s15, r0
 800557a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557e:	2000      	movs	r0, #0
 8005580:	ece2 7a01 	vstmia	r2!, {s15}
 8005584:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80055c0 <__kernel_rem_pio2f+0x310>
 8005588:	4696      	mov	lr, r2
 800558a:	4548      	cmp	r0, r9
 800558c:	dd06      	ble.n	800559c <__kernel_rem_pio2f+0x2ec>
 800558e:	a842      	add	r0, sp, #264	; 0x108
 8005590:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005594:	edc0 7a00 	vstr	s15, [r0]
 8005598:	3301      	adds	r3, #1
 800559a:	e7df      	b.n	800555c <__kernel_rem_pio2f+0x2ac>
 800559c:	ecfc 6a01 	vldmia	ip!, {s13}
 80055a0:	ed3e 7a01 	vldmdb	lr!, {s14}
 80055a4:	3001      	adds	r0, #1
 80055a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80055aa:	e7ee      	b.n	800558a <__kernel_rem_pio2f+0x2da>
 80055ac:	3b01      	subs	r3, #1
 80055ae:	e779      	b.n	80054a4 <__kernel_rem_pio2f+0x1f4>
 80055b0:	08005e64 	.word	0x08005e64
 80055b4:	08005e38 	.word	0x08005e38
 80055b8:	43800000 	.word	0x43800000
 80055bc:	3b800000 	.word	0x3b800000
 80055c0:	00000000 	.word	0x00000000
 80055c4:	9b02      	ldr	r3, [sp, #8]
 80055c6:	eeb0 0a48 	vmov.f32	s0, s16
 80055ca:	1b98      	subs	r0, r3, r6
 80055cc:	f000 f98c 	bl	80058e8 <scalbnf>
 80055d0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80055b8 <__kernel_rem_pio2f+0x308>
 80055d4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80055d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055dc:	db1b      	blt.n	8005616 <__kernel_rem_pio2f+0x366>
 80055de:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80055bc <__kernel_rem_pio2f+0x30c>
 80055e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80055e6:	aa06      	add	r2, sp, #24
 80055e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ec:	a906      	add	r1, sp, #24
 80055ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f2:	3408      	adds	r4, #8
 80055f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80055f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005600:	ee10 3a10 	vmov	r3, s0
 8005604:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005608:	ee17 2a90 	vmov	r2, s15
 800560c:	f10a 0301 	add.w	r3, sl, #1
 8005610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005614:	e74c      	b.n	80054b0 <__kernel_rem_pio2f+0x200>
 8005616:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800561a:	aa06      	add	r2, sp, #24
 800561c:	ee10 3a10 	vmov	r3, s0
 8005620:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005624:	4653      	mov	r3, sl
 8005626:	e743      	b.n	80054b0 <__kernel_rem_pio2f+0x200>
 8005628:	aa42      	add	r2, sp, #264	; 0x108
 800562a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800562e:	aa06      	add	r2, sp, #24
 8005630:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005634:	9201      	str	r2, [sp, #4]
 8005636:	ee07 2a90 	vmov	s15, r2
 800563a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800563e:	3901      	subs	r1, #1
 8005640:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005644:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005648:	edc0 7a00 	vstr	s15, [r0]
 800564c:	e73a      	b.n	80054c4 <__kernel_rem_pio2f+0x214>
 800564e:	ecf2 6a01 	vldmia	r2!, {s13}
 8005652:	ecb6 7a01 	vldmia	r6!, {s14}
 8005656:	eee6 7a87 	vfma.f32	s15, s13, s14
 800565a:	3101      	adds	r1, #1
 800565c:	42b9      	cmp	r1, r7
 800565e:	dc01      	bgt.n	8005664 <__kernel_rem_pio2f+0x3b4>
 8005660:	428c      	cmp	r4, r1
 8005662:	daf4      	bge.n	800564e <__kernel_rem_pio2f+0x39e>
 8005664:	aa56      	add	r2, sp, #344	; 0x158
 8005666:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800566a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800566e:	3801      	subs	r0, #1
 8005670:	3401      	adds	r4, #1
 8005672:	e72c      	b.n	80054ce <__kernel_rem_pio2f+0x21e>
 8005674:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005676:	2a02      	cmp	r2, #2
 8005678:	dc0a      	bgt.n	8005690 <__kernel_rem_pio2f+0x3e0>
 800567a:	2a00      	cmp	r2, #0
 800567c:	dc61      	bgt.n	8005742 <__kernel_rem_pio2f+0x492>
 800567e:	d03c      	beq.n	80056fa <__kernel_rem_pio2f+0x44a>
 8005680:	9b00      	ldr	r3, [sp, #0]
 8005682:	f003 0007 	and.w	r0, r3, #7
 8005686:	b057      	add	sp, #348	; 0x15c
 8005688:	ecbd 8b04 	vpop	{d8-d9}
 800568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005690:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005692:	2a03      	cmp	r2, #3
 8005694:	d1f4      	bne.n	8005680 <__kernel_rem_pio2f+0x3d0>
 8005696:	aa2e      	add	r2, sp, #184	; 0xb8
 8005698:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800569c:	4608      	mov	r0, r1
 800569e:	461c      	mov	r4, r3
 80056a0:	2c00      	cmp	r4, #0
 80056a2:	f1a0 0004 	sub.w	r0, r0, #4
 80056a6:	dc59      	bgt.n	800575c <__kernel_rem_pio2f+0x4ac>
 80056a8:	4618      	mov	r0, r3
 80056aa:	2801      	cmp	r0, #1
 80056ac:	f1a1 0104 	sub.w	r1, r1, #4
 80056b0:	dc64      	bgt.n	800577c <__kernel_rem_pio2f+0x4cc>
 80056b2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80055c0 <__kernel_rem_pio2f+0x310>
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	dc70      	bgt.n	800579c <__kernel_rem_pio2f+0x4ec>
 80056ba:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80056be:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80056c2:	f1bb 0f00 	cmp.w	fp, #0
 80056c6:	d172      	bne.n	80057ae <__kernel_rem_pio2f+0x4fe>
 80056c8:	edc5 6a00 	vstr	s13, [r5]
 80056cc:	ed85 7a01 	vstr	s14, [r5, #4]
 80056d0:	edc5 7a02 	vstr	s15, [r5, #8]
 80056d4:	e7d4      	b.n	8005680 <__kernel_rem_pio2f+0x3d0>
 80056d6:	aa2e      	add	r2, sp, #184	; 0xb8
 80056d8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80056dc:	ed91 7a00 	vldr	s14, [r1]
 80056e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056e4:	3b01      	subs	r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf5      	bge.n	80056d6 <__kernel_rem_pio2f+0x426>
 80056ea:	f1bb 0f00 	cmp.w	fp, #0
 80056ee:	d001      	beq.n	80056f4 <__kernel_rem_pio2f+0x444>
 80056f0:	eef1 7a67 	vneg.f32	s15, s15
 80056f4:	edc5 7a00 	vstr	s15, [r5]
 80056f8:	e7c2      	b.n	8005680 <__kernel_rem_pio2f+0x3d0>
 80056fa:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80055c0 <__kernel_rem_pio2f+0x310>
 80056fe:	e7f2      	b.n	80056e6 <__kernel_rem_pio2f+0x436>
 8005700:	aa2e      	add	r2, sp, #184	; 0xb8
 8005702:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005706:	edd0 7a00 	vldr	s15, [r0]
 800570a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800570e:	3901      	subs	r1, #1
 8005710:	2900      	cmp	r1, #0
 8005712:	daf5      	bge.n	8005700 <__kernel_rem_pio2f+0x450>
 8005714:	f1bb 0f00 	cmp.w	fp, #0
 8005718:	d017      	beq.n	800574a <__kernel_rem_pio2f+0x49a>
 800571a:	eef1 7a47 	vneg.f32	s15, s14
 800571e:	edc5 7a00 	vstr	s15, [r5]
 8005722:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800572a:	a82f      	add	r0, sp, #188	; 0xbc
 800572c:	2101      	movs	r1, #1
 800572e:	428b      	cmp	r3, r1
 8005730:	da0e      	bge.n	8005750 <__kernel_rem_pio2f+0x4a0>
 8005732:	f1bb 0f00 	cmp.w	fp, #0
 8005736:	d001      	beq.n	800573c <__kernel_rem_pio2f+0x48c>
 8005738:	eef1 7a67 	vneg.f32	s15, s15
 800573c:	edc5 7a01 	vstr	s15, [r5, #4]
 8005740:	e79e      	b.n	8005680 <__kernel_rem_pio2f+0x3d0>
 8005742:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80055c0 <__kernel_rem_pio2f+0x310>
 8005746:	4619      	mov	r1, r3
 8005748:	e7e2      	b.n	8005710 <__kernel_rem_pio2f+0x460>
 800574a:	eef0 7a47 	vmov.f32	s15, s14
 800574e:	e7e6      	b.n	800571e <__kernel_rem_pio2f+0x46e>
 8005750:	ecb0 7a01 	vldmia	r0!, {s14}
 8005754:	3101      	adds	r1, #1
 8005756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800575a:	e7e8      	b.n	800572e <__kernel_rem_pio2f+0x47e>
 800575c:	edd0 7a00 	vldr	s15, [r0]
 8005760:	edd0 6a01 	vldr	s13, [r0, #4]
 8005764:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005768:	3c01      	subs	r4, #1
 800576a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800576e:	ed80 7a00 	vstr	s14, [r0]
 8005772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005776:	edc0 7a01 	vstr	s15, [r0, #4]
 800577a:	e791      	b.n	80056a0 <__kernel_rem_pio2f+0x3f0>
 800577c:	edd1 7a00 	vldr	s15, [r1]
 8005780:	edd1 6a01 	vldr	s13, [r1, #4]
 8005784:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005788:	3801      	subs	r0, #1
 800578a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800578e:	ed81 7a00 	vstr	s14, [r1]
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	edc1 7a01 	vstr	s15, [r1, #4]
 800579a:	e786      	b.n	80056aa <__kernel_rem_pio2f+0x3fa>
 800579c:	aa2e      	add	r2, sp, #184	; 0xb8
 800579e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80057a2:	ed91 7a00 	vldr	s14, [r1]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ac:	e783      	b.n	80056b6 <__kernel_rem_pio2f+0x406>
 80057ae:	eef1 6a66 	vneg.f32	s13, s13
 80057b2:	eeb1 7a47 	vneg.f32	s14, s14
 80057b6:	edc5 6a00 	vstr	s13, [r5]
 80057ba:	ed85 7a01 	vstr	s14, [r5, #4]
 80057be:	eef1 7a67 	vneg.f32	s15, s15
 80057c2:	e785      	b.n	80056d0 <__kernel_rem_pio2f+0x420>

080057c4 <__kernel_sinf>:
 80057c4:	ee10 3a10 	vmov	r3, s0
 80057c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057cc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80057d0:	da04      	bge.n	80057dc <__kernel_sinf+0x18>
 80057d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80057d6:	ee17 3a90 	vmov	r3, s15
 80057da:	b35b      	cbz	r3, 8005834 <__kernel_sinf+0x70>
 80057dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80057e0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005838 <__kernel_sinf+0x74>
 80057e4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800583c <__kernel_sinf+0x78>
 80057e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80057ec:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005840 <__kernel_sinf+0x7c>
 80057f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80057f4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005844 <__kernel_sinf+0x80>
 80057f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80057fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005848 <__kernel_sinf+0x84>
 8005800:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005804:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005808:	b930      	cbnz	r0, 8005818 <__kernel_sinf+0x54>
 800580a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800584c <__kernel_sinf+0x88>
 800580e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005812:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005816:	4770      	bx	lr
 8005818:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800581c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005820:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005824:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005828:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005850 <__kernel_sinf+0x8c>
 800582c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005830:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	2f2ec9d3 	.word	0x2f2ec9d3
 800583c:	b2d72f34 	.word	0xb2d72f34
 8005840:	3638ef1b 	.word	0x3638ef1b
 8005844:	b9500d01 	.word	0xb9500d01
 8005848:	3c088889 	.word	0x3c088889
 800584c:	be2aaaab 	.word	0xbe2aaaab
 8005850:	3e2aaaab 	.word	0x3e2aaaab

08005854 <fabsf>:
 8005854:	ee10 3a10 	vmov	r3, s0
 8005858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800585c:	ee00 3a10 	vmov	s0, r3
 8005860:	4770      	bx	lr
	...

08005864 <floorf>:
 8005864:	ee10 3a10 	vmov	r3, s0
 8005868:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800586c:	3a7f      	subs	r2, #127	; 0x7f
 800586e:	2a16      	cmp	r2, #22
 8005870:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005874:	dc2a      	bgt.n	80058cc <floorf+0x68>
 8005876:	2a00      	cmp	r2, #0
 8005878:	da11      	bge.n	800589e <floorf+0x3a>
 800587a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80058dc <floorf+0x78>
 800587e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005882:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588a:	dd05      	ble.n	8005898 <floorf+0x34>
 800588c:	2b00      	cmp	r3, #0
 800588e:	da23      	bge.n	80058d8 <floorf+0x74>
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <floorf+0x7c>)
 8005892:	2900      	cmp	r1, #0
 8005894:	bf18      	it	ne
 8005896:	4613      	movne	r3, r2
 8005898:	ee00 3a10 	vmov	s0, r3
 800589c:	4770      	bx	lr
 800589e:	4911      	ldr	r1, [pc, #68]	; (80058e4 <floorf+0x80>)
 80058a0:	4111      	asrs	r1, r2
 80058a2:	420b      	tst	r3, r1
 80058a4:	d0fa      	beq.n	800589c <floorf+0x38>
 80058a6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80058dc <floorf+0x78>
 80058aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80058b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b6:	ddef      	ble.n	8005898 <floorf+0x34>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bfbe      	ittt	lt
 80058bc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80058c0:	fa40 f202 	asrlt.w	r2, r0, r2
 80058c4:	189b      	addlt	r3, r3, r2
 80058c6:	ea23 0301 	bic.w	r3, r3, r1
 80058ca:	e7e5      	b.n	8005898 <floorf+0x34>
 80058cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80058d0:	d3e4      	bcc.n	800589c <floorf+0x38>
 80058d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80058d6:	4770      	bx	lr
 80058d8:	2300      	movs	r3, #0
 80058da:	e7dd      	b.n	8005898 <floorf+0x34>
 80058dc:	7149f2ca 	.word	0x7149f2ca
 80058e0:	bf800000 	.word	0xbf800000
 80058e4:	007fffff 	.word	0x007fffff

080058e8 <scalbnf>:
 80058e8:	ee10 3a10 	vmov	r3, s0
 80058ec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80058f0:	d025      	beq.n	800593e <scalbnf+0x56>
 80058f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80058f6:	d302      	bcc.n	80058fe <scalbnf+0x16>
 80058f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80058fc:	4770      	bx	lr
 80058fe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005902:	d122      	bne.n	800594a <scalbnf+0x62>
 8005904:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <scalbnf+0xc8>)
 8005906:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80059b4 <scalbnf+0xcc>
 800590a:	4298      	cmp	r0, r3
 800590c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005910:	db16      	blt.n	8005940 <scalbnf+0x58>
 8005912:	ee10 3a10 	vmov	r3, s0
 8005916:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800591a:	3a19      	subs	r2, #25
 800591c:	4402      	add	r2, r0
 800591e:	2afe      	cmp	r2, #254	; 0xfe
 8005920:	dd15      	ble.n	800594e <scalbnf+0x66>
 8005922:	ee10 3a10 	vmov	r3, s0
 8005926:	eddf 7a24 	vldr	s15, [pc, #144]	; 80059b8 <scalbnf+0xd0>
 800592a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80059bc <scalbnf+0xd4>
 800592e:	2b00      	cmp	r3, #0
 8005930:	eeb0 7a67 	vmov.f32	s14, s15
 8005934:	bfb8      	it	lt
 8005936:	eef0 7a66 	vmovlt.f32	s15, s13
 800593a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800593e:	4770      	bx	lr
 8005940:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80059c0 <scalbnf+0xd8>
 8005944:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005948:	4770      	bx	lr
 800594a:	0dd2      	lsrs	r2, r2, #23
 800594c:	e7e6      	b.n	800591c <scalbnf+0x34>
 800594e:	2a00      	cmp	r2, #0
 8005950:	dd06      	ble.n	8005960 <scalbnf+0x78>
 8005952:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005956:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800595a:	ee00 3a10 	vmov	s0, r3
 800595e:	4770      	bx	lr
 8005960:	f112 0f16 	cmn.w	r2, #22
 8005964:	da1a      	bge.n	800599c <scalbnf+0xb4>
 8005966:	f24c 3350 	movw	r3, #50000	; 0xc350
 800596a:	4298      	cmp	r0, r3
 800596c:	ee10 3a10 	vmov	r3, s0
 8005970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005974:	dd0a      	ble.n	800598c <scalbnf+0xa4>
 8005976:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80059b8 <scalbnf+0xd0>
 800597a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80059bc <scalbnf+0xd4>
 800597e:	eef0 7a40 	vmov.f32	s15, s0
 8005982:	2b00      	cmp	r3, #0
 8005984:	bf18      	it	ne
 8005986:	eeb0 0a47 	vmovne.f32	s0, s14
 800598a:	e7db      	b.n	8005944 <scalbnf+0x5c>
 800598c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80059c0 <scalbnf+0xd8>
 8005990:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80059c4 <scalbnf+0xdc>
 8005994:	eef0 7a40 	vmov.f32	s15, s0
 8005998:	2b00      	cmp	r3, #0
 800599a:	e7f3      	b.n	8005984 <scalbnf+0x9c>
 800599c:	3219      	adds	r2, #25
 800599e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80059a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80059a6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80059c8 <scalbnf+0xe0>
 80059aa:	ee07 3a10 	vmov	s14, r3
 80059ae:	e7c4      	b.n	800593a <scalbnf+0x52>
 80059b0:	ffff3cb0 	.word	0xffff3cb0
 80059b4:	4c000000 	.word	0x4c000000
 80059b8:	7149f2ca 	.word	0x7149f2ca
 80059bc:	f149f2ca 	.word	0xf149f2ca
 80059c0:	0da24260 	.word	0x0da24260
 80059c4:	8da24260 	.word	0x8da24260
 80059c8:	33000000 	.word	0x33000000

080059cc <_init>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr

080059d8 <_fini>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr
