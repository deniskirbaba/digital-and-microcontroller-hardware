
lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d8  080052d8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e0  080052e0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080052e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000001c  08005304  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08005304  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f08d  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d50  00000000  00000000  0002f0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00030e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00031ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002194a  00000000  00000000  000326b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f384  00000000  00000000  00054002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d043c  00000000  00000000  00063386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001337c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003750  00000000  00000000  00133818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004ed0 	.word	0x08004ed0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	08004ed0 	.word	0x08004ed0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96e 	b.w	8000914 <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	468c      	mov	ip, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	f040 8083 	bne.w	8000766 <__udivmoddi4+0x116>
 8000660:	428a      	cmp	r2, r1
 8000662:	4617      	mov	r7, r2
 8000664:	d947      	bls.n	80006f6 <__udivmoddi4+0xa6>
 8000666:	fab2 f282 	clz	r2, r2
 800066a:	b142      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066c:	f1c2 0020 	rsb	r0, r2, #32
 8000670:	fa24 f000 	lsr.w	r0, r4, r0
 8000674:	4091      	lsls	r1, r2
 8000676:	4097      	lsls	r7, r2
 8000678:	ea40 0c01 	orr.w	ip, r0, r1
 800067c:	4094      	lsls	r4, r2
 800067e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000682:	0c23      	lsrs	r3, r4, #16
 8000684:	fbbc f6f8 	udiv	r6, ip, r8
 8000688:	fa1f fe87 	uxth.w	lr, r7
 800068c:	fb08 c116 	mls	r1, r8, r6, ip
 8000690:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000694:	fb06 f10e 	mul.w	r1, r6, lr
 8000698:	4299      	cmp	r1, r3
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x60>
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	f106 30ff 	add.w	r0, r6, #4294967295
 80006a2:	f080 8119 	bcs.w	80008d8 <__udivmoddi4+0x288>
 80006a6:	4299      	cmp	r1, r3
 80006a8:	f240 8116 	bls.w	80008d8 <__udivmoddi4+0x288>
 80006ac:	3e02      	subs	r6, #2
 80006ae:	443b      	add	r3, r7
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	b2a4      	uxth	r4, r4
 80006b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b8:	fb08 3310 	mls	r3, r8, r0, r3
 80006bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80006c4:	45a6      	cmp	lr, r4
 80006c6:	d909      	bls.n	80006dc <__udivmoddi4+0x8c>
 80006c8:	193c      	adds	r4, r7, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ce:	f080 8105 	bcs.w	80008dc <__udivmoddi4+0x28c>
 80006d2:	45a6      	cmp	lr, r4
 80006d4:	f240 8102 	bls.w	80008dc <__udivmoddi4+0x28c>
 80006d8:	3802      	subs	r0, #2
 80006da:	443c      	add	r4, r7
 80006dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e0:	eba4 040e 	sub.w	r4, r4, lr
 80006e4:	2600      	movs	r6, #0
 80006e6:	b11d      	cbz	r5, 80006f0 <__udivmoddi4+0xa0>
 80006e8:	40d4      	lsrs	r4, r2
 80006ea:	2300      	movs	r3, #0
 80006ec:	e9c5 4300 	strd	r4, r3, [r5]
 80006f0:	4631      	mov	r1, r6
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	b902      	cbnz	r2, 80006fa <__udivmoddi4+0xaa>
 80006f8:	deff      	udf	#255	; 0xff
 80006fa:	fab2 f282 	clz	r2, r2
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d150      	bne.n	80007a4 <__udivmoddi4+0x154>
 8000702:	1bcb      	subs	r3, r1, r7
 8000704:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000708:	fa1f f887 	uxth.w	r8, r7
 800070c:	2601      	movs	r6, #1
 800070e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000712:	0c21      	lsrs	r1, r4, #16
 8000714:	fb0e 331c 	mls	r3, lr, ip, r3
 8000718:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800071c:	fb08 f30c 	mul.w	r3, r8, ip
 8000720:	428b      	cmp	r3, r1
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0xe4>
 8000724:	1879      	adds	r1, r7, r1
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0xe2>
 800072c:	428b      	cmp	r3, r1
 800072e:	f200 80e9 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 8000732:	4684      	mov	ip, r0
 8000734:	1ac9      	subs	r1, r1, r3
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000740:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x10c>
 800074c:	193c      	adds	r4, r7, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x10a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80d9 	bhi.w	800090c <__udivmoddi4+0x2bc>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e7bf      	b.n	80006e6 <__udivmoddi4+0x96>
 8000766:	428b      	cmp	r3, r1
 8000768:	d909      	bls.n	800077e <__udivmoddi4+0x12e>
 800076a:	2d00      	cmp	r5, #0
 800076c:	f000 80b1 	beq.w	80008d2 <__udivmoddi4+0x282>
 8000770:	2600      	movs	r6, #0
 8000772:	e9c5 0100 	strd	r0, r1, [r5]
 8000776:	4630      	mov	r0, r6
 8000778:	4631      	mov	r1, r6
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	fab3 f683 	clz	r6, r3
 8000782:	2e00      	cmp	r6, #0
 8000784:	d14a      	bne.n	800081c <__udivmoddi4+0x1cc>
 8000786:	428b      	cmp	r3, r1
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0x140>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 80b8 	bhi.w	8000900 <__udivmoddi4+0x2b0>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb61 0103 	sbc.w	r1, r1, r3
 8000796:	2001      	movs	r0, #1
 8000798:	468c      	mov	ip, r1
 800079a:	2d00      	cmp	r5, #0
 800079c:	d0a8      	beq.n	80006f0 <__udivmoddi4+0xa0>
 800079e:	e9c5 4c00 	strd	r4, ip, [r5]
 80007a2:	e7a5      	b.n	80006f0 <__udivmoddi4+0xa0>
 80007a4:	f1c2 0320 	rsb	r3, r2, #32
 80007a8:	fa20 f603 	lsr.w	r6, r0, r3
 80007ac:	4097      	lsls	r7, r2
 80007ae:	fa01 f002 	lsl.w	r0, r1, r2
 80007b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007b6:	40d9      	lsrs	r1, r3
 80007b8:	4330      	orrs	r0, r6
 80007ba:	0c03      	lsrs	r3, r0, #16
 80007bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80007c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007cc:	fb06 f108 	mul.w	r1, r6, r8
 80007d0:	4299      	cmp	r1, r3
 80007d2:	fa04 f402 	lsl.w	r4, r4, r2
 80007d6:	d909      	bls.n	80007ec <__udivmoddi4+0x19c>
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	f106 3cff 	add.w	ip, r6, #4294967295
 80007de:	f080 808d 	bcs.w	80008fc <__udivmoddi4+0x2ac>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 808a 	bls.w	80008fc <__udivmoddi4+0x2ac>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	443b      	add	r3, r7
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b281      	uxth	r1, r0
 80007f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80007f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80007f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007fc:	fb00 f308 	mul.w	r3, r0, r8
 8000800:	428b      	cmp	r3, r1
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x1c4>
 8000804:	1879      	adds	r1, r7, r1
 8000806:	f100 3cff 	add.w	ip, r0, #4294967295
 800080a:	d273      	bcs.n	80008f4 <__udivmoddi4+0x2a4>
 800080c:	428b      	cmp	r3, r1
 800080e:	d971      	bls.n	80008f4 <__udivmoddi4+0x2a4>
 8000810:	3802      	subs	r0, #2
 8000812:	4439      	add	r1, r7
 8000814:	1acb      	subs	r3, r1, r3
 8000816:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800081a:	e778      	b.n	800070e <__udivmoddi4+0xbe>
 800081c:	f1c6 0c20 	rsb	ip, r6, #32
 8000820:	fa03 f406 	lsl.w	r4, r3, r6
 8000824:	fa22 f30c 	lsr.w	r3, r2, ip
 8000828:	431c      	orrs	r4, r3
 800082a:	fa20 f70c 	lsr.w	r7, r0, ip
 800082e:	fa01 f306 	lsl.w	r3, r1, r6
 8000832:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000836:	fa21 f10c 	lsr.w	r1, r1, ip
 800083a:	431f      	orrs	r7, r3
 800083c:	0c3b      	lsrs	r3, r7, #16
 800083e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000842:	fa1f f884 	uxth.w	r8, r4
 8000846:	fb0e 1119 	mls	r1, lr, r9, r1
 800084a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800084e:	fb09 fa08 	mul.w	sl, r9, r8
 8000852:	458a      	cmp	sl, r1
 8000854:	fa02 f206 	lsl.w	r2, r2, r6
 8000858:	fa00 f306 	lsl.w	r3, r0, r6
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x220>
 800085e:	1861      	adds	r1, r4, r1
 8000860:	f109 30ff 	add.w	r0, r9, #4294967295
 8000864:	d248      	bcs.n	80008f8 <__udivmoddi4+0x2a8>
 8000866:	458a      	cmp	sl, r1
 8000868:	d946      	bls.n	80008f8 <__udivmoddi4+0x2a8>
 800086a:	f1a9 0902 	sub.w	r9, r9, #2
 800086e:	4421      	add	r1, r4
 8000870:	eba1 010a 	sub.w	r1, r1, sl
 8000874:	b2bf      	uxth	r7, r7
 8000876:	fbb1 f0fe 	udiv	r0, r1, lr
 800087a:	fb0e 1110 	mls	r1, lr, r0, r1
 800087e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000882:	fb00 f808 	mul.w	r8, r0, r8
 8000886:	45b8      	cmp	r8, r7
 8000888:	d907      	bls.n	800089a <__udivmoddi4+0x24a>
 800088a:	19e7      	adds	r7, r4, r7
 800088c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000890:	d22e      	bcs.n	80008f0 <__udivmoddi4+0x2a0>
 8000892:	45b8      	cmp	r8, r7
 8000894:	d92c      	bls.n	80008f0 <__udivmoddi4+0x2a0>
 8000896:	3802      	subs	r0, #2
 8000898:	4427      	add	r7, r4
 800089a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800089e:	eba7 0708 	sub.w	r7, r7, r8
 80008a2:	fba0 8902 	umull	r8, r9, r0, r2
 80008a6:	454f      	cmp	r7, r9
 80008a8:	46c6      	mov	lr, r8
 80008aa:	4649      	mov	r1, r9
 80008ac:	d31a      	bcc.n	80008e4 <__udivmoddi4+0x294>
 80008ae:	d017      	beq.n	80008e0 <__udivmoddi4+0x290>
 80008b0:	b15d      	cbz	r5, 80008ca <__udivmoddi4+0x27a>
 80008b2:	ebb3 020e 	subs.w	r2, r3, lr
 80008b6:	eb67 0701 	sbc.w	r7, r7, r1
 80008ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008be:	40f2      	lsrs	r2, r6
 80008c0:	ea4c 0202 	orr.w	r2, ip, r2
 80008c4:	40f7      	lsrs	r7, r6
 80008c6:	e9c5 2700 	strd	r2, r7, [r5]
 80008ca:	2600      	movs	r6, #0
 80008cc:	4631      	mov	r1, r6
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	462e      	mov	r6, r5
 80008d4:	4628      	mov	r0, r5
 80008d6:	e70b      	b.n	80006f0 <__udivmoddi4+0xa0>
 80008d8:	4606      	mov	r6, r0
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0x60>
 80008dc:	4618      	mov	r0, r3
 80008de:	e6fd      	b.n	80006dc <__udivmoddi4+0x8c>
 80008e0:	4543      	cmp	r3, r8
 80008e2:	d2e5      	bcs.n	80008b0 <__udivmoddi4+0x260>
 80008e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80008e8:	eb69 0104 	sbc.w	r1, r9, r4
 80008ec:	3801      	subs	r0, #1
 80008ee:	e7df      	b.n	80008b0 <__udivmoddi4+0x260>
 80008f0:	4608      	mov	r0, r1
 80008f2:	e7d2      	b.n	800089a <__udivmoddi4+0x24a>
 80008f4:	4660      	mov	r0, ip
 80008f6:	e78d      	b.n	8000814 <__udivmoddi4+0x1c4>
 80008f8:	4681      	mov	r9, r0
 80008fa:	e7b9      	b.n	8000870 <__udivmoddi4+0x220>
 80008fc:	4666      	mov	r6, ip
 80008fe:	e775      	b.n	80007ec <__udivmoddi4+0x19c>
 8000900:	4630      	mov	r0, r6
 8000902:	e74a      	b.n	800079a <__udivmoddi4+0x14a>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	4439      	add	r1, r7
 800090a:	e713      	b.n	8000734 <__udivmoddi4+0xe4>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	e724      	b.n	800075c <__udivmoddi4+0x10c>
 8000912:	bf00      	nop

08000914 <__aeabi_idiv0>:
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fb5a 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f862 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f962 	bl	8000bec <MX_GPIO_Init>
  MX_DMA_Init();
 8000928:	f000 f938 	bl	8000b9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800092c:	f000 f90c 	bl	8000b48 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000930:	f000 f8ba 	bl	8000aa8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  t = 0;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <main+0xa8>)
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 800093c:	4821      	ldr	r0, [pc, #132]	; (80009c4 <main+0xac>)
 800093e:	f001 ffc7 	bl	80028d0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)&rx_buffer, sizeof(rx_buffer));
 8000942:	2218      	movs	r2, #24
 8000944:	4920      	ldr	r1, [pc, #128]	; (80009c8 <main+0xb0>)
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <main+0xb4>)
 8000948:	f002 fcc0 	bl	80032cc <HAL_UART_Receive_DMA>

  while (!have_params);
 800094c:	bf00      	nop
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <main+0xb8>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0fb      	beq.n	800094e <main+0x36>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	bias = rx_buffer.bias;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <main+0xb0>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <main+0xbc>)
 800095c:	6013      	str	r3, [r2, #0]
	amp = rx_buffer.amp;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <main+0xb0>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <main+0xc0>)
 8000964:	6013      	str	r3, [r2, #0]
	freq = rx_buffer.freq;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <main+0xb0>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <main+0xc4>)
 800096c:	6013      	str	r3, [r2, #0]
	phase = rx_buffer.phase;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <main+0xb0>)
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <main+0xc8>)
 8000974:	6013      	str	r3, [r2, #0]

	tx_buffer.t = t;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <main+0xa8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <main+0xcc>)
 800097c:	6053      	str	r3, [r2, #4]
	tx_buffer.t = bias + amp*sinf(freq*t + phase);
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <main+0xc4>)
 8000980:	ed93 7a00 	vldr	s14, [r3]
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <main+0xa8>)
 8000986:	edd3 7a00 	vldr	s15, [r3]
 800098a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0xc8>)
 8000990:	edd3 7a00 	vldr	s15, [r3]
 8000994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000998:	eeb0 0a67 	vmov.f32	s0, s15
 800099c:	f003 fd2c 	bl	80043f8 <sinf>
 80009a0:	eeb0 7a40 	vmov.f32	s14, s0
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <main+0xc0>)
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <main+0xbc>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <main+0xcc>)
 80009ba:	edc3 7a01 	vstr	s15, [r3, #4]
	bias = rx_buffer.bias;
 80009be:	e7ca      	b.n	8000956 <main+0x3e>
 80009c0:	2000003c 	.word	0x2000003c
 80009c4:	20000128 	.word	0x20000128
 80009c8:	200000ac 	.word	0x200000ac
 80009cc:	20000170 	.word	0x20000170
 80009d0:	20000038 	.word	0x20000038
 80009d4:	200000a0 	.word	0x200000a0
 80009d8:	200000a8 	.word	0x200000a8
 80009dc:	200000a4 	.word	0x200000a4
 80009e0:	200000c4 	.word	0x200000c4
 80009e4:	20000000 	.word	0x20000000

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2234      	movs	r2, #52	; 0x34
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fcf6 	bl	80043e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <SystemClock_Config+0xb8>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <SystemClock_Config+0xb8>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <SystemClock_Config+0xb8>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <SystemClock_Config+0xbc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <SystemClock_Config+0xbc>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <SystemClock_Config+0xbc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a50:	2310      	movs	r3, #16
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fc49 	bl	80022f4 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a68:	f000 f91a 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f9be 	bl	8001e08 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a92:	f000 f905 	bl	8000ca0 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	; 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <MX_TIM1_Init+0x9c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000acc:	f240 623f 	movw	r2, #1599	; 0x63f
 8000ad0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ada:	2263      	movs	r2, #99	; 0x63
 8000adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000af2:	f001 fe9d 	bl	8002830 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f8d0 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000b0e:	f002 f857 	bl	8002bc0 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b18:	f000 f8c2 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000b2a:	f002 fa73 	bl	8003014 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b34:	f000 f8b4 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000128 	.word	0x20000128
 8000b44:	40010000 	.word	0x40010000

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f002 fad8 	bl	8003134 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f889 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000170 	.word	0x20000170
 8000b98:	40004400 	.word	0x40004400

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_DMA_Init+0x4c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <MX_DMA_Init+0x4c>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DMA_Init+0x4c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2010      	movs	r0, #16
 8000bc4:	f000 fb53 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bc8:	2010      	movs	r0, #16
 8000bca:	f000 fb6c 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2011      	movs	r0, #17
 8000bd4:	f000 fb4b 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bd8:	2011      	movs	r0, #17
 8000bda:	f000 fb64 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_GPIO_Init+0x30>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <MX_GPIO_Init+0x30>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_GPIO_Init+0x30>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	have_params = 1;
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <HAL_UART_TxCpltCallback+0x1c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000038 	.word	0x20000038

08000c40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if (have_params) {
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&tx_buffer, sizeof(tx_buffer));
 8000c50:	2210      	movs	r2, #16
 8000c52:	4910      	ldr	r1, [pc, #64]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c54:	4810      	ldr	r0, [pc, #64]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c56:	f002 fabb 	bl	80031d0 <HAL_UART_Transmit_DMA>
	}
	t += 0.01;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc36 	bl	80004d0 <__aeabi_f2d>
 8000c64:	a308      	add	r3, pc, #32	; (adr r3, 8000c88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fad3 	bl	8000214 <__adddf3>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f7ff fc83 	bl	8000580 <__aeabi_d2f>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	47ae147b 	.word	0x47ae147b
 8000c8c:	3f847ae1 	.word	0x3f847ae1
 8000c90:	20000038 	.word	0x20000038
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000170 	.word	0x20000170
 8000c9c:	2000003c 	.word	0x2000003c

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d115      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_Base_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_TIM_Base_MspInit+0x4c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_TIM_Base_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2019      	movs	r0, #25
 8000d30:	f000 fa9d 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d34:	2019      	movs	r0, #25
 8000d36:	f000 fab6 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a4c      	ldr	r2, [pc, #304]	; (8000e9c <HAL_UART_MspInit+0x150>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	f040 8091 	bne.w	8000e92 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <HAL_UART_MspInit+0x154>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <HAL_UART_MspInit+0x154>)
 8000d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <HAL_UART_MspInit+0x154>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <HAL_UART_MspInit+0x154>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <HAL_UART_MspInit+0x154>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <HAL_UART_MspInit+0x154>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da8:	230c      	movs	r3, #12
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db8:	2307      	movs	r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4838      	ldr	r0, [pc, #224]	; (8000ea4 <HAL_UART_MspInit+0x158>)
 8000dc4:	f000 fe8c 	bl	8001ae0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000dca:	4a38      	ldr	r2, [pc, #224]	; (8000eac <HAL_UART_MspInit+0x160>)
 8000dcc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000dd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ddc:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e0a:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000e0c:	f000 fa66 	bl	80012dc <HAL_DMA_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e16:	f7ff ff43 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <HAL_UART_MspInit+0x15c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <HAL_UART_MspInit+0x168>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e36:	2240      	movs	r2, #64	; 0x40
 8000e38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e46:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e68:	f000 fa38 	bl	80012dc <HAL_DMA_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000e72:	f7ff ff15 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_UART_MspInit+0x164>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2026      	movs	r0, #38	; 0x26
 8000e88:	f000 f9f1 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e8c:	2026      	movs	r0, #38	; 0x26
 8000e8e:	f000 fa0a 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	20000040 	.word	0x20000040
 8000eac:	40026088 	.word	0x40026088
 8000eb0:	200000c8 	.word	0x200000c8
 8000eb4:	400260a0 	.word	0x400260a0

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f8b8 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <DMA1_Stream5_IRQHandler+0x10>)
 8000f12:	f000 fb7b 	bl	800160c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000040 	.word	0x20000040

08000f20 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Stream6_IRQHandler+0x10>)
 8000f26:	f000 fb71 	bl	800160c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000c8 	.word	0x200000c8

08000f34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f3a:	f001 fd39 	bl	80029b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000128 	.word	0x20000128

08000f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f002 f9ed 	bl	800332c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000170 	.word	0x20000170

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f9c:	4c0b      	ldr	r4, [pc, #44]	; (8000fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000faa:	f7ff ffd7 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f003 f9f7 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fcb1 	bl	8000918 <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fc4:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 8000fc8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000fcc:	200001b8 	.word	0x200001b8

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f92b 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fe50 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f943 	bl	80012c2 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f90b 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000010 	.word	0x20000010
 8001070:	20000018 	.word	0x20000018
 8001074:	20000014 	.word	0x20000014

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000018 	.word	0x20000018
 800109c:	200001b4 	.word	0x200001b4

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200001b4 	.word	0x200001b4

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff29 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff3e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff8e 	bl	80011ac <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff31 	bl	800111c <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff feda 	bl	80010a0 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e099      	b.n	800142c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2202      	movs	r2, #2
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001318:	e00f      	b.n	800133a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131a:	f7ff fec1 	bl	80010a0 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b05      	cmp	r3, #5
 8001326:	d908      	bls.n	800133a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2220      	movs	r2, #32
 800132c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2203      	movs	r2, #3
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e078      	b.n	800142c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e8      	bne.n	800131a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_DMA_Init+0x158>)
 8001354:	4013      	ands	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	2b04      	cmp	r3, #4
 8001392:	d107      	bne.n	80013a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4313      	orrs	r3, r2
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f023 0307 	bic.w	r3, r3, #7
 80013ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d117      	bne.n	80013fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00e      	beq.n	80013fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fb01 	bl	80019e8 <DMA_CheckFifoParam>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013fa:	2301      	movs	r3, #1
 80013fc:	e016      	b.n	800142c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fab8 	bl	800197c <DMA_CalcBaseAndBitshift>
 800140c:	4603      	mov	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	223f      	movs	r2, #63	; 0x3f
 8001416:	409a      	lsls	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	f010803f 	.word	0xf010803f

08001438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_DMA_Start_IT+0x26>
 800145a:	2302      	movs	r3, #2
 800145c:	e040      	b.n	80014e0 <HAL_DMA_Start_IT+0xa8>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d12f      	bne.n	80014d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2202      	movs	r2, #2
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 fa4a 	bl	8001920 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	223f      	movs	r2, #63	; 0x3f
 8001492:	409a      	lsls	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0216 	orr.w	r2, r2, #22
 80014a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0208 	orr.w	r2, r2, #8
 80014be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e005      	b.n	80014de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014da:	2302      	movs	r3, #2
 80014dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014de:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014f6:	f7ff fdd3 	bl	80010a0 <HAL_GetTick>
 80014fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d008      	beq.n	800151a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e052      	b.n	80015c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0216 	bic.w	r2, r2, #22
 8001528:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001538:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <HAL_DMA_Abort+0x62>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0208 	bic.w	r2, r2, #8
 8001558:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156a:	e013      	b.n	8001594 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156c:	f7ff fd98 	bl	80010a0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b05      	cmp	r3, #5
 8001578:	d90c      	bls.n	8001594 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2220      	movs	r2, #32
 800157e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e015      	b.n	80015c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e4      	bne.n	800156c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	223f      	movs	r2, #63	; 0x3f
 80015a8:	409a      	lsls	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d004      	beq.n	80015e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00c      	b.n	8001600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001618:	4b92      	ldr	r3, [pc, #584]	; (8001864 <HAL_DMA_IRQHandler+0x258>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a92      	ldr	r2, [pc, #584]	; (8001868 <HAL_DMA_IRQHandler+0x25c>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0a9b      	lsrs	r3, r3, #10
 8001624:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	2208      	movs	r2, #8
 8001638:	409a      	lsls	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01a      	beq.n	8001678 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0204 	bic.w	r2, r2, #4
 800165e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	2208      	movs	r2, #8
 8001666:	409a      	lsls	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d012      	beq.n	80016ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2201      	movs	r2, #1
 800169c:	409a      	lsls	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b2:	2204      	movs	r2, #4
 80016b4:	409a      	lsls	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d012      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00b      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	2204      	movs	r2, #4
 80016d2:	409a      	lsls	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	f043 0204 	orr.w	r2, r3, #4
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	2210      	movs	r2, #16
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d043      	beq.n	800177c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d03c      	beq.n	800177c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2210      	movs	r2, #16
 8001708:	409a      	lsls	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d018      	beq.n	800174e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d108      	bne.n	800173c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d024      	beq.n	800177c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
 800173a:	e01f      	b.n	800177c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01b      	beq.n	800177c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e016      	b.n	800177c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0208 	bic.w	r2, r2, #8
 800176a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	2220      	movs	r2, #32
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 808e 	beq.w	80018aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8086 	beq.w	80018aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a2:	2220      	movs	r2, #32
 80017a4:	409a      	lsls	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d136      	bne.n	8001824 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0216 	bic.w	r2, r2, #22
 80017c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <HAL_DMA_IRQHandler+0x1da>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0208 	bic.w	r2, r2, #8
 80017f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	223f      	movs	r2, #63	; 0x3f
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001816:	2b00      	cmp	r3, #0
 8001818:	d07d      	beq.n	8001916 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
        }
        return;
 8001822:	e078      	b.n	8001916 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d01c      	beq.n	800186c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d108      	bne.n	8001852 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	2b00      	cmp	r3, #0
 8001846:	d030      	beq.n	80018aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
 8001850:	e02b      	b.n	80018aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	2b00      	cmp	r3, #0
 8001858:	d027      	beq.n	80018aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
 8001862:	e022      	b.n	80018aa <HAL_DMA_IRQHandler+0x29e>
 8001864:	20000010 	.word	0x20000010
 8001868:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10f      	bne.n	800189a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0210 	bic.w	r2, r2, #16
 8001888:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d032      	beq.n	8001918 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d022      	beq.n	8001904 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3301      	adds	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d307      	bcc.n	80018f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f2      	bne.n	80018d6 <HAL_DMA_IRQHandler+0x2ca>
 80018f0:	e000      	b.n	80018f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
 8001914:	e000      	b.n	8001918 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001916:	bf00      	nop
    }
  }
}
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop

08001920 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800193c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d108      	bne.n	8001960 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800195e:	e007      	b.n	8001970 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3b10      	subs	r3, #16
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <DMA_CalcBaseAndBitshift+0x64>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d909      	bls.n	80019be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019b2:	f023 0303 	bic.w	r3, r3, #3
 80019b6:	1d1a      	adds	r2, r3, #4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	659a      	str	r2, [r3, #88]	; 0x58
 80019bc:	e007      	b.n	80019ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019c6:	f023 0303 	bic.w	r3, r3, #3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	aaaaaaab 	.word	0xaaaaaaab
 80019e4:	08004f00 	.word	0x08004f00

080019e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d11f      	bne.n	8001a42 <DMA_CheckFifoParam+0x5a>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d856      	bhi.n	8001ab6 <DMA_CheckFifoParam+0xce>
 8001a08:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <DMA_CheckFifoParam+0x28>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a33 	.word	0x08001a33
 8001a18:	08001a21 	.word	0x08001a21
 8001a1c:	08001ab7 	.word	0x08001ab7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d046      	beq.n	8001aba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a30:	e043      	b.n	8001aba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a3a:	d140      	bne.n	8001abe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a40:	e03d      	b.n	8001abe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a4a:	d121      	bne.n	8001a90 <DMA_CheckFifoParam+0xa8>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d837      	bhi.n	8001ac2 <DMA_CheckFifoParam+0xda>
 8001a52:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <DMA_CheckFifoParam+0x70>)
 8001a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a58:	08001a69 	.word	0x08001a69
 8001a5c:	08001a6f 	.word	0x08001a6f
 8001a60:	08001a69 	.word	0x08001a69
 8001a64:	08001a81 	.word	0x08001a81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a6c:	e030      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d025      	beq.n	8001ac6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a7e:	e022      	b.n	8001ac6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a88:	d11f      	bne.n	8001aca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a8e:	e01c      	b.n	8001aca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d903      	bls.n	8001a9e <DMA_CheckFifoParam+0xb6>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d003      	beq.n	8001aa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a9c:	e018      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa2:	e015      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00e      	beq.n	8001ace <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab4:	e00b      	b.n	8001ace <DMA_CheckFifoParam+0xe6>
      break;
 8001ab6:	bf00      	nop
 8001ab8:	e00a      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aba:	bf00      	nop
 8001abc:	e008      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8001abe:	bf00      	nop
 8001ac0:	e006      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ac2:	bf00      	nop
 8001ac4:	e004      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ac6:	bf00      	nop
 8001ac8:	e002      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aca:	bf00      	nop
 8001acc:	e000      	b.n	8001ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ace:	bf00      	nop
    }
  } 
  
  return status; 
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e165      	b.n	8001dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8154 	bne.w	8001dc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d005      	beq.n	8001b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d130      	bne.n	8001b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 0201 	and.w	r2, r3, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d017      	beq.n	8001bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d123      	bne.n	8001c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80ae 	beq.w	8001dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_GPIO_Init+0x300>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_GPIO_Init+0x300>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b5a      	ldr	r3, [pc, #360]	; (8001de0 <HAL_GPIO_Init+0x300>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c82:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4f      	ldr	r2, [pc, #316]	; (8001de8 <HAL_GPIO_Init+0x308>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x21a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x216>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4d      	ldr	r2, [pc, #308]	; (8001df0 <HAL_GPIO_Init+0x310>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x212>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <HAL_GPIO_Init+0x314>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_GPIO_Init+0x318>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x20a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4a      	ldr	r2, [pc, #296]	; (8001dfc <HAL_GPIO_Init+0x31c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x206>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a49      	ldr	r2, [pc, #292]	; (8001e00 <HAL_GPIO_Init+0x320>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x202>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e00c      	b.n	8001cfc <HAL_GPIO_Init+0x21c>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_Init+0x21c>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x21c>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x21c>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x21c>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x21c>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x21c>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d0c:	4935      	ldr	r1, [pc, #212]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3e:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	f67f ae96 	bls.w	8001afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40021400 	.word	0x40021400
 8001e00:	40021800 	.word	0x40021800
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0cc      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d90c      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b8      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494d      	ldr	r1, [pc, #308]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d044      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d119      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e067      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4934      	ldr	r1, [pc, #208]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f8d2 	bl	80010a0 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f8ce 	bl	80010a0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e04f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20c      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e032      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4916      	ldr	r1, [pc, #88]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f855 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f832 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023c00 	.word	0x40023c00
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08004ee8 	.word	0x08004ee8
 8001fcc:	20000010 	.word	0x20000010
 8001fd0:	20000014 	.word	0x20000014

08001fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000010 	.word	0x20000010

08001fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff0:	f7ff fff0 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0a9b      	lsrs	r3, r3, #10
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4903      	ldr	r1, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	08004ef8 	.word	0x08004ef8

08002014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002018:	f7ff ffdc 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0b5b      	lsrs	r3, r3, #13
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4903      	ldr	r1, [pc, #12]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	08004ef8 	.word	0x08004ef8

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002040:	b087      	sub	sp, #28
 8002042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002044:	2600      	movs	r6, #0
 8002046:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002048:	2600      	movs	r6, #0
 800204a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800204c:	2600      	movs	r6, #0
 800204e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002050:	2600      	movs	r6, #0
 8002052:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002054:	2600      	movs	r6, #0
 8002056:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002058:	4ea3      	ldr	r6, [pc, #652]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800205a:	68b6      	ldr	r6, [r6, #8]
 800205c:	f006 060c 	and.w	r6, r6, #12
 8002060:	2e0c      	cmp	r6, #12
 8002062:	f200 8137 	bhi.w	80022d4 <HAL_RCC_GetSysClockFreq+0x298>
 8002066:	f20f 0c08 	addw	ip, pc, #8
 800206a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800206e:	bf00      	nop
 8002070:	080020a5 	.word	0x080020a5
 8002074:	080022d5 	.word	0x080022d5
 8002078:	080022d5 	.word	0x080022d5
 800207c:	080022d5 	.word	0x080022d5
 8002080:	080020ab 	.word	0x080020ab
 8002084:	080022d5 	.word	0x080022d5
 8002088:	080022d5 	.word	0x080022d5
 800208c:	080022d5 	.word	0x080022d5
 8002090:	080020b1 	.word	0x080020b1
 8002094:	080022d5 	.word	0x080022d5
 8002098:	080022d5 	.word	0x080022d5
 800209c:	080022d5 	.word	0x080022d5
 80020a0:	080021c7 	.word	0x080021c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b91      	ldr	r3, [pc, #580]	; (80022ec <HAL_RCC_GetSysClockFreq+0x2b0>)
 80020a6:	613b      	str	r3, [r7, #16]
       break;
 80020a8:	e117      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020ac:	613b      	str	r3, [r7, #16]
      break;
 80020ae:	e114      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b0:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ba:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d024      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c6:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	099b      	lsrs	r3, r3, #6
 80020cc:	461a      	mov	r2, r3
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020d6:	f04f 0500 	mov.w	r5, #0
 80020da:	ea02 0004 	and.w	r0, r2, r4
 80020de:	ea03 0105 	and.w	r1, r3, r5
 80020e2:	4b83      	ldr	r3, [pc, #524]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020e4:	fb03 f201 	mul.w	r2, r3, r1
 80020e8:	2300      	movs	r3, #0
 80020ea:	fb03 f300 	mul.w	r3, r3, r0
 80020ee:	4413      	add	r3, r2
 80020f0:	4a7f      	ldr	r2, [pc, #508]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020f2:	fba0 0102 	umull	r0, r1, r0, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	4619      	mov	r1, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f7fe fa8d 	bl	8000620 <__aeabi_uldivmod>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4613      	mov	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e04c      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002110:	4b75      	ldr	r3, [pc, #468]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	461a      	mov	r2, r3
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002120:	f04f 0100 	mov.w	r1, #0
 8002124:	ea02 0800 	and.w	r8, r2, r0
 8002128:	ea03 0901 	and.w	r9, r3, r1
 800212c:	4640      	mov	r0, r8
 800212e:	4649      	mov	r1, r9
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	014b      	lsls	r3, r1, #5
 800213a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800213e:	0142      	lsls	r2, r0, #5
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	ebb0 0008 	subs.w	r0, r0, r8
 8002148:	eb61 0109 	sbc.w	r1, r1, r9
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	018b      	lsls	r3, r1, #6
 8002156:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800215a:	0182      	lsls	r2, r0, #6
 800215c:	1a12      	subs	r2, r2, r0
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	00d9      	lsls	r1, r3, #3
 800216c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002170:	00d0      	lsls	r0, r2, #3
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	eb12 0208 	adds.w	r2, r2, r8
 800217a:	eb43 0309 	adc.w	r3, r3, r9
 800217e:	f04f 0000 	mov.w	r0, #0
 8002182:	f04f 0100 	mov.w	r1, #0
 8002186:	0299      	lsls	r1, r3, #10
 8002188:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800218c:	0290      	lsls	r0, r2, #10
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	461a      	mov	r2, r3
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f7fe fa3f 	bl	8000620 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4613      	mov	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021aa:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	3301      	adds	r3, #1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	613b      	str	r3, [r7, #16]
      break;
 80021c4:	e089      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c6:	4948      	ldr	r1, [pc, #288]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021c8:	6849      	ldr	r1, [r1, #4]
 80021ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021ce:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d0:	4945      	ldr	r1, [pc, #276]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021d2:	6849      	ldr	r1, [r1, #4]
 80021d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80021d8:	2900      	cmp	r1, #0
 80021da:	d024      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021dc:	4942      	ldr	r1, [pc, #264]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021de:	6849      	ldr	r1, [r1, #4]
 80021e0:	0989      	lsrs	r1, r1, #6
 80021e2:	4608      	mov	r0, r1
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80021ec:	f04f 0500 	mov.w	r5, #0
 80021f0:	ea00 0204 	and.w	r2, r0, r4
 80021f4:	ea01 0305 	and.w	r3, r1, r5
 80021f8:	493d      	ldr	r1, [pc, #244]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021fa:	fb01 f003 	mul.w	r0, r1, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	fb01 f102 	mul.w	r1, r1, r2
 8002204:	1844      	adds	r4, r0, r1
 8002206:	493a      	ldr	r1, [pc, #232]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002208:	fba2 0101 	umull	r0, r1, r2, r1
 800220c:	1863      	adds	r3, r4, r1
 800220e:	4619      	mov	r1, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f7fe fa02 	bl	8000620 <__aeabi_uldivmod>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4613      	mov	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e04a      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	461a      	mov	r2, r3
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	ea02 0400 	and.w	r4, r2, r0
 800223e:	ea03 0501 	and.w	r5, r3, r1
 8002242:	4620      	mov	r0, r4
 8002244:	4629      	mov	r1, r5
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	014b      	lsls	r3, r1, #5
 8002250:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002254:	0142      	lsls	r2, r0, #5
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	1b00      	subs	r0, r0, r4
 800225c:	eb61 0105 	sbc.w	r1, r1, r5
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	018b      	lsls	r3, r1, #6
 800226a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800226e:	0182      	lsls	r2, r0, #6
 8002270:	1a12      	subs	r2, r2, r0
 8002272:	eb63 0301 	sbc.w	r3, r3, r1
 8002276:	f04f 0000 	mov.w	r0, #0
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	00d9      	lsls	r1, r3, #3
 8002280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002284:	00d0      	lsls	r0, r2, #3
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	1912      	adds	r2, r2, r4
 800228c:	eb45 0303 	adc.w	r3, r5, r3
 8002290:	f04f 0000 	mov.w	r0, #0
 8002294:	f04f 0100 	mov.w	r1, #0
 8002298:	0299      	lsls	r1, r3, #10
 800229a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800229e:	0290      	lsls	r0, r2, #10
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	f7fe f9b6 	bl	8000620 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4613      	mov	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0f1b      	lsrs	r3, r3, #28
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	613b      	str	r3, [r7, #16]
      break;
 80022d2:	e002      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetSysClockFreq+0x2b0>)
 80022d6:	613b      	str	r3, [r7, #16]
      break;
 80022d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022da:	693b      	ldr	r3, [r7, #16]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	017d7840 	.word	0x017d7840

080022f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e28d      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8083 	beq.w	800241a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002314:	4b94      	ldr	r3, [pc, #592]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b04      	cmp	r3, #4
 800231e:	d019      	beq.n	8002354 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002320:	4b91      	ldr	r3, [pc, #580]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002328:	2b08      	cmp	r3, #8
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800232c:	4b8e      	ldr	r3, [pc, #568]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002338:	d00c      	beq.n	8002354 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4b8b      	ldr	r3, [pc, #556]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b88      	ldr	r3, [pc, #544]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b84      	ldr	r3, [pc, #528]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05b      	beq.n	8002418 <HAL_RCC_OscConfig+0x124>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d157      	bne.n	8002418 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e25a      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x90>
 8002376:	4b7c      	ldr	r3, [pc, #496]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7b      	ldr	r2, [pc, #492]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xcc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0xb4>
 800238e:	4b76      	ldr	r3, [pc, #472]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a75      	ldr	r2, [pc, #468]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b73      	ldr	r3, [pc, #460]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a72      	ldr	r2, [pc, #456]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xcc>
 80023a8:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6e      	ldr	r2, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b6c      	ldr	r3, [pc, #432]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6b      	ldr	r2, [pc, #428]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fe6a 	bl	80010a0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fe66 	bl	80010a0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e21f      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b61      	ldr	r3, [pc, #388]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xdc>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe56 	bl	80010a0 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe52 	bl	80010a0 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e20b      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x104>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d06f      	beq.n	8002506 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002426:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d017      	beq.n	8002462 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d105      	bne.n	800244a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x186>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1d3      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4937      	ldr	r1, [pc, #220]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCC_OscConfig+0x278>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe fdff 	bl	80010a0 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fdfb 	bl	80010a0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1b4      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4925      	ldr	r1, [pc, #148]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_RCC_OscConfig+0x278>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fdde 	bl	80010a0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fdda 	bl	80010a0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e193      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d036      	beq.n	8002580 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_RCC_OscConfig+0x27c>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fdbe 	bl	80010a0 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fdba 	bl	80010a0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e173      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800253c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x234>
 8002546:	e01b      	b.n	8002580 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_OscConfig+0x27c>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe fda7 	bl	80010a0 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	e00e      	b.n	8002574 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe fda3 	bl	80010a0 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d907      	bls.n	8002574 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e15c      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
 8002568:	40023800 	.word	0x40023800
 800256c:	42470000 	.word	0x42470000
 8002570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	4b8a      	ldr	r3, [pc, #552]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ea      	bne.n	8002556 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8097 	beq.w	80026bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002592:	4b83      	ldr	r3, [pc, #524]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b7f      	ldr	r3, [pc, #508]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a7e      	ldr	r2, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b7c      	ldr	r3, [pc, #496]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b79      	ldr	r3, [pc, #484]	; (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a75      	ldr	r2, [pc, #468]	; (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d6:	f7fe fd63 	bl	80010a0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025de:	f7fe fd5f 	bl	80010a0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e118      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x31e>
 8002604:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x358>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b05      	cmp	r3, #5
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x340>
 800261a:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a60      	ldr	r2, [pc, #384]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a5d      	ldr	r2, [pc, #372]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0x358>
 8002634:	4b5a      	ldr	r3, [pc, #360]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a59      	ldr	r2, [pc, #356]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fd24 	bl	80010a0 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe fd20 	bl	80010a0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0d7      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ee      	beq.n	800265c <HAL_RCC_OscConfig+0x368>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fd0e 	bl	80010a0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe fd0a 	bl	80010a0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0c1      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ee      	bne.n	8002688 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80ad 	beq.w	8002820 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d060      	beq.n	8002794 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d145      	bne.n	8002766 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <HAL_RCC_OscConfig+0x4b4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fcde 	bl	80010a0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fcda 	bl	80010a0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e093      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	071b      	lsls	r3, r3, #28
 8002732:	491b      	ldr	r1, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x4b4>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7fe fcaf 	bl	80010a0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fcab 	bl	80010a0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e064      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x452>
 8002764:	e05c      	b.n	8002820 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_RCC_OscConfig+0x4b4>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fc98 	bl	80010a0 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fc94 	bl	80010a0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e04d      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x480>
 8002792:	e045      	b.n	8002820 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e040      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000
 80027a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_RCC_OscConfig+0x538>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d030      	beq.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d129      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d122      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d119      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d10f      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fa50 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fa96 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d001      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e04e      	b.n	8002986 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_TIM_Base_Start_IT+0xc4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d01d      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_TIM_Base_Start_IT+0xc8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_TIM_Base_Start_IT+0xcc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_TIM_Base_Start_IT+0xdc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40010400 	.word	0x40010400
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40001800 	.word	0x40001800

080029b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0202 	mvn.w	r2, #2
 80029dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f9b5 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9a7 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f9b8 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0204 	mvn.w	r2, #4
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f98b 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f97d 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f98e 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0208 	mvn.w	r2, #8
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f961 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f953 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f964 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0210 	mvn.w	r2, #16
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2208      	movs	r2, #8
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f937 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f929 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f93a 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10e      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0201 	mvn.w	r2, #1
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe f886 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d107      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fae0 	bl	8003120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8ff 	bl	8002d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0220 	mvn.w	r2, #32
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 faaa 	bl	800310c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIM_ConfigClockSource+0x1c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0b4      	b.n	8002d46 <HAL_TIM_ConfigClockSource+0x186>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c14:	d03e      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0xd4>
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1a:	f200 8087 	bhi.w	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	f000 8086 	beq.w	8002d32 <HAL_TIM_ConfigClockSource+0x172>
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	d87f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b70      	cmp	r3, #112	; 0x70
 8002c2e:	d01a      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xa6>
 8002c30:	2b70      	cmp	r3, #112	; 0x70
 8002c32:	d87b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b60      	cmp	r3, #96	; 0x60
 8002c36:	d050      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x11a>
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d877      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b50      	cmp	r3, #80	; 0x50
 8002c3e:	d03c      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xfa>
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d873      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d058      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x13a>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d86f      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b30      	cmp	r3, #48	; 0x30
 8002c4e:	d064      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d86b      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d060      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d867      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05c      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d05a      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	e062      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f000 f9ad 	bl	8002fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	609a      	str	r2, [r3, #8]
      break;
 8002c92:	e04f      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f000 f996 	bl	8002fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb6:	609a      	str	r2, [r3, #8]
      break;
 8002cb8:	e03c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f000 f90a 	bl	8002ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2150      	movs	r1, #80	; 0x50
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f963 	bl	8002f9e <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e02c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f000 f929 	bl	8002f3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2160      	movs	r1, #96	; 0x60
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f953 	bl	8002f9e <TIM_ITRx_SetConfig>
      break;
 8002cf8:	e01c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f000 f8ea 	bl	8002ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f943 	bl	8002f9e <TIM_ITRx_SetConfig>
      break;
 8002d18:	e00c      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f000 f93a 	bl	8002f9e <TIM_ITRx_SetConfig>
      break;
 8002d2a:	e003      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e000      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d00f      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3d      	ldr	r2, [pc, #244]	; (8002eb8 <TIM_Base_SetConfig+0x118>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3c      	ldr	r2, [pc, #240]	; (8002ebc <TIM_Base_SetConfig+0x11c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3b      	ldr	r2, [pc, #236]	; (8002ec0 <TIM_Base_SetConfig+0x120>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d108      	bne.n	8002df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02b      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d027      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <TIM_Base_SetConfig+0x118>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d023      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <TIM_Base_SetConfig+0x11c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01f      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <TIM_Base_SetConfig+0x120>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01b      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d017      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <TIM_Base_SetConfig+0x128>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <TIM_Base_SetConfig+0x12c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00f      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <TIM_Base_SetConfig+0x130>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <TIM_Base_SetConfig+0x134>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <TIM_Base_SetConfig+0x138>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a23      	ldr	r2, [pc, #140]	; (8002edc <TIM_Base_SetConfig+0x13c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0xf8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40010400 	.word	0x40010400
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40014400 	.word	0x40014400
 8002ed0:	40014800 	.word	0x40014800
 8002ed4:	40001800 	.word	0x40001800
 8002ed8:	40001c00 	.word	0x40001c00
 8002edc:	40002000 	.word	0x40002000

08002ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0201 	bic.w	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 030a 	bic.w	r3, r3, #10
 8002f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	621a      	str	r2, [r3, #32]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b087      	sub	sp, #28
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f023 0210 	bic.w	r2, r3, #16
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	031b      	lsls	r3, r3, #12
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f043 0307 	orr.w	r3, r3, #7
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	609a      	str	r2, [r3, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	021a      	lsls	r2, r3, #8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	609a      	str	r2, [r3, #8]
}
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003028:	2302      	movs	r3, #2
 800302a:	e05a      	b.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d022      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d01d      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d018      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00e      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d009      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a17      	ldr	r2, [pc, #92]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a15      	ldr	r2, [pc, #84]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10c      	bne.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	40010400 	.word	0x40010400
 8003104:	40014000 	.word	0x40014000
 8003108:	40001800 	.word	0x40001800

0800310c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e03f      	b.n	80031c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd fdf6 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	; 0x24
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ff49 	bl	8004010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d165      	bne.n	80032b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_UART_Transmit_DMA+0x26>
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e05e      	b.n	80032b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_UART_Transmit_DMA+0x38>
 8003204:	2302      	movs	r3, #2
 8003206:	e057      	b.n	80032b8 <HAL_UART_Transmit_DMA+0xe8>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2221      	movs	r2, #33	; 0x21
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <HAL_UART_Transmit_DMA+0xf0>)
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <HAL_UART_Transmit_DMA+0xf4>)
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <HAL_UART_Transmit_DMA+0xf8>)
 8003246:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	2200      	movs	r2, #0
 800324e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003250:	f107 0308 	add.w	r3, r7, #8
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3304      	adds	r3, #4
 8003264:	461a      	mov	r2, r3
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	f7fe f8e6 	bl	8001438 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003274:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3314      	adds	r3, #20
 8003284:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	617b      	str	r3, [r7, #20]
   return(result);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3314      	adds	r3, #20
 800329c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329e:	627a      	str	r2, [r7, #36]	; 0x24
 80032a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e5      	bne.n	800327e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3730      	adds	r7, #48	; 0x30
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	080038b1 	.word	0x080038b1
 80032c4:	0800394b 	.word	0x0800394b
 80032c8:	08003ac3 	.word	0x08003ac3

080032cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d11d      	bne.n	8003322 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_UART_Receive_DMA+0x26>
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e016      	b.n	8003324 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Receive_DMA+0x38>
 8003300:	2302      	movs	r3, #2
 8003302:	e00f      	b.n	8003324 <HAL_UART_Receive_DMA+0x58>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	461a      	mov	r2, r3
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fc1d 	bl	8003b58 <UART_Start_Receive_DMA>
 800331e:	4603      	mov	r3, r0
 8003320:	e000      	b.n	8003324 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b0ba      	sub	sp, #232	; 0xe8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800336a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_UART_IRQHandler+0x66>
 800337e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fd85 	bl	8003e9a <UART_Receive_IT>
      return;
 8003390:	e256      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80de 	beq.w	8003558 <HAL_UART_IRQHandler+0x22c>
 800339c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80d1 	beq.w	8003558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_UART_IRQHandler+0xae>
 80033c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_UART_IRQHandler+0xd2>
 80033e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f043 0202 	orr.w	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_UART_IRQHandler+0xf6>
 800340a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0204 	orr.w	r2, r3, #4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d011      	beq.n	8003452 <HAL_UART_IRQHandler+0x126>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800343a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0208 	orr.w	r2, r3, #8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 81ed 	beq.w	8003836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800345c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_UART_IRQHandler+0x14e>
 8003468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fd10 	bl	8003e9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_UART_IRQHandler+0x17a>
 800349e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d04f      	beq.n	8003546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fc18 	bl	8003cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d141      	bne.n	800353e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1d9      	bne.n	80034ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d013      	beq.n	8003536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	4a7d      	ldr	r2, [pc, #500]	; (8003708 <HAL_UART_IRQHandler+0x3dc>)
 8003514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe f854 	bl	80015c8 <HAL_DMA_Abort_IT>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003530:	4610      	mov	r0, r2
 8003532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	e00e      	b.n	8003554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9a4 	bl	8003884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	e00a      	b.n	8003554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9a0 	bl	8003884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e006      	b.n	8003554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f99c 	bl	8003884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003552:	e170      	b.n	8003836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	bf00      	nop
    return;
 8003556:	e16e      	b.n	8003836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	2b01      	cmp	r3, #1
 800355e:	f040 814a 	bne.w	80037f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8143 	beq.w	80037f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 813c 	beq.w	80037f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	f040 80b4 	bne.w	800370c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8140 	beq.w	800383a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035c2:	429a      	cmp	r2, r3
 80035c4:	f080 8139 	bcs.w	800383a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035da:	f000 8088 	beq.w	80036ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800360a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800360e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1d9      	bne.n	80035de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800363a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3314      	adds	r3, #20
 800364a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800364e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e1      	bne.n	800362a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800368a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800368c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e3      	bne.n	8003666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036be:	f023 0310 	bic.w	r3, r3, #16
 80036c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80036d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e3      	bne.n	80036ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fefd 	bl	80014e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8ca 	bl	8003898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003704:	e099      	b.n	800383a <HAL_UART_IRQHandler+0x50e>
 8003706:	bf00      	nop
 8003708:	08003da3 	.word	0x08003da3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003714:	b29b      	uxth	r3, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 808b 	beq.w	800383e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8086 	beq.w	800383e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003756:	647a      	str	r2, [r7, #68]	; 0x44
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800375c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e3      	bne.n	8003732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3314      	adds	r3, #20
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	623b      	str	r3, [r7, #32]
   return(result);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800378e:	633a      	str	r2, [r7, #48]	; 0x30
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e3      	bne.n	800376a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037d4:	61fa      	str	r2, [r7, #28]
 80037d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	617b      	str	r3, [r7, #20]
   return(result);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e3      	bne.n	80037b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f852 	bl	8003898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037f4:	e023      	b.n	800383e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_UART_IRQHandler+0x4ea>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fadb 	bl	8003dca <UART_Transmit_IT>
    return;
 8003814:	e014      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <HAL_UART_IRQHandler+0x514>
 8003822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb1b 	bl	8003e6a <UART_EndTransmit_IT>
    return;
 8003834:	e004      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
    return;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
      return;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <HAL_UART_IRQHandler+0x514>
      return;
 800383e:	bf00      	nop
  }
}
 8003840:	37e8      	adds	r7, #232	; 0xe8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop

08003848 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b090      	sub	sp, #64	; 0x40
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d137      	bne.n	800393c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80038cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ce:	2200      	movs	r2, #0
 80038d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	623b      	str	r3, [r7, #32]
   return(result);
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3314      	adds	r3, #20
 80038f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f2:	633a      	str	r2, [r7, #48]	; 0x30
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	60fb      	str	r3, [r7, #12]
   return(result);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003926:	61fa      	str	r2, [r7, #28]
 8003928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	69b9      	ldr	r1, [r7, #24]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	617b      	str	r3, [r7, #20]
   return(result);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800393a:	e002      	b.n	8003942 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800393c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800393e:	f7fd f96f 	bl	8000c20 <HAL_UART_TxCpltCallback>
}
 8003942:	bf00      	nop
 8003944:	3740      	adds	r7, #64	; 0x40
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff ff75 	bl	8003848 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b09c      	sub	sp, #112	; 0x70
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d172      	bne.n	8003a68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003984:	2200      	movs	r2, #0
 8003986:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399e:	66bb      	str	r3, [r7, #104]	; 0x68
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80039aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	667b      	str	r3, [r7, #100]	; 0x64
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039dc:	647a      	str	r2, [r7, #68]	; 0x44
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e5      	bne.n	80039bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3314      	adds	r3, #20
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a06:	663b      	str	r3, [r7, #96]	; 0x60
 8003a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3314      	adds	r3, #20
 8003a0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a10:	633a      	str	r2, [r7, #48]	; 0x30
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e5      	bne.n	80039f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d119      	bne.n	8003a68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0310 	bic.w	r3, r3, #16
 8003a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	617b      	str	r3, [r7, #20]
   return(result);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e5      	bne.n	8003a34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a74:	4619      	mov	r1, r3
 8003a76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a78:	f7ff ff0e 	bl	8003898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a7c:	e002      	b.n	8003a84 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a80:	f7ff feec 	bl	800385c <HAL_UART_RxCpltCallback>
}
 8003a84:	bf00      	nop
 8003a86:	3770      	adds	r7, #112	; 0x70
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d108      	bne.n	8003ab4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4619      	mov	r1, r3
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff fef3 	bl	8003898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ab2:	e002      	b.n	8003aba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7ff fedb 	bl	8003870 <HAL_UART_RxHalfCpltCallback>
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b80      	cmp	r3, #128	; 0x80
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b21      	cmp	r3, #33	; 0x21
 8003af4:	d108      	bne.n	8003b08 <UART_DMAError+0x46>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2200      	movs	r2, #0
 8003b00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b02:	68b8      	ldr	r0, [r7, #8]
 8003b04:	f000 f8c2 	bl	8003c8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b22      	cmp	r3, #34	; 0x22
 8003b28:	d108      	bne.n	8003b3c <UART_DMAError+0x7a>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2200      	movs	r2, #0
 8003b34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b36:	68b8      	ldr	r0, [r7, #8]
 8003b38:	f000 f8d0 	bl	8003cdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0210 	orr.w	r2, r3, #16
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b48:	68b8      	ldr	r0, [r7, #8]
 8003b4a:	f7ff fe9b 	bl	8003884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b098      	sub	sp, #96	; 0x60
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2222      	movs	r2, #34	; 0x22
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <UART_Start_Receive_DMA+0x128>)
 8003b86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <UART_Start_Receive_DMA+0x12c>)
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <UART_Start_Receive_DMA+0x130>)
 8003b96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	f7fd fc3e 	bl	8001438 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	657b      	str	r3, [r7, #84]	; 0x54
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	617b      	str	r3, [r7, #20]
   return(result);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c58:	653b      	str	r3, [r7, #80]	; 0x50
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c62:	627a      	str	r2, [r7, #36]	; 0x24
 8003c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3760      	adds	r7, #96	; 0x60
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08003967 	.word	0x08003967
 8003c84:	08003a8d 	.word	0x08003a8d
 8003c88:	08003ac3 	.word	0x08003ac3

08003c8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	61ba      	str	r2, [r7, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003cd0:	bf00      	nop
 8003cd2:	3724      	adds	r7, #36	; 0x24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b095      	sub	sp, #84	; 0x54
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d04:	643a      	str	r2, [r7, #64]	; 0x40
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e5      	bne.n	8003ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d119      	bne.n	8003d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 0310 	bic.w	r3, r3, #16
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d74:	61ba      	str	r2, [r7, #24]
 8003d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	613b      	str	r3, [r7, #16]
   return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d96:	bf00      	nop
 8003d98:	3754      	adds	r7, #84	; 0x54
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7ff fd61 	bl	8003884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b21      	cmp	r3, #33	; 0x21
 8003ddc:	d13e      	bne.n	8003e5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de6:	d114      	bne.n	8003e12 <UART_Transmit_IT+0x48>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d110      	bne.n	8003e12 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	e008      	b.n	8003e24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6211      	str	r1, [r2, #32]
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4619      	mov	r1, r3
 8003e32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fc fec8 	bl	8000c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08c      	sub	sp, #48	; 0x30
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b22      	cmp	r3, #34	; 0x22
 8003eac:	f040 80ab 	bne.w	8004006 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d117      	bne.n	8003eea <UART_Receive_IT+0x50>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d113      	bne.n	8003eea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	1c9a      	adds	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee8:	e026      	b.n	8003f38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d007      	beq.n	8003f0e <UART_Receive_IT+0x74>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <UART_Receive_IT+0x82>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e008      	b.n	8003f2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d15a      	bne.n	8004002 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0220 	bic.w	r2, r2, #32
 8003f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d135      	bne.n	8003ff8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	623a      	str	r2, [r7, #32]
 8003fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	6a3a      	ldr	r2, [r7, #32]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d10a      	bne.n	8003fea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fc51 	bl	8003898 <HAL_UARTEx_RxEventCallback>
 8003ff6:	e002      	b.n	8003ffe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fc2f 	bl	800385c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e002      	b.n	8004008 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3730      	adds	r7, #48	; 0x30
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	b09f      	sub	sp, #124	; 0x7c
 8004016:	af00      	add	r7, sp, #0
 8004018:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	68d9      	ldr	r1, [r3, #12]
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	ea40 0301 	orr.w	r3, r0, r1
 8004030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	431a      	orrs	r2, r3
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	431a      	orrs	r2, r3
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4313      	orrs	r3, r2
 8004048:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004054:	f021 010c 	bic.w	r1, r1, #12
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405e:	430b      	orrs	r3, r1
 8004060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	6999      	ldr	r1, [r3, #24]
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	ea40 0301 	orr.w	r3, r0, r1
 8004078:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4bc5      	ldr	r3, [pc, #788]	; (8004394 <UART_SetConfig+0x384>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d004      	beq.n	800408e <UART_SetConfig+0x7e>
 8004084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4bc3      	ldr	r3, [pc, #780]	; (8004398 <UART_SetConfig+0x388>)
 800408a:	429a      	cmp	r2, r3
 800408c:	d103      	bne.n	8004096 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800408e:	f7fd ffc1 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8004092:	6778      	str	r0, [r7, #116]	; 0x74
 8004094:	e002      	b.n	800409c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004096:	f7fd ffa9 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 800409a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a4:	f040 80b6 	bne.w	8004214 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040aa:	461c      	mov	r4, r3
 80040ac:	f04f 0500 	mov.w	r5, #0
 80040b0:	4622      	mov	r2, r4
 80040b2:	462b      	mov	r3, r5
 80040b4:	1891      	adds	r1, r2, r2
 80040b6:	6439      	str	r1, [r7, #64]	; 0x40
 80040b8:	415b      	adcs	r3, r3
 80040ba:	647b      	str	r3, [r7, #68]	; 0x44
 80040bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040c0:	1912      	adds	r2, r2, r4
 80040c2:	eb45 0303 	adc.w	r3, r5, r3
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	00d9      	lsls	r1, r3, #3
 80040d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d4:	00d0      	lsls	r0, r2, #3
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	1911      	adds	r1, r2, r4
 80040dc:	6639      	str	r1, [r7, #96]	; 0x60
 80040de:	416b      	adcs	r3, r5
 80040e0:	667b      	str	r3, [r7, #100]	; 0x64
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80040f0:	415b      	adcs	r3, r3
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040fc:	f7fc fa90 	bl	8000620 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4ba5      	ldr	r3, [pc, #660]	; (800439c <UART_SetConfig+0x38c>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	011e      	lsls	r6, r3, #4
 800410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004110:	461c      	mov	r4, r3
 8004112:	f04f 0500 	mov.w	r5, #0
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	1891      	adds	r1, r2, r2
 800411c:	6339      	str	r1, [r7, #48]	; 0x30
 800411e:	415b      	adcs	r3, r3
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
 8004122:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004126:	1912      	adds	r2, r2, r4
 8004128:	eb45 0303 	adc.w	r3, r5, r3
 800412c:	f04f 0000 	mov.w	r0, #0
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	00d9      	lsls	r1, r3, #3
 8004136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800413a:	00d0      	lsls	r0, r2, #3
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	1911      	adds	r1, r2, r4
 8004142:	65b9      	str	r1, [r7, #88]	; 0x58
 8004144:	416b      	adcs	r3, r5
 8004146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	1891      	adds	r1, r2, r2
 8004154:	62b9      	str	r1, [r7, #40]	; 0x28
 8004156:	415b      	adcs	r3, r3
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800415e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004162:	f7fc fa5d 	bl	8000620 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4b8c      	ldr	r3, [pc, #560]	; (800439c <UART_SetConfig+0x38c>)
 800416c:	fba3 1302 	umull	r1, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	2164      	movs	r1, #100	; 0x64
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	3332      	adds	r3, #50	; 0x32
 800417e:	4a87      	ldr	r2, [pc, #540]	; (800439c <UART_SetConfig+0x38c>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800418c:	441e      	add	r6, r3
 800418e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004190:	4618      	mov	r0, r3
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	1894      	adds	r4, r2, r2
 800419c:	623c      	str	r4, [r7, #32]
 800419e:	415b      	adcs	r3, r3
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a6:	1812      	adds	r2, r2, r0
 80041a8:	eb41 0303 	adc.w	r3, r1, r3
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	f04f 0500 	mov.w	r5, #0
 80041b4:	00dd      	lsls	r5, r3, #3
 80041b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041ba:	00d4      	lsls	r4, r2, #3
 80041bc:	4622      	mov	r2, r4
 80041be:	462b      	mov	r3, r5
 80041c0:	1814      	adds	r4, r2, r0
 80041c2:	653c      	str	r4, [r7, #80]	; 0x50
 80041c4:	414b      	adcs	r3, r1
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	1891      	adds	r1, r2, r2
 80041d4:	61b9      	str	r1, [r7, #24]
 80041d6:	415b      	adcs	r3, r3
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041e2:	f7fc fa1d 	bl	8000620 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b6c      	ldr	r3, [pc, #432]	; (800439c <UART_SetConfig+0x38c>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	; 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a67      	ldr	r2, [pc, #412]	; (800439c <UART_SetConfig+0x38c>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 0207 	and.w	r2, r3, #7
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4432      	add	r2, r6
 8004210:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004212:	e0b9      	b.n	8004388 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004216:	461c      	mov	r4, r3
 8004218:	f04f 0500 	mov.w	r5, #0
 800421c:	4622      	mov	r2, r4
 800421e:	462b      	mov	r3, r5
 8004220:	1891      	adds	r1, r2, r2
 8004222:	6139      	str	r1, [r7, #16]
 8004224:	415b      	adcs	r3, r3
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800422c:	1912      	adds	r2, r2, r4
 800422e:	eb45 0303 	adc.w	r3, r5, r3
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	00d9      	lsls	r1, r3, #3
 800423c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004240:	00d0      	lsls	r0, r2, #3
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	eb12 0804 	adds.w	r8, r2, r4
 800424a:	eb43 0905 	adc.w	r9, r3, r5
 800424e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4618      	mov	r0, r3
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	008b      	lsls	r3, r1, #2
 8004262:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004266:	0082      	lsls	r2, r0, #2
 8004268:	4640      	mov	r0, r8
 800426a:	4649      	mov	r1, r9
 800426c:	f7fc f9d8 	bl	8000620 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <UART_SetConfig+0x38c>)
 8004276:	fba3 2302 	umull	r2, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011e      	lsls	r6, r3, #4
 800427e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004280:	4618      	mov	r0, r3
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	1894      	adds	r4, r2, r2
 800428c:	60bc      	str	r4, [r7, #8]
 800428e:	415b      	adcs	r3, r3
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004296:	1812      	adds	r2, r2, r0
 8004298:	eb41 0303 	adc.w	r3, r1, r3
 800429c:	f04f 0400 	mov.w	r4, #0
 80042a0:	f04f 0500 	mov.w	r5, #0
 80042a4:	00dd      	lsls	r5, r3, #3
 80042a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042aa:	00d4      	lsls	r4, r2, #3
 80042ac:	4622      	mov	r2, r4
 80042ae:	462b      	mov	r3, r5
 80042b0:	1814      	adds	r4, r2, r0
 80042b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80042b4:	414b      	adcs	r3, r1
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	f04f 0100 	mov.w	r1, #0
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	008b      	lsls	r3, r1, #2
 80042cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042d0:	0082      	lsls	r2, r0, #2
 80042d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042d6:	f7fc f9a3 	bl	8000620 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <UART_SetConfig+0x38c>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <UART_SetConfig+0x38c>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	441e      	add	r6, r3
 8004300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004302:	4618      	mov	r0, r3
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	1894      	adds	r4, r2, r2
 800430e:	603c      	str	r4, [r7, #0]
 8004310:	415b      	adcs	r3, r3
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004318:	1812      	adds	r2, r2, r0
 800431a:	eb41 0303 	adc.w	r3, r1, r3
 800431e:	f04f 0400 	mov.w	r4, #0
 8004322:	f04f 0500 	mov.w	r5, #0
 8004326:	00dd      	lsls	r5, r3, #3
 8004328:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800432c:	00d4      	lsls	r4, r2, #3
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	eb12 0a00 	adds.w	sl, r2, r0
 8004336:	eb43 0b01 	adc.w	fp, r3, r1
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	f04f 0100 	mov.w	r1, #0
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	008b      	lsls	r3, r1, #2
 800434e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004352:	0082      	lsls	r2, r0, #2
 8004354:	4650      	mov	r0, sl
 8004356:	4659      	mov	r1, fp
 8004358:	f7fc f962 	bl	8000620 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <UART_SetConfig+0x38c>)
 8004362:	fba3 1302 	umull	r1, r3, r3, r2
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2164      	movs	r1, #100	; 0x64
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	3332      	adds	r3, #50	; 0x32
 8004374:	4a09      	ldr	r2, [pc, #36]	; (800439c <UART_SetConfig+0x38c>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	f003 020f 	and.w	r2, r3, #15
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4432      	add	r2, r6
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	377c      	adds	r7, #124	; 0x7c
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004392:	bf00      	nop
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4d0d      	ldr	r5, [pc, #52]	; (80043d8 <__libc_init_array+0x38>)
 80043a4:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a6:	1b64      	subs	r4, r4, r5
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	2600      	movs	r6, #0
 80043ac:	42a6      	cmp	r6, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	4d0b      	ldr	r5, [pc, #44]	; (80043e0 <__libc_init_array+0x40>)
 80043b2:	4c0c      	ldr	r4, [pc, #48]	; (80043e4 <__libc_init_array+0x44>)
 80043b4:	f000 fd8c 	bl	8004ed0 <_init>
 80043b8:	1b64      	subs	r4, r4, r5
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	2600      	movs	r6, #0
 80043be:	42a6      	cmp	r6, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c8:	4798      	blx	r3
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d2:	4798      	blx	r3
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	080052e0 	.word	0x080052e0
 80043dc:	080052e0 	.word	0x080052e0
 80043e0:	080052e0 	.word	0x080052e0
 80043e4:	080052e4 	.word	0x080052e4

080043e8 <memset>:
 80043e8:	4402      	add	r2, r0
 80043ea:	4603      	mov	r3, r0
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d100      	bne.n	80043f2 <memset+0xa>
 80043f0:	4770      	bx	lr
 80043f2:	f803 1b01 	strb.w	r1, [r3], #1
 80043f6:	e7f9      	b.n	80043ec <memset+0x4>

080043f8 <sinf>:
 80043f8:	ee10 3a10 	vmov	r3, s0
 80043fc:	b507      	push	{r0, r1, r2, lr}
 80043fe:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <sinf+0x7c>)
 8004400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004404:	4293      	cmp	r3, r2
 8004406:	dc05      	bgt.n	8004414 <sinf+0x1c>
 8004408:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004478 <sinf+0x80>
 800440c:	2000      	movs	r0, #0
 800440e:	f000 fc5b 	bl	8004cc8 <__kernel_sinf>
 8004412:	e004      	b.n	800441e <sinf+0x26>
 8004414:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004418:	db04      	blt.n	8004424 <sinf+0x2c>
 800441a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800441e:	b003      	add	sp, #12
 8004420:	f85d fb04 	ldr.w	pc, [sp], #4
 8004424:	4668      	mov	r0, sp
 8004426:	f000 f829 	bl	800447c <__ieee754_rem_pio2f>
 800442a:	f000 0003 	and.w	r0, r0, #3
 800442e:	2801      	cmp	r0, #1
 8004430:	d008      	beq.n	8004444 <sinf+0x4c>
 8004432:	2802      	cmp	r0, #2
 8004434:	d00d      	beq.n	8004452 <sinf+0x5a>
 8004436:	b9b0      	cbnz	r0, 8004466 <sinf+0x6e>
 8004438:	eddd 0a01 	vldr	s1, [sp, #4]
 800443c:	ed9d 0a00 	vldr	s0, [sp]
 8004440:	2001      	movs	r0, #1
 8004442:	e7e4      	b.n	800440e <sinf+0x16>
 8004444:	eddd 0a01 	vldr	s1, [sp, #4]
 8004448:	ed9d 0a00 	vldr	s0, [sp]
 800444c:	f000 f952 	bl	80046f4 <__kernel_cosf>
 8004450:	e7e5      	b.n	800441e <sinf+0x26>
 8004452:	eddd 0a01 	vldr	s1, [sp, #4]
 8004456:	ed9d 0a00 	vldr	s0, [sp]
 800445a:	2001      	movs	r0, #1
 800445c:	f000 fc34 	bl	8004cc8 <__kernel_sinf>
 8004460:	eeb1 0a40 	vneg.f32	s0, s0
 8004464:	e7db      	b.n	800441e <sinf+0x26>
 8004466:	eddd 0a01 	vldr	s1, [sp, #4]
 800446a:	ed9d 0a00 	vldr	s0, [sp]
 800446e:	f000 f941 	bl	80046f4 <__kernel_cosf>
 8004472:	e7f5      	b.n	8004460 <sinf+0x68>
 8004474:	3f490fd8 	.word	0x3f490fd8
 8004478:	00000000 	.word	0x00000000

0800447c <__ieee754_rem_pio2f>:
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	ee10 6a10 	vmov	r6, s0
 8004482:	4b8e      	ldr	r3, [pc, #568]	; (80046bc <__ieee754_rem_pio2f+0x240>)
 8004484:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004488:	429d      	cmp	r5, r3
 800448a:	b087      	sub	sp, #28
 800448c:	eef0 7a40 	vmov.f32	s15, s0
 8004490:	4604      	mov	r4, r0
 8004492:	dc05      	bgt.n	80044a0 <__ieee754_rem_pio2f+0x24>
 8004494:	2300      	movs	r3, #0
 8004496:	ed80 0a00 	vstr	s0, [r0]
 800449a:	6043      	str	r3, [r0, #4]
 800449c:	2000      	movs	r0, #0
 800449e:	e01a      	b.n	80044d6 <__ieee754_rem_pio2f+0x5a>
 80044a0:	4b87      	ldr	r3, [pc, #540]	; (80046c0 <__ieee754_rem_pio2f+0x244>)
 80044a2:	429d      	cmp	r5, r3
 80044a4:	dc46      	bgt.n	8004534 <__ieee754_rem_pio2f+0xb8>
 80044a6:	2e00      	cmp	r6, #0
 80044a8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80046c4 <__ieee754_rem_pio2f+0x248>
 80044ac:	4b86      	ldr	r3, [pc, #536]	; (80046c8 <__ieee754_rem_pio2f+0x24c>)
 80044ae:	f025 050f 	bic.w	r5, r5, #15
 80044b2:	dd1f      	ble.n	80044f4 <__ieee754_rem_pio2f+0x78>
 80044b4:	429d      	cmp	r5, r3
 80044b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044ba:	d00e      	beq.n	80044da <__ieee754_rem_pio2f+0x5e>
 80044bc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80046cc <__ieee754_rem_pio2f+0x250>
 80044c0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80044c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044c8:	ed80 0a00 	vstr	s0, [r0]
 80044cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044d0:	2001      	movs	r0, #1
 80044d2:	edc4 7a01 	vstr	s15, [r4, #4]
 80044d6:	b007      	add	sp, #28
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044da:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80046d0 <__ieee754_rem_pio2f+0x254>
 80044de:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80046d4 <__ieee754_rem_pio2f+0x258>
 80044e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044e6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80044ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80044ee:	edc0 6a00 	vstr	s13, [r0]
 80044f2:	e7eb      	b.n	80044cc <__ieee754_rem_pio2f+0x50>
 80044f4:	429d      	cmp	r5, r3
 80044f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80044fa:	d00e      	beq.n	800451a <__ieee754_rem_pio2f+0x9e>
 80044fc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80046cc <__ieee754_rem_pio2f+0x250>
 8004500:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004504:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004508:	ed80 0a00 	vstr	s0, [r0]
 800450c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	edc4 7a01 	vstr	s15, [r4, #4]
 8004518:	e7dd      	b.n	80044d6 <__ieee754_rem_pio2f+0x5a>
 800451a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80046d0 <__ieee754_rem_pio2f+0x254>
 800451e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80046d4 <__ieee754_rem_pio2f+0x258>
 8004522:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004526:	ee77 6a87 	vadd.f32	s13, s15, s14
 800452a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800452e:	edc0 6a00 	vstr	s13, [r0]
 8004532:	e7eb      	b.n	800450c <__ieee754_rem_pio2f+0x90>
 8004534:	4b68      	ldr	r3, [pc, #416]	; (80046d8 <__ieee754_rem_pio2f+0x25c>)
 8004536:	429d      	cmp	r5, r3
 8004538:	dc72      	bgt.n	8004620 <__ieee754_rem_pio2f+0x1a4>
 800453a:	f000 fc0d 	bl	8004d58 <fabsf>
 800453e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80046dc <__ieee754_rem_pio2f+0x260>
 8004542:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004546:	eee0 7a07 	vfma.f32	s15, s0, s14
 800454a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800454e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004552:	ee17 0a90 	vmov	r0, s15
 8004556:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80046c4 <__ieee754_rem_pio2f+0x248>
 800455a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800455e:	281f      	cmp	r0, #31
 8004560:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80046cc <__ieee754_rem_pio2f+0x250>
 8004564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004568:	eeb1 6a47 	vneg.f32	s12, s14
 800456c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004570:	ee16 2a90 	vmov	r2, s13
 8004574:	dc1c      	bgt.n	80045b0 <__ieee754_rem_pio2f+0x134>
 8004576:	495a      	ldr	r1, [pc, #360]	; (80046e0 <__ieee754_rem_pio2f+0x264>)
 8004578:	1e47      	subs	r7, r0, #1
 800457a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800457e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004582:	428b      	cmp	r3, r1
 8004584:	d014      	beq.n	80045b0 <__ieee754_rem_pio2f+0x134>
 8004586:	6022      	str	r2, [r4, #0]
 8004588:	ed94 7a00 	vldr	s14, [r4]
 800458c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004590:	2e00      	cmp	r6, #0
 8004592:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004596:	ed84 0a01 	vstr	s0, [r4, #4]
 800459a:	da9c      	bge.n	80044d6 <__ieee754_rem_pio2f+0x5a>
 800459c:	eeb1 7a47 	vneg.f32	s14, s14
 80045a0:	eeb1 0a40 	vneg.f32	s0, s0
 80045a4:	ed84 7a00 	vstr	s14, [r4]
 80045a8:	ed84 0a01 	vstr	s0, [r4, #4]
 80045ac:	4240      	negs	r0, r0
 80045ae:	e792      	b.n	80044d6 <__ieee754_rem_pio2f+0x5a>
 80045b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80045b4:	15eb      	asrs	r3, r5, #23
 80045b6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80045ba:	2d08      	cmp	r5, #8
 80045bc:	dde3      	ble.n	8004586 <__ieee754_rem_pio2f+0x10a>
 80045be:	eddf 7a44 	vldr	s15, [pc, #272]	; 80046d0 <__ieee754_rem_pio2f+0x254>
 80045c2:	eef0 6a40 	vmov.f32	s13, s0
 80045c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80045ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80045ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 80045d2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80046d4 <__ieee754_rem_pio2f+0x258>
 80045d6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80045da:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80045de:	eef0 7a40 	vmov.f32	s15, s0
 80045e2:	ee15 2a90 	vmov	r2, s11
 80045e6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80045ea:	1a5b      	subs	r3, r3, r1
 80045ec:	2b19      	cmp	r3, #25
 80045ee:	dc04      	bgt.n	80045fa <__ieee754_rem_pio2f+0x17e>
 80045f0:	edc4 5a00 	vstr	s11, [r4]
 80045f4:	eeb0 0a66 	vmov.f32	s0, s13
 80045f8:	e7c6      	b.n	8004588 <__ieee754_rem_pio2f+0x10c>
 80045fa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80046e4 <__ieee754_rem_pio2f+0x268>
 80045fe:	eeb0 0a66 	vmov.f32	s0, s13
 8004602:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004606:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800460a:	eddf 6a37 	vldr	s13, [pc, #220]	; 80046e8 <__ieee754_rem_pio2f+0x26c>
 800460e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004612:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004616:	ee30 7a67 	vsub.f32	s14, s0, s15
 800461a:	ed84 7a00 	vstr	s14, [r4]
 800461e:	e7b3      	b.n	8004588 <__ieee754_rem_pio2f+0x10c>
 8004620:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004624:	db06      	blt.n	8004634 <__ieee754_rem_pio2f+0x1b8>
 8004626:	ee70 7a40 	vsub.f32	s15, s0, s0
 800462a:	edc0 7a01 	vstr	s15, [r0, #4]
 800462e:	edc0 7a00 	vstr	s15, [r0]
 8004632:	e733      	b.n	800449c <__ieee754_rem_pio2f+0x20>
 8004634:	15ea      	asrs	r2, r5, #23
 8004636:	3a86      	subs	r2, #134	; 0x86
 8004638:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004644:	eddf 6a29 	vldr	s13, [pc, #164]	; 80046ec <__ieee754_rem_pio2f+0x270>
 8004648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800464c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004650:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004654:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004658:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800465c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004660:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004664:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004668:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800466c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	edcd 7a05 	vstr	s15, [sp, #20]
 8004678:	d11e      	bne.n	80046b8 <__ieee754_rem_pio2f+0x23c>
 800467a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	bf14      	ite	ne
 8004684:	2302      	movne	r3, #2
 8004686:	2301      	moveq	r3, #1
 8004688:	4919      	ldr	r1, [pc, #100]	; (80046f0 <__ieee754_rem_pio2f+0x274>)
 800468a:	9101      	str	r1, [sp, #4]
 800468c:	2102      	movs	r1, #2
 800468e:	9100      	str	r1, [sp, #0]
 8004690:	a803      	add	r0, sp, #12
 8004692:	4621      	mov	r1, r4
 8004694:	f000 f88e 	bl	80047b4 <__kernel_rem_pio2f>
 8004698:	2e00      	cmp	r6, #0
 800469a:	f6bf af1c 	bge.w	80044d6 <__ieee754_rem_pio2f+0x5a>
 800469e:	edd4 7a00 	vldr	s15, [r4]
 80046a2:	eef1 7a67 	vneg.f32	s15, s15
 80046a6:	edc4 7a00 	vstr	s15, [r4]
 80046aa:	edd4 7a01 	vldr	s15, [r4, #4]
 80046ae:	eef1 7a67 	vneg.f32	s15, s15
 80046b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80046b6:	e779      	b.n	80045ac <__ieee754_rem_pio2f+0x130>
 80046b8:	2303      	movs	r3, #3
 80046ba:	e7e5      	b.n	8004688 <__ieee754_rem_pio2f+0x20c>
 80046bc:	3f490fd8 	.word	0x3f490fd8
 80046c0:	4016cbe3 	.word	0x4016cbe3
 80046c4:	3fc90f80 	.word	0x3fc90f80
 80046c8:	3fc90fd0 	.word	0x3fc90fd0
 80046cc:	37354443 	.word	0x37354443
 80046d0:	37354400 	.word	0x37354400
 80046d4:	2e85a308 	.word	0x2e85a308
 80046d8:	43490f80 	.word	0x43490f80
 80046dc:	3f22f984 	.word	0x3f22f984
 80046e0:	08004f08 	.word	0x08004f08
 80046e4:	2e85a300 	.word	0x2e85a300
 80046e8:	248d3132 	.word	0x248d3132
 80046ec:	43800000 	.word	0x43800000
 80046f0:	08004f88 	.word	0x08004f88

080046f4 <__kernel_cosf>:
 80046f4:	ee10 3a10 	vmov	r3, s0
 80046f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004700:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004704:	da05      	bge.n	8004712 <__kernel_cosf+0x1e>
 8004706:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800470a:	ee17 2a90 	vmov	r2, s15
 800470e:	2a00      	cmp	r2, #0
 8004710:	d03d      	beq.n	800478e <__kernel_cosf+0x9a>
 8004712:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004716:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004794 <__kernel_cosf+0xa0>
 800471a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004798 <__kernel_cosf+0xa4>
 800471e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800479c <__kernel_cosf+0xa8>
 8004722:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <__kernel_cosf+0xac>)
 8004724:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004728:	4293      	cmp	r3, r2
 800472a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80047a4 <__kernel_cosf+0xb0>
 800472e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004732:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047a8 <__kernel_cosf+0xb4>
 8004736:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800473a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80047ac <__kernel_cosf+0xb8>
 800473e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004742:	eeb0 7a66 	vmov.f32	s14, s13
 8004746:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800474a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800474e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004752:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004756:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800475a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800475e:	dc04      	bgt.n	800476a <__kernel_cosf+0x76>
 8004760:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004764:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004768:	4770      	bx	lr
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <__kernel_cosf+0xbc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	bfda      	itte	le
 8004770:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004774:	ee06 3a90 	vmovle	s13, r3
 8004778:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800477c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004780:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004784:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004788:	ee30 0a67 	vsub.f32	s0, s0, s15
 800478c:	4770      	bx	lr
 800478e:	eeb0 0a46 	vmov.f32	s0, s12
 8004792:	4770      	bx	lr
 8004794:	ad47d74e 	.word	0xad47d74e
 8004798:	310f74f6 	.word	0x310f74f6
 800479c:	3d2aaaab 	.word	0x3d2aaaab
 80047a0:	3e999999 	.word	0x3e999999
 80047a4:	b493f27c 	.word	0xb493f27c
 80047a8:	37d00d01 	.word	0x37d00d01
 80047ac:	bab60b61 	.word	0xbab60b61
 80047b0:	3f480000 	.word	0x3f480000

080047b4 <__kernel_rem_pio2f>:
 80047b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b8:	ed2d 8b04 	vpush	{d8-d9}
 80047bc:	b0d7      	sub	sp, #348	; 0x15c
 80047be:	4616      	mov	r6, r2
 80047c0:	4698      	mov	r8, r3
 80047c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80047c4:	4bbb      	ldr	r3, [pc, #748]	; (8004ab4 <__kernel_rem_pio2f+0x300>)
 80047c6:	9001      	str	r0, [sp, #4]
 80047c8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80047cc:	1d33      	adds	r3, r6, #4
 80047ce:	460d      	mov	r5, r1
 80047d0:	f108 39ff 	add.w	r9, r8, #4294967295
 80047d4:	db29      	blt.n	800482a <__kernel_rem_pio2f+0x76>
 80047d6:	1ef1      	subs	r1, r6, #3
 80047d8:	bf48      	it	mi
 80047da:	1d31      	addmi	r1, r6, #4
 80047dc:	10c9      	asrs	r1, r1, #3
 80047de:	1c4c      	adds	r4, r1, #1
 80047e0:	00e3      	lsls	r3, r4, #3
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80047e6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004ac4 <__kernel_rem_pio2f+0x310>
 80047ea:	eba1 0009 	sub.w	r0, r1, r9
 80047ee:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80047f2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80047f6:	eb07 0c09 	add.w	ip, r7, r9
 80047fa:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80047fe:	2300      	movs	r3, #0
 8004800:	4563      	cmp	r3, ip
 8004802:	dd14      	ble.n	800482e <__kernel_rem_pio2f+0x7a>
 8004804:	ab1a      	add	r3, sp, #104	; 0x68
 8004806:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800480a:	46cc      	mov	ip, r9
 800480c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8004810:	f1c8 0b01 	rsb	fp, r8, #1
 8004814:	eb0b 020c 	add.w	r2, fp, ip
 8004818:	4297      	cmp	r7, r2
 800481a:	db27      	blt.n	800486c <__kernel_rem_pio2f+0xb8>
 800481c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004820:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004ac4 <__kernel_rem_pio2f+0x310>
 8004824:	4618      	mov	r0, r3
 8004826:	2200      	movs	r2, #0
 8004828:	e016      	b.n	8004858 <__kernel_rem_pio2f+0xa4>
 800482a:	2100      	movs	r1, #0
 800482c:	e7d7      	b.n	80047de <__kernel_rem_pio2f+0x2a>
 800482e:	42d8      	cmn	r0, r3
 8004830:	bf5d      	ittte	pl
 8004832:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8004836:	ee07 2a90 	vmovpl	s15, r2
 800483a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800483e:	eef0 7a47 	vmovmi.f32	s15, s14
 8004842:	ecea 7a01 	vstmia	sl!, {s15}
 8004846:	3301      	adds	r3, #1
 8004848:	e7da      	b.n	8004800 <__kernel_rem_pio2f+0x4c>
 800484a:	ecfe 6a01 	vldmia	lr!, {s13}
 800484e:	ed90 7a00 	vldr	s14, [r0]
 8004852:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004856:	3201      	adds	r2, #1
 8004858:	454a      	cmp	r2, r9
 800485a:	f1a0 0004 	sub.w	r0, r0, #4
 800485e:	ddf4      	ble.n	800484a <__kernel_rem_pio2f+0x96>
 8004860:	ecea 7a01 	vstmia	sl!, {s15}
 8004864:	3304      	adds	r3, #4
 8004866:	f10c 0c01 	add.w	ip, ip, #1
 800486a:	e7d3      	b.n	8004814 <__kernel_rem_pio2f+0x60>
 800486c:	ab06      	add	r3, sp, #24
 800486e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8004872:	9304      	str	r3, [sp, #16]
 8004874:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004876:	eddf 8a92 	vldr	s17, [pc, #584]	; 8004ac0 <__kernel_rem_pio2f+0x30c>
 800487a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8004abc <__kernel_rem_pio2f+0x308>
 800487e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004882:	9303      	str	r3, [sp, #12]
 8004884:	46ba      	mov	sl, r7
 8004886:	ab56      	add	r3, sp, #344	; 0x158
 8004888:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800488c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8004890:	ab06      	add	r3, sp, #24
 8004892:	4618      	mov	r0, r3
 8004894:	4652      	mov	r2, sl
 8004896:	2a00      	cmp	r2, #0
 8004898:	dc51      	bgt.n	800493e <__kernel_rem_pio2f+0x18a>
 800489a:	4620      	mov	r0, r4
 800489c:	9305      	str	r3, [sp, #20]
 800489e:	f000 faa5 	bl	8004dec <scalbnf>
 80048a2:	eeb0 8a40 	vmov.f32	s16, s0
 80048a6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80048aa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80048ae:	f000 fa5b 	bl	8004d68 <floorf>
 80048b2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80048b6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80048ba:	2c00      	cmp	r4, #0
 80048bc:	9b05      	ldr	r3, [sp, #20]
 80048be:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80048c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80048c6:	edcd 7a00 	vstr	s15, [sp]
 80048ca:	ee38 8a40 	vsub.f32	s16, s16, s0
 80048ce:	dd4b      	ble.n	8004968 <__kernel_rem_pio2f+0x1b4>
 80048d0:	f10a 3cff 	add.w	ip, sl, #4294967295
 80048d4:	aa06      	add	r2, sp, #24
 80048d6:	f1c4 0e08 	rsb	lr, r4, #8
 80048da:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80048de:	ee17 1a90 	vmov	r1, s15
 80048e2:	fa42 f00e 	asr.w	r0, r2, lr
 80048e6:	4401      	add	r1, r0
 80048e8:	9100      	str	r1, [sp, #0]
 80048ea:	fa00 f00e 	lsl.w	r0, r0, lr
 80048ee:	a906      	add	r1, sp, #24
 80048f0:	1a12      	subs	r2, r2, r0
 80048f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80048f6:	f1c4 0007 	rsb	r0, r4, #7
 80048fa:	fa42 fb00 	asr.w	fp, r2, r0
 80048fe:	f1bb 0f00 	cmp.w	fp, #0
 8004902:	dd43      	ble.n	800498c <__kernel_rem_pio2f+0x1d8>
 8004904:	9a00      	ldr	r2, [sp, #0]
 8004906:	f04f 0e00 	mov.w	lr, #0
 800490a:	3201      	adds	r2, #1
 800490c:	9200      	str	r2, [sp, #0]
 800490e:	4670      	mov	r0, lr
 8004910:	45f2      	cmp	sl, lr
 8004912:	dc6c      	bgt.n	80049ee <__kernel_rem_pio2f+0x23a>
 8004914:	2c00      	cmp	r4, #0
 8004916:	dd04      	ble.n	8004922 <__kernel_rem_pio2f+0x16e>
 8004918:	2c01      	cmp	r4, #1
 800491a:	d079      	beq.n	8004a10 <__kernel_rem_pio2f+0x25c>
 800491c:	2c02      	cmp	r4, #2
 800491e:	f000 8082 	beq.w	8004a26 <__kernel_rem_pio2f+0x272>
 8004922:	f1bb 0f02 	cmp.w	fp, #2
 8004926:	d131      	bne.n	800498c <__kernel_rem_pio2f+0x1d8>
 8004928:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800492c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004930:	b360      	cbz	r0, 800498c <__kernel_rem_pio2f+0x1d8>
 8004932:	4620      	mov	r0, r4
 8004934:	f000 fa5a 	bl	8004dec <scalbnf>
 8004938:	ee38 8a40 	vsub.f32	s16, s16, s0
 800493c:	e026      	b.n	800498c <__kernel_rem_pio2f+0x1d8>
 800493e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004942:	3a01      	subs	r2, #1
 8004944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004948:	a942      	add	r1, sp, #264	; 0x108
 800494a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800494e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004952:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004956:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800495a:	eca0 0a01 	vstmia	r0!, {s0}
 800495e:	ed9c 0a00 	vldr	s0, [ip]
 8004962:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004966:	e796      	b.n	8004896 <__kernel_rem_pio2f+0xe2>
 8004968:	d107      	bne.n	800497a <__kernel_rem_pio2f+0x1c6>
 800496a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800496e:	a906      	add	r1, sp, #24
 8004970:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004974:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8004978:	e7c1      	b.n	80048fe <__kernel_rem_pio2f+0x14a>
 800497a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800497e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004986:	da2f      	bge.n	80049e8 <__kernel_rem_pio2f+0x234>
 8004988:	f04f 0b00 	mov.w	fp, #0
 800498c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	f040 8098 	bne.w	8004ac8 <__kernel_rem_pio2f+0x314>
 8004998:	f10a 33ff 	add.w	r3, sl, #4294967295
 800499c:	469c      	mov	ip, r3
 800499e:	2200      	movs	r2, #0
 80049a0:	45bc      	cmp	ip, r7
 80049a2:	da48      	bge.n	8004a36 <__kernel_rem_pio2f+0x282>
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	d05f      	beq.n	8004a68 <__kernel_rem_pio2f+0x2b4>
 80049a8:	aa06      	add	r2, sp, #24
 80049aa:	3c08      	subs	r4, #8
 80049ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d07d      	beq.n	8004ab0 <__kernel_rem_pio2f+0x2fc>
 80049b4:	4620      	mov	r0, r4
 80049b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	f000 fa16 	bl	8004dec <scalbnf>
 80049c0:	9b01      	ldr	r3, [sp, #4]
 80049c2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004ac0 <__kernel_rem_pio2f+0x30c>
 80049c6:	4619      	mov	r1, r3
 80049c8:	2900      	cmp	r1, #0
 80049ca:	f280 80af 	bge.w	8004b2c <__kernel_rem_pio2f+0x378>
 80049ce:	4618      	mov	r0, r3
 80049d0:	2400      	movs	r4, #0
 80049d2:	2800      	cmp	r0, #0
 80049d4:	f2c0 80d0 	blt.w	8004b78 <__kernel_rem_pio2f+0x3c4>
 80049d8:	a942      	add	r1, sp, #264	; 0x108
 80049da:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80049de:	4a36      	ldr	r2, [pc, #216]	; (8004ab8 <__kernel_rem_pio2f+0x304>)
 80049e0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004ac4 <__kernel_rem_pio2f+0x310>
 80049e4:	2100      	movs	r1, #0
 80049e6:	e0bb      	b.n	8004b60 <__kernel_rem_pio2f+0x3ac>
 80049e8:	f04f 0b02 	mov.w	fp, #2
 80049ec:	e78a      	b.n	8004904 <__kernel_rem_pio2f+0x150>
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	b948      	cbnz	r0, 8004a06 <__kernel_rem_pio2f+0x252>
 80049f2:	b11a      	cbz	r2, 80049fc <__kernel_rem_pio2f+0x248>
 80049f4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f10e 0e01 	add.w	lr, lr, #1
 8004a00:	3304      	adds	r3, #4
 8004a02:	4610      	mov	r0, r2
 8004a04:	e784      	b.n	8004910 <__kernel_rem_pio2f+0x15c>
 8004a06:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	e7f5      	b.n	80049fc <__kernel_rem_pio2f+0x248>
 8004a10:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004a14:	ab06      	add	r3, sp, #24
 8004a16:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1e:	aa06      	add	r2, sp, #24
 8004a20:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8004a24:	e77d      	b.n	8004922 <__kernel_rem_pio2f+0x16e>
 8004a26:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004a2a:	ab06      	add	r3, sp, #24
 8004a2c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a34:	e7f3      	b.n	8004a1e <__kernel_rem_pio2f+0x26a>
 8004a36:	a906      	add	r1, sp, #24
 8004a38:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8004a3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a40:	4302      	orrs	r2, r0
 8004a42:	e7ad      	b.n	80049a0 <__kernel_rem_pio2f+0x1ec>
 8004a44:	3001      	adds	r0, #1
 8004a46:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	d0fa      	beq.n	8004a44 <__kernel_rem_pio2f+0x290>
 8004a4e:	a91a      	add	r1, sp, #104	; 0x68
 8004a50:	eb0a 0208 	add.w	r2, sl, r8
 8004a54:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004a58:	f10a 0301 	add.w	r3, sl, #1
 8004a5c:	eb0a 0100 	add.w	r1, sl, r0
 8004a60:	4299      	cmp	r1, r3
 8004a62:	da04      	bge.n	8004a6e <__kernel_rem_pio2f+0x2ba>
 8004a64:	468a      	mov	sl, r1
 8004a66:	e70e      	b.n	8004886 <__kernel_rem_pio2f+0xd2>
 8004a68:	9b04      	ldr	r3, [sp, #16]
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	e7eb      	b.n	8004a46 <__kernel_rem_pio2f+0x292>
 8004a6e:	9803      	ldr	r0, [sp, #12]
 8004a70:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004a74:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004a78:	9000      	str	r0, [sp, #0]
 8004a7a:	ee07 0a90 	vmov	s15, r0
 8004a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a82:	2000      	movs	r0, #0
 8004a84:	ece2 7a01 	vstmia	r2!, {s15}
 8004a88:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004ac4 <__kernel_rem_pio2f+0x310>
 8004a8c:	4696      	mov	lr, r2
 8004a8e:	4548      	cmp	r0, r9
 8004a90:	dd06      	ble.n	8004aa0 <__kernel_rem_pio2f+0x2ec>
 8004a92:	a842      	add	r0, sp, #264	; 0x108
 8004a94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004a98:	edc0 7a00 	vstr	s15, [r0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	e7df      	b.n	8004a60 <__kernel_rem_pio2f+0x2ac>
 8004aa0:	ecfc 6a01 	vldmia	ip!, {s13}
 8004aa4:	ed3e 7a01 	vldmdb	lr!, {s14}
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004aae:	e7ee      	b.n	8004a8e <__kernel_rem_pio2f+0x2da>
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	e779      	b.n	80049a8 <__kernel_rem_pio2f+0x1f4>
 8004ab4:	080052cc 	.word	0x080052cc
 8004ab8:	080052a0 	.word	0x080052a0
 8004abc:	43800000 	.word	0x43800000
 8004ac0:	3b800000 	.word	0x3b800000
 8004ac4:	00000000 	.word	0x00000000
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	eeb0 0a48 	vmov.f32	s0, s16
 8004ace:	1b98      	subs	r0, r3, r6
 8004ad0:	f000 f98c 	bl	8004dec <scalbnf>
 8004ad4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004abc <__kernel_rem_pio2f+0x308>
 8004ad8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae0:	db1b      	blt.n	8004b1a <__kernel_rem_pio2f+0x366>
 8004ae2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004ac0 <__kernel_rem_pio2f+0x30c>
 8004ae6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004aea:	aa06      	add	r2, sp, #24
 8004aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af0:	a906      	add	r1, sp, #24
 8004af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af6:	3408      	adds	r4, #8
 8004af8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b04:	ee10 3a10 	vmov	r3, s0
 8004b08:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8004b0c:	ee17 2a90 	vmov	r2, s15
 8004b10:	f10a 0301 	add.w	r3, sl, #1
 8004b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b18:	e74c      	b.n	80049b4 <__kernel_rem_pio2f+0x200>
 8004b1a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b1e:	aa06      	add	r2, sp, #24
 8004b20:	ee10 3a10 	vmov	r3, s0
 8004b24:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8004b28:	4653      	mov	r3, sl
 8004b2a:	e743      	b.n	80049b4 <__kernel_rem_pio2f+0x200>
 8004b2c:	aa42      	add	r2, sp, #264	; 0x108
 8004b2e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8004b32:	aa06      	add	r2, sp, #24
 8004b34:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004b38:	9201      	str	r2, [sp, #4]
 8004b3a:	ee07 2a90 	vmov	s15, r2
 8004b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b42:	3901      	subs	r1, #1
 8004b44:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004b48:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004b4c:	edc0 7a00 	vstr	s15, [r0]
 8004b50:	e73a      	b.n	80049c8 <__kernel_rem_pio2f+0x214>
 8004b52:	ecf2 6a01 	vldmia	r2!, {s13}
 8004b56:	ecb6 7a01 	vldmia	r6!, {s14}
 8004b5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b5e:	3101      	adds	r1, #1
 8004b60:	42b9      	cmp	r1, r7
 8004b62:	dc01      	bgt.n	8004b68 <__kernel_rem_pio2f+0x3b4>
 8004b64:	428c      	cmp	r4, r1
 8004b66:	daf4      	bge.n	8004b52 <__kernel_rem_pio2f+0x39e>
 8004b68:	aa56      	add	r2, sp, #344	; 0x158
 8004b6a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8004b6e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004b72:	3801      	subs	r0, #1
 8004b74:	3401      	adds	r4, #1
 8004b76:	e72c      	b.n	80049d2 <__kernel_rem_pio2f+0x21e>
 8004b78:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004b7a:	2a02      	cmp	r2, #2
 8004b7c:	dc0a      	bgt.n	8004b94 <__kernel_rem_pio2f+0x3e0>
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	dc61      	bgt.n	8004c46 <__kernel_rem_pio2f+0x492>
 8004b82:	d03c      	beq.n	8004bfe <__kernel_rem_pio2f+0x44a>
 8004b84:	9b00      	ldr	r3, [sp, #0]
 8004b86:	f003 0007 	and.w	r0, r3, #7
 8004b8a:	b057      	add	sp, #348	; 0x15c
 8004b8c:	ecbd 8b04 	vpop	{d8-d9}
 8004b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b94:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004b96:	2a03      	cmp	r2, #3
 8004b98:	d1f4      	bne.n	8004b84 <__kernel_rem_pio2f+0x3d0>
 8004b9a:	aa2e      	add	r2, sp, #184	; 0xb8
 8004b9c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	461c      	mov	r4, r3
 8004ba4:	2c00      	cmp	r4, #0
 8004ba6:	f1a0 0004 	sub.w	r0, r0, #4
 8004baa:	dc59      	bgt.n	8004c60 <__kernel_rem_pio2f+0x4ac>
 8004bac:	4618      	mov	r0, r3
 8004bae:	2801      	cmp	r0, #1
 8004bb0:	f1a1 0104 	sub.w	r1, r1, #4
 8004bb4:	dc64      	bgt.n	8004c80 <__kernel_rem_pio2f+0x4cc>
 8004bb6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8004ac4 <__kernel_rem_pio2f+0x310>
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	dc70      	bgt.n	8004ca0 <__kernel_rem_pio2f+0x4ec>
 8004bbe:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004bc2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004bc6:	f1bb 0f00 	cmp.w	fp, #0
 8004bca:	d172      	bne.n	8004cb2 <__kernel_rem_pio2f+0x4fe>
 8004bcc:	edc5 6a00 	vstr	s13, [r5]
 8004bd0:	ed85 7a01 	vstr	s14, [r5, #4]
 8004bd4:	edc5 7a02 	vstr	s15, [r5, #8]
 8004bd8:	e7d4      	b.n	8004b84 <__kernel_rem_pio2f+0x3d0>
 8004bda:	aa2e      	add	r2, sp, #184	; 0xb8
 8004bdc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004be0:	ed91 7a00 	vldr	s14, [r1]
 8004be4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004be8:	3b01      	subs	r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	daf5      	bge.n	8004bda <__kernel_rem_pio2f+0x426>
 8004bee:	f1bb 0f00 	cmp.w	fp, #0
 8004bf2:	d001      	beq.n	8004bf8 <__kernel_rem_pio2f+0x444>
 8004bf4:	eef1 7a67 	vneg.f32	s15, s15
 8004bf8:	edc5 7a00 	vstr	s15, [r5]
 8004bfc:	e7c2      	b.n	8004b84 <__kernel_rem_pio2f+0x3d0>
 8004bfe:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8004ac4 <__kernel_rem_pio2f+0x310>
 8004c02:	e7f2      	b.n	8004bea <__kernel_rem_pio2f+0x436>
 8004c04:	aa2e      	add	r2, sp, #184	; 0xb8
 8004c06:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8004c0a:	edd0 7a00 	vldr	s15, [r0]
 8004c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c12:	3901      	subs	r1, #1
 8004c14:	2900      	cmp	r1, #0
 8004c16:	daf5      	bge.n	8004c04 <__kernel_rem_pio2f+0x450>
 8004c18:	f1bb 0f00 	cmp.w	fp, #0
 8004c1c:	d017      	beq.n	8004c4e <__kernel_rem_pio2f+0x49a>
 8004c1e:	eef1 7a47 	vneg.f32	s15, s14
 8004c22:	edc5 7a00 	vstr	s15, [r5]
 8004c26:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c2e:	a82f      	add	r0, sp, #188	; 0xbc
 8004c30:	2101      	movs	r1, #1
 8004c32:	428b      	cmp	r3, r1
 8004c34:	da0e      	bge.n	8004c54 <__kernel_rem_pio2f+0x4a0>
 8004c36:	f1bb 0f00 	cmp.w	fp, #0
 8004c3a:	d001      	beq.n	8004c40 <__kernel_rem_pio2f+0x48c>
 8004c3c:	eef1 7a67 	vneg.f32	s15, s15
 8004c40:	edc5 7a01 	vstr	s15, [r5, #4]
 8004c44:	e79e      	b.n	8004b84 <__kernel_rem_pio2f+0x3d0>
 8004c46:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8004ac4 <__kernel_rem_pio2f+0x310>
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	e7e2      	b.n	8004c14 <__kernel_rem_pio2f+0x460>
 8004c4e:	eef0 7a47 	vmov.f32	s15, s14
 8004c52:	e7e6      	b.n	8004c22 <__kernel_rem_pio2f+0x46e>
 8004c54:	ecb0 7a01 	vldmia	r0!, {s14}
 8004c58:	3101      	adds	r1, #1
 8004c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c5e:	e7e8      	b.n	8004c32 <__kernel_rem_pio2f+0x47e>
 8004c60:	edd0 7a00 	vldr	s15, [r0]
 8004c64:	edd0 6a01 	vldr	s13, [r0, #4]
 8004c68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c6c:	3c01      	subs	r4, #1
 8004c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c72:	ed80 7a00 	vstr	s14, [r0]
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	edc0 7a01 	vstr	s15, [r0, #4]
 8004c7e:	e791      	b.n	8004ba4 <__kernel_rem_pio2f+0x3f0>
 8004c80:	edd1 7a00 	vldr	s15, [r1]
 8004c84:	edd1 6a01 	vldr	s13, [r1, #4]
 8004c88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c8c:	3801      	subs	r0, #1
 8004c8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c92:	ed81 7a00 	vstr	s14, [r1]
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	edc1 7a01 	vstr	s15, [r1, #4]
 8004c9e:	e786      	b.n	8004bae <__kernel_rem_pio2f+0x3fa>
 8004ca0:	aa2e      	add	r2, sp, #184	; 0xb8
 8004ca2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004ca6:	ed91 7a00 	vldr	s14, [r1]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cb0:	e783      	b.n	8004bba <__kernel_rem_pio2f+0x406>
 8004cb2:	eef1 6a66 	vneg.f32	s13, s13
 8004cb6:	eeb1 7a47 	vneg.f32	s14, s14
 8004cba:	edc5 6a00 	vstr	s13, [r5]
 8004cbe:	ed85 7a01 	vstr	s14, [r5, #4]
 8004cc2:	eef1 7a67 	vneg.f32	s15, s15
 8004cc6:	e785      	b.n	8004bd4 <__kernel_rem_pio2f+0x420>

08004cc8 <__kernel_sinf>:
 8004cc8:	ee10 3a10 	vmov	r3, s0
 8004ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004cd4:	da04      	bge.n	8004ce0 <__kernel_sinf+0x18>
 8004cd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cda:	ee17 3a90 	vmov	r3, s15
 8004cde:	b35b      	cbz	r3, 8004d38 <__kernel_sinf+0x70>
 8004ce0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ce4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004d3c <__kernel_sinf+0x74>
 8004ce8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004d40 <__kernel_sinf+0x78>
 8004cec:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004cf0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004d44 <__kernel_sinf+0x7c>
 8004cf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004cf8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004d48 <__kernel_sinf+0x80>
 8004cfc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d00:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004d4c <__kernel_sinf+0x84>
 8004d04:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004d08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d0c:	b930      	cbnz	r0, 8004d1c <__kernel_sinf+0x54>
 8004d0e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004d50 <__kernel_sinf+0x88>
 8004d12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d16:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004d1a:	4770      	bx	lr
 8004d1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004d20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004d24:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004d28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004d2c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004d54 <__kernel_sinf+0x8c>
 8004d30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004d34:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	2f2ec9d3 	.word	0x2f2ec9d3
 8004d40:	b2d72f34 	.word	0xb2d72f34
 8004d44:	3638ef1b 	.word	0x3638ef1b
 8004d48:	b9500d01 	.word	0xb9500d01
 8004d4c:	3c088889 	.word	0x3c088889
 8004d50:	be2aaaab 	.word	0xbe2aaaab
 8004d54:	3e2aaaab 	.word	0x3e2aaaab

08004d58 <fabsf>:
 8004d58:	ee10 3a10 	vmov	r3, s0
 8004d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d60:	ee00 3a10 	vmov	s0, r3
 8004d64:	4770      	bx	lr
	...

08004d68 <floorf>:
 8004d68:	ee10 3a10 	vmov	r3, s0
 8004d6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d70:	3a7f      	subs	r2, #127	; 0x7f
 8004d72:	2a16      	cmp	r2, #22
 8004d74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d78:	dc2a      	bgt.n	8004dd0 <floorf+0x68>
 8004d7a:	2a00      	cmp	r2, #0
 8004d7c:	da11      	bge.n	8004da2 <floorf+0x3a>
 8004d7e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004de0 <floorf+0x78>
 8004d82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8e:	dd05      	ble.n	8004d9c <floorf+0x34>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da23      	bge.n	8004ddc <floorf+0x74>
 8004d94:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <floorf+0x7c>)
 8004d96:	2900      	cmp	r1, #0
 8004d98:	bf18      	it	ne
 8004d9a:	4613      	movne	r3, r2
 8004d9c:	ee00 3a10 	vmov	s0, r3
 8004da0:	4770      	bx	lr
 8004da2:	4911      	ldr	r1, [pc, #68]	; (8004de8 <floorf+0x80>)
 8004da4:	4111      	asrs	r1, r2
 8004da6:	420b      	tst	r3, r1
 8004da8:	d0fa      	beq.n	8004da0 <floorf+0x38>
 8004daa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004de0 <floorf+0x78>
 8004dae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004db2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	ddef      	ble.n	8004d9c <floorf+0x34>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfbe      	ittt	lt
 8004dc0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004dc4:	fa40 f202 	asrlt.w	r2, r0, r2
 8004dc8:	189b      	addlt	r3, r3, r2
 8004dca:	ea23 0301 	bic.w	r3, r3, r1
 8004dce:	e7e5      	b.n	8004d9c <floorf+0x34>
 8004dd0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004dd4:	d3e4      	bcc.n	8004da0 <floorf+0x38>
 8004dd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004dda:	4770      	bx	lr
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e7dd      	b.n	8004d9c <floorf+0x34>
 8004de0:	7149f2ca 	.word	0x7149f2ca
 8004de4:	bf800000 	.word	0xbf800000
 8004de8:	007fffff 	.word	0x007fffff

08004dec <scalbnf>:
 8004dec:	ee10 3a10 	vmov	r3, s0
 8004df0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004df4:	d025      	beq.n	8004e42 <scalbnf+0x56>
 8004df6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004dfa:	d302      	bcc.n	8004e02 <scalbnf+0x16>
 8004dfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e00:	4770      	bx	lr
 8004e02:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004e06:	d122      	bne.n	8004e4e <scalbnf+0x62>
 8004e08:	4b2a      	ldr	r3, [pc, #168]	; (8004eb4 <scalbnf+0xc8>)
 8004e0a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004eb8 <scalbnf+0xcc>
 8004e0e:	4298      	cmp	r0, r3
 8004e10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e14:	db16      	blt.n	8004e44 <scalbnf+0x58>
 8004e16:	ee10 3a10 	vmov	r3, s0
 8004e1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e1e:	3a19      	subs	r2, #25
 8004e20:	4402      	add	r2, r0
 8004e22:	2afe      	cmp	r2, #254	; 0xfe
 8004e24:	dd15      	ble.n	8004e52 <scalbnf+0x66>
 8004e26:	ee10 3a10 	vmov	r3, s0
 8004e2a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004ebc <scalbnf+0xd0>
 8004e2e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ec0 <scalbnf+0xd4>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	eeb0 7a67 	vmov.f32	s14, s15
 8004e38:	bfb8      	it	lt
 8004e3a:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e3e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004e42:	4770      	bx	lr
 8004e44:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004ec4 <scalbnf+0xd8>
 8004e48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e4c:	4770      	bx	lr
 8004e4e:	0dd2      	lsrs	r2, r2, #23
 8004e50:	e7e6      	b.n	8004e20 <scalbnf+0x34>
 8004e52:	2a00      	cmp	r2, #0
 8004e54:	dd06      	ble.n	8004e64 <scalbnf+0x78>
 8004e56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e5a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004e5e:	ee00 3a10 	vmov	s0, r3
 8004e62:	4770      	bx	lr
 8004e64:	f112 0f16 	cmn.w	r2, #22
 8004e68:	da1a      	bge.n	8004ea0 <scalbnf+0xb4>
 8004e6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	ee10 3a10 	vmov	r3, s0
 8004e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e78:	dd0a      	ble.n	8004e90 <scalbnf+0xa4>
 8004e7a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004ebc <scalbnf+0xd0>
 8004e7e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004ec0 <scalbnf+0xd4>
 8004e82:	eef0 7a40 	vmov.f32	s15, s0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bf18      	it	ne
 8004e8a:	eeb0 0a47 	vmovne.f32	s0, s14
 8004e8e:	e7db      	b.n	8004e48 <scalbnf+0x5c>
 8004e90:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004ec4 <scalbnf+0xd8>
 8004e94:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ec8 <scalbnf+0xdc>
 8004e98:	eef0 7a40 	vmov.f32	s15, s0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	e7f3      	b.n	8004e88 <scalbnf+0x9c>
 8004ea0:	3219      	adds	r2, #25
 8004ea2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ea6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004eaa:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ecc <scalbnf+0xe0>
 8004eae:	ee07 3a10 	vmov	s14, r3
 8004eb2:	e7c4      	b.n	8004e3e <scalbnf+0x52>
 8004eb4:	ffff3cb0 	.word	0xffff3cb0
 8004eb8:	4c000000 	.word	0x4c000000
 8004ebc:	7149f2ca 	.word	0x7149f2ca
 8004ec0:	f149f2ca 	.word	0xf149f2ca
 8004ec4:	0da24260 	.word	0x0da24260
 8004ec8:	8da24260 	.word	0x8da24260
 8004ecc:	33000000 	.word	0x33000000

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
