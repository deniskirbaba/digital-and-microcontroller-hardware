
lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b8  080052b8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000002c  080052ec  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080052ec  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f023  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d50  00000000  00000000  0002f07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00031a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002194a  00000000  00000000  00032658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f326  00000000  00000000  00053fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0427  00000000  00000000  000632c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001336ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003750  00000000  00000000  00133744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004ea8 	.word	0x08004ea8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	08004ea8 	.word	0x08004ea8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96e 	b.w	8000914 <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	468c      	mov	ip, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	f040 8083 	bne.w	8000766 <__udivmoddi4+0x116>
 8000660:	428a      	cmp	r2, r1
 8000662:	4617      	mov	r7, r2
 8000664:	d947      	bls.n	80006f6 <__udivmoddi4+0xa6>
 8000666:	fab2 f282 	clz	r2, r2
 800066a:	b142      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066c:	f1c2 0020 	rsb	r0, r2, #32
 8000670:	fa24 f000 	lsr.w	r0, r4, r0
 8000674:	4091      	lsls	r1, r2
 8000676:	4097      	lsls	r7, r2
 8000678:	ea40 0c01 	orr.w	ip, r0, r1
 800067c:	4094      	lsls	r4, r2
 800067e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000682:	0c23      	lsrs	r3, r4, #16
 8000684:	fbbc f6f8 	udiv	r6, ip, r8
 8000688:	fa1f fe87 	uxth.w	lr, r7
 800068c:	fb08 c116 	mls	r1, r8, r6, ip
 8000690:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000694:	fb06 f10e 	mul.w	r1, r6, lr
 8000698:	4299      	cmp	r1, r3
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x60>
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	f106 30ff 	add.w	r0, r6, #4294967295
 80006a2:	f080 8119 	bcs.w	80008d8 <__udivmoddi4+0x288>
 80006a6:	4299      	cmp	r1, r3
 80006a8:	f240 8116 	bls.w	80008d8 <__udivmoddi4+0x288>
 80006ac:	3e02      	subs	r6, #2
 80006ae:	443b      	add	r3, r7
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	b2a4      	uxth	r4, r4
 80006b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b8:	fb08 3310 	mls	r3, r8, r0, r3
 80006bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80006c4:	45a6      	cmp	lr, r4
 80006c6:	d909      	bls.n	80006dc <__udivmoddi4+0x8c>
 80006c8:	193c      	adds	r4, r7, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ce:	f080 8105 	bcs.w	80008dc <__udivmoddi4+0x28c>
 80006d2:	45a6      	cmp	lr, r4
 80006d4:	f240 8102 	bls.w	80008dc <__udivmoddi4+0x28c>
 80006d8:	3802      	subs	r0, #2
 80006da:	443c      	add	r4, r7
 80006dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e0:	eba4 040e 	sub.w	r4, r4, lr
 80006e4:	2600      	movs	r6, #0
 80006e6:	b11d      	cbz	r5, 80006f0 <__udivmoddi4+0xa0>
 80006e8:	40d4      	lsrs	r4, r2
 80006ea:	2300      	movs	r3, #0
 80006ec:	e9c5 4300 	strd	r4, r3, [r5]
 80006f0:	4631      	mov	r1, r6
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	b902      	cbnz	r2, 80006fa <__udivmoddi4+0xaa>
 80006f8:	deff      	udf	#255	; 0xff
 80006fa:	fab2 f282 	clz	r2, r2
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d150      	bne.n	80007a4 <__udivmoddi4+0x154>
 8000702:	1bcb      	subs	r3, r1, r7
 8000704:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000708:	fa1f f887 	uxth.w	r8, r7
 800070c:	2601      	movs	r6, #1
 800070e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000712:	0c21      	lsrs	r1, r4, #16
 8000714:	fb0e 331c 	mls	r3, lr, ip, r3
 8000718:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800071c:	fb08 f30c 	mul.w	r3, r8, ip
 8000720:	428b      	cmp	r3, r1
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0xe4>
 8000724:	1879      	adds	r1, r7, r1
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0xe2>
 800072c:	428b      	cmp	r3, r1
 800072e:	f200 80e9 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 8000732:	4684      	mov	ip, r0
 8000734:	1ac9      	subs	r1, r1, r3
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000740:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x10c>
 800074c:	193c      	adds	r4, r7, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x10a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80d9 	bhi.w	800090c <__udivmoddi4+0x2bc>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e7bf      	b.n	80006e6 <__udivmoddi4+0x96>
 8000766:	428b      	cmp	r3, r1
 8000768:	d909      	bls.n	800077e <__udivmoddi4+0x12e>
 800076a:	2d00      	cmp	r5, #0
 800076c:	f000 80b1 	beq.w	80008d2 <__udivmoddi4+0x282>
 8000770:	2600      	movs	r6, #0
 8000772:	e9c5 0100 	strd	r0, r1, [r5]
 8000776:	4630      	mov	r0, r6
 8000778:	4631      	mov	r1, r6
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	fab3 f683 	clz	r6, r3
 8000782:	2e00      	cmp	r6, #0
 8000784:	d14a      	bne.n	800081c <__udivmoddi4+0x1cc>
 8000786:	428b      	cmp	r3, r1
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0x140>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 80b8 	bhi.w	8000900 <__udivmoddi4+0x2b0>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb61 0103 	sbc.w	r1, r1, r3
 8000796:	2001      	movs	r0, #1
 8000798:	468c      	mov	ip, r1
 800079a:	2d00      	cmp	r5, #0
 800079c:	d0a8      	beq.n	80006f0 <__udivmoddi4+0xa0>
 800079e:	e9c5 4c00 	strd	r4, ip, [r5]
 80007a2:	e7a5      	b.n	80006f0 <__udivmoddi4+0xa0>
 80007a4:	f1c2 0320 	rsb	r3, r2, #32
 80007a8:	fa20 f603 	lsr.w	r6, r0, r3
 80007ac:	4097      	lsls	r7, r2
 80007ae:	fa01 f002 	lsl.w	r0, r1, r2
 80007b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007b6:	40d9      	lsrs	r1, r3
 80007b8:	4330      	orrs	r0, r6
 80007ba:	0c03      	lsrs	r3, r0, #16
 80007bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80007c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007cc:	fb06 f108 	mul.w	r1, r6, r8
 80007d0:	4299      	cmp	r1, r3
 80007d2:	fa04 f402 	lsl.w	r4, r4, r2
 80007d6:	d909      	bls.n	80007ec <__udivmoddi4+0x19c>
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	f106 3cff 	add.w	ip, r6, #4294967295
 80007de:	f080 808d 	bcs.w	80008fc <__udivmoddi4+0x2ac>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 808a 	bls.w	80008fc <__udivmoddi4+0x2ac>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	443b      	add	r3, r7
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b281      	uxth	r1, r0
 80007f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80007f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80007f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007fc:	fb00 f308 	mul.w	r3, r0, r8
 8000800:	428b      	cmp	r3, r1
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x1c4>
 8000804:	1879      	adds	r1, r7, r1
 8000806:	f100 3cff 	add.w	ip, r0, #4294967295
 800080a:	d273      	bcs.n	80008f4 <__udivmoddi4+0x2a4>
 800080c:	428b      	cmp	r3, r1
 800080e:	d971      	bls.n	80008f4 <__udivmoddi4+0x2a4>
 8000810:	3802      	subs	r0, #2
 8000812:	4439      	add	r1, r7
 8000814:	1acb      	subs	r3, r1, r3
 8000816:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800081a:	e778      	b.n	800070e <__udivmoddi4+0xbe>
 800081c:	f1c6 0c20 	rsb	ip, r6, #32
 8000820:	fa03 f406 	lsl.w	r4, r3, r6
 8000824:	fa22 f30c 	lsr.w	r3, r2, ip
 8000828:	431c      	orrs	r4, r3
 800082a:	fa20 f70c 	lsr.w	r7, r0, ip
 800082e:	fa01 f306 	lsl.w	r3, r1, r6
 8000832:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000836:	fa21 f10c 	lsr.w	r1, r1, ip
 800083a:	431f      	orrs	r7, r3
 800083c:	0c3b      	lsrs	r3, r7, #16
 800083e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000842:	fa1f f884 	uxth.w	r8, r4
 8000846:	fb0e 1119 	mls	r1, lr, r9, r1
 800084a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800084e:	fb09 fa08 	mul.w	sl, r9, r8
 8000852:	458a      	cmp	sl, r1
 8000854:	fa02 f206 	lsl.w	r2, r2, r6
 8000858:	fa00 f306 	lsl.w	r3, r0, r6
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x220>
 800085e:	1861      	adds	r1, r4, r1
 8000860:	f109 30ff 	add.w	r0, r9, #4294967295
 8000864:	d248      	bcs.n	80008f8 <__udivmoddi4+0x2a8>
 8000866:	458a      	cmp	sl, r1
 8000868:	d946      	bls.n	80008f8 <__udivmoddi4+0x2a8>
 800086a:	f1a9 0902 	sub.w	r9, r9, #2
 800086e:	4421      	add	r1, r4
 8000870:	eba1 010a 	sub.w	r1, r1, sl
 8000874:	b2bf      	uxth	r7, r7
 8000876:	fbb1 f0fe 	udiv	r0, r1, lr
 800087a:	fb0e 1110 	mls	r1, lr, r0, r1
 800087e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000882:	fb00 f808 	mul.w	r8, r0, r8
 8000886:	45b8      	cmp	r8, r7
 8000888:	d907      	bls.n	800089a <__udivmoddi4+0x24a>
 800088a:	19e7      	adds	r7, r4, r7
 800088c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000890:	d22e      	bcs.n	80008f0 <__udivmoddi4+0x2a0>
 8000892:	45b8      	cmp	r8, r7
 8000894:	d92c      	bls.n	80008f0 <__udivmoddi4+0x2a0>
 8000896:	3802      	subs	r0, #2
 8000898:	4427      	add	r7, r4
 800089a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800089e:	eba7 0708 	sub.w	r7, r7, r8
 80008a2:	fba0 8902 	umull	r8, r9, r0, r2
 80008a6:	454f      	cmp	r7, r9
 80008a8:	46c6      	mov	lr, r8
 80008aa:	4649      	mov	r1, r9
 80008ac:	d31a      	bcc.n	80008e4 <__udivmoddi4+0x294>
 80008ae:	d017      	beq.n	80008e0 <__udivmoddi4+0x290>
 80008b0:	b15d      	cbz	r5, 80008ca <__udivmoddi4+0x27a>
 80008b2:	ebb3 020e 	subs.w	r2, r3, lr
 80008b6:	eb67 0701 	sbc.w	r7, r7, r1
 80008ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008be:	40f2      	lsrs	r2, r6
 80008c0:	ea4c 0202 	orr.w	r2, ip, r2
 80008c4:	40f7      	lsrs	r7, r6
 80008c6:	e9c5 2700 	strd	r2, r7, [r5]
 80008ca:	2600      	movs	r6, #0
 80008cc:	4631      	mov	r1, r6
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	462e      	mov	r6, r5
 80008d4:	4628      	mov	r0, r5
 80008d6:	e70b      	b.n	80006f0 <__udivmoddi4+0xa0>
 80008d8:	4606      	mov	r6, r0
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0x60>
 80008dc:	4618      	mov	r0, r3
 80008de:	e6fd      	b.n	80006dc <__udivmoddi4+0x8c>
 80008e0:	4543      	cmp	r3, r8
 80008e2:	d2e5      	bcs.n	80008b0 <__udivmoddi4+0x260>
 80008e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80008e8:	eb69 0104 	sbc.w	r1, r9, r4
 80008ec:	3801      	subs	r0, #1
 80008ee:	e7df      	b.n	80008b0 <__udivmoddi4+0x260>
 80008f0:	4608      	mov	r0, r1
 80008f2:	e7d2      	b.n	800089a <__udivmoddi4+0x24a>
 80008f4:	4660      	mov	r0, ip
 80008f6:	e78d      	b.n	8000814 <__udivmoddi4+0x1c4>
 80008f8:	4681      	mov	r9, r0
 80008fa:	e7b9      	b.n	8000870 <__udivmoddi4+0x220>
 80008fc:	4666      	mov	r6, ip
 80008fe:	e775      	b.n	80007ec <__udivmoddi4+0x19c>
 8000900:	4630      	mov	r0, r6
 8000902:	e74a      	b.n	800079a <__udivmoddi4+0x14a>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	4439      	add	r1, r7
 800090a:	e713      	b.n	8000734 <__udivmoddi4+0xe4>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	e724      	b.n	800075c <__udivmoddi4+0x10c>
 8000912:	bf00      	nop

08000914 <__aeabi_idiv0>:
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fb46 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f81e 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f91c 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000928:	f000 f8f2 	bl	8000b10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800092c:	f000 f8c6 	bl	8000abc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000930:	f000 f876 	bl	8000a20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  t = 0.0;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <main+0x38>)
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <main+0x3c>)
 800093e:	f001 ffb3 	bl	80028a8 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)&rx_buffer, sizeof(rx_buffer));
 8000942:	2212      	movs	r2, #18
 8000944:	4904      	ldr	r1, [pc, #16]	; (8000958 <main+0x40>)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <main+0x44>)
 8000948:	f002 fcac 	bl	80032a4 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   while (1)
 800094c:	e7fe      	b.n	800094c <main+0x34>
 800094e:	bf00      	nop
 8000950:	20000048 	.word	0x20000048
 8000954:	2000010c 	.word	0x2000010c
 8000958:	20000000 	.word	0x20000000
 800095c:	20000154 	.word	0x20000154

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2234      	movs	r2, #52	; 0x34
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fd26 	bl	80043c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <SystemClock_Config+0xb8>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <SystemClock_Config+0xb8>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <SystemClock_Config+0xb8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <SystemClock_Config+0xbc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <SystemClock_Config+0xbc>)
 80009ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <SystemClock_Config+0xbc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c8:	2310      	movs	r3, #16
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fc79 	bl	80022cc <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009e0:	f000 f94c 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 f9ee 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a0a:	f000 f937 	bl	8000c7c <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	; 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a46:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a68:	f001 fece 	bl	8002808 <HAL_TIM_Base_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a72:	f000 f903 	bl	8000c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000a84:	f002 f888 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a8e:	f000 f8f5 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_TIM2_Init+0x98>)
 8000aa0:	f002 faa4 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000aaa:	f000 f8e7 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000010c 	.word	0x2000010c

08000abc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART2_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f002 fb0a 	bl	800310c <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f8bd 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000154 	.word	0x20000154
 8000b0c:	40004400 	.word	0x40004400

08000b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_DMA_Init+0x4c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <MX_DMA_Init+0x4c>)
 8000b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_DMA_Init+0x4c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2010      	movs	r0, #16
 8000b38:	f000 fb85 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b3c:	2010      	movs	r0, #16
 8000b3e:	f000 fb9e 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2011      	movs	r0, #17
 8000b48:	f000 fb7d 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b4c:	2011      	movs	r0, #17
 8000b4e:	f000 fb96 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_GPIO_Init+0x30>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <MX_GPIO_Init+0x30>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_GPIO_Init+0x30>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	tx_buffer.t = t;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_UART_RxCpltCallback+0x84>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_UART_RxCpltCallback+0x88>)
 8000ba2:	f8c3 2001 	str.w	r2, [r3, #1]
	tx_buffer.val = rx_buffer.bias + rx_buffer.amp*sinf(rx_buffer.freq*t + rx_buffer.phase);
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_UART_RxCpltCallback+0x8c>)
 8000ba8:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8000bac:	4623      	mov	r3, r4
 8000bae:	461c      	mov	r4, r3
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_UART_RxCpltCallback+0x8c>)
 8000bb2:	f8d3 5005 	ldr.w	r5, [r3, #5]
 8000bb6:	462b      	mov	r3, r5
 8000bb8:	461d      	mov	r5, r3
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_UART_RxCpltCallback+0x8c>)
 8000bbc:	f8d3 2009 	ldr.w	r2, [r3, #9]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_UART_RxCpltCallback+0x84>)
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	ee07 2a10 	vmov	s14, r2
 8000bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_UART_RxCpltCallback+0x8c>)
 8000bd4:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8000bd8:	ee07 3a10 	vmov	s14, r3
 8000bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000be0:	eeb0 0a67 	vmov.f32	s0, s15
 8000be4:	f003 fbf4 	bl	80043d0 <sinf>
 8000be8:	eef0 7a40 	vmov.f32	s15, s0
 8000bec:	ee07 5a10 	vmov	s14, r5
 8000bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf4:	ee07 4a10 	vmov	s14, r4
 8000bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <HAL_UART_RxCpltCallback+0x88>)
 8000bfe:	ee17 2a90 	vmov	r2, s15
 8000c02:	f8c3 2005 	str.w	r2, [r3, #5]
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)&rx_buffer, sizeof(rx_buffer));
 8000c06:	2212      	movs	r2, #18
 8000c08:	4905      	ldr	r1, [pc, #20]	; (8000c20 <HAL_UART_RxCpltCallback+0x8c>)
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <HAL_UART_RxCpltCallback+0x90>)
 8000c0c:	f002 fb4a 	bl	80032a4 <HAL_UART_Receive_DMA>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bdb0      	pop	{r4, r5, r7, pc}
 8000c18:	20000048 	.word	0x20000048
 8000c1c:	20000014 	.word	0x20000014
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000154 	.word	0x20000154

08000c28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	t += 0.01;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fc4b 	bl	80004d0 <__aeabi_f2d>
 8000c3a:	a30b      	add	r3, pc, #44	; (adr r3, 8000c68 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c40:	f7ff fae8 	bl	8000214 <__adddf3>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff fc98 	bl	8000580 <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c54:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&tx_buffer, sizeof(tx_buffer));
 8000c56:	220a      	movs	r2, #10
 8000c58:	4906      	ldr	r1, [pc, #24]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c5c:	f002 faa4 	bl	80031a8 <HAL_UART_Transmit_DMA>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	47ae147b 	.word	0x47ae147b
 8000c6c:	3f847ae1 	.word	0x3f847ae1
 8000c70:	20000048 	.word	0x20000048
 8000c74:	20000014 	.word	0x20000014
 8000c78:	20000154 	.word	0x20000154

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce8:	d115      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	201c      	movs	r0, #28
 8000d0c:	f000 fa9b 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d10:	201c      	movs	r0, #28
 8000d12:	f000 fab4 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a4c      	ldr	r2, [pc, #304]	; (8000e74 <HAL_UART_MspInit+0x150>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	f040 8091 	bne.w	8000e6a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <HAL_UART_MspInit+0x154>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a49      	ldr	r2, [pc, #292]	; (8000e78 <HAL_UART_MspInit+0x154>)
 8000d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <HAL_UART_MspInit+0x154>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_UART_MspInit+0x154>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a42      	ldr	r2, [pc, #264]	; (8000e78 <HAL_UART_MspInit+0x154>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <HAL_UART_MspInit+0x154>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d80:	230c      	movs	r3, #12
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d90:	2307      	movs	r3, #7
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4838      	ldr	r0, [pc, #224]	; (8000e7c <HAL_UART_MspInit+0x158>)
 8000d9c:	f000 fe8c 	bl	8001ab8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000da0:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000da2:	4a38      	ldr	r2, [pc, #224]	; (8000e84 <HAL_UART_MspInit+0x160>)
 8000da4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000da8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000de2:	4827      	ldr	r0, [pc, #156]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000de4:	f000 fa66 	bl	80012b4 <HAL_DMA_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000dee:	f7ff ff45 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e00:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <HAL_UART_MspInit+0x168>)
 8000e02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e0e:	2240      	movs	r2, #64	; 0x40
 8000e10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e3e:	4812      	ldr	r0, [pc, #72]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e40:	f000 fa38 	bl	80012b4 <HAL_DMA_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000e4a:	f7ff ff17 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <HAL_UART_MspInit+0x164>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2026      	movs	r0, #38	; 0x26
 8000e60:	f000 f9f1 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e64:	2026      	movs	r0, #38	; 0x26
 8000e66:	f000 fa0a 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	2000004c 	.word	0x2000004c
 8000e84:	40026088 	.word	0x40026088
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	400260a0 	.word	0x400260a0

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f8b8 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <DMA1_Stream5_IRQHandler+0x10>)
 8000eea:	f000 fb7b 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000004c 	.word	0x2000004c

08000ef8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <DMA1_Stream6_IRQHandler+0x10>)
 8000efe:	f000 fb71 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000ac 	.word	0x200000ac

08000f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM2_IRQHandler+0x10>)
 8000f12:	f001 fd39 	bl	8002988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000010c 	.word	0x2000010c

08000f20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART2_IRQHandler+0x10>)
 8000f26:	f002 f9ed 	bl	8003304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000154 	.word	0x20000154

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f003 f9f7 	bl	8004378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fcc5 	bl	8000918 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f9c:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 8000fa0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000fa4:	2000019c 	.word	0x2000019c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f92b 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe52 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f943 	bl	800129a <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f90b 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000020 	.word	0x20000020
 8001048:	20000028 	.word	0x20000028
 800104c:	20000024 	.word	0x20000024

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000028 	.word	0x20000028
 8001074:	20000198 	.word	0x20000198

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000198 	.word	0x20000198

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff3e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff31 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff feda 	bl	8001078 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e099      	b.n	8001404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f0:	e00f      	b.n	8001312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f2:	f7ff fec1 	bl	8001078 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d908      	bls.n	8001312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2220      	movs	r2, #32
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e078      	b.n	8001404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e8      	bne.n	80012f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_DMA_Init+0x158>)
 800132c:	4013      	ands	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2b04      	cmp	r3, #4
 800136a:	d107      	bne.n	800137c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4313      	orrs	r3, r2
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f023 0307 	bic.w	r3, r3, #7
 8001392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4313      	orrs	r3, r2
 800139c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d117      	bne.n	80013d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00e      	beq.n	80013d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fb01 	bl	80019c0 <DMA_CheckFifoParam>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013d2:	2301      	movs	r3, #1
 80013d4:	e016      	b.n	8001404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fab8 	bl	8001954 <DMA_CalcBaseAndBitshift>
 80013e4:	4603      	mov	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	223f      	movs	r2, #63	; 0x3f
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	f010803f 	.word	0xf010803f

08001410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_DMA_Start_IT+0x26>
 8001432:	2302      	movs	r3, #2
 8001434:	e040      	b.n	80014b8 <HAL_DMA_Start_IT+0xa8>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d12f      	bne.n	80014aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2202      	movs	r2, #2
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 fa4a 	bl	80018f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	223f      	movs	r2, #63	; 0x3f
 800146a:	409a      	lsls	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0216 	orr.w	r2, r2, #22
 800147e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0208 	orr.w	r2, r2, #8
 8001496:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e005      	b.n	80014b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014b2:	2302      	movs	r3, #2
 80014b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ce:	f7ff fdd3 	bl	8001078 <HAL_GetTick>
 80014d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d008      	beq.n	80014f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e052      	b.n	8001598 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0216 	bic.w	r2, r2, #22
 8001500:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001510:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <HAL_DMA_Abort+0x62>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0208 	bic.w	r2, r2, #8
 8001530:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001542:	e013      	b.n	800156c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001544:	f7ff fd98 	bl	8001078 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b05      	cmp	r3, #5
 8001550:	d90c      	bls.n	800156c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e015      	b.n	8001598 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1e4      	bne.n	8001544 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d004      	beq.n	80015be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00c      	b.n	80015d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2205      	movs	r2, #5
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_DMA_IRQHandler+0x258>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a92      	ldr	r2, [pc, #584]	; (8001840 <HAL_DMA_IRQHandler+0x25c>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2208      	movs	r2, #8
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01a      	beq.n	8001650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	2208      	movs	r2, #8
 800163e:	409a      	lsls	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	2201      	movs	r2, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d012      	beq.n	8001686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	2201      	movs	r2, #1
 8001674:	409a      	lsls	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f043 0202 	orr.w	r2, r3, #2
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	2204      	movs	r2, #4
 800168c:	409a      	lsls	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2204      	movs	r2, #4
 80016aa:	409a      	lsls	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f043 0204 	orr.w	r2, r3, #4
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2210      	movs	r2, #16
 80016c2:	409a      	lsls	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d043      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03c      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2210      	movs	r2, #16
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d018      	beq.n	8001726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d108      	bne.n	8001714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
 8001712:	e01f      	b.n	8001754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
 8001724:	e016      	b.n	8001754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0208 	bic.w	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2220      	movs	r2, #32
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 808e 	beq.w	8001882 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8086 	beq.w	8001882 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2220      	movs	r2, #32
 800177c:	409a      	lsls	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b05      	cmp	r3, #5
 800178c:	d136      	bne.n	80017fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0216 	bic.w	r2, r2, #22
 800179c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <HAL_DMA_IRQHandler+0x1da>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0208 	bic.w	r2, r2, #8
 80017cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	223f      	movs	r2, #63	; 0x3f
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d07d      	beq.n	80018ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
        }
        return;
 80017fa:	e078      	b.n	80018ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01c      	beq.n	8001844 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	2b00      	cmp	r3, #0
 800181e:	d030      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
 8001828:	e02b      	b.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d027      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e022      	b.n	8001882 <HAL_DMA_IRQHandler+0x29e>
 800183c:	20000020 	.word	0x20000020
 8001840:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0210 	bic.w	r2, r2, #16
 8001860:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	2b00      	cmp	r3, #0
 8001888:	d032      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d022      	beq.n	80018dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d307      	bcc.n	80018ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f2      	bne.n	80018ae <HAL_DMA_IRQHandler+0x2ca>
 80018c8:	e000      	b.n	80018cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018ee:	bf00      	nop
    }
  }
}
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop

080018f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001914:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b40      	cmp	r3, #64	; 0x40
 8001924:	d108      	bne.n	8001938 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001936:	e007      	b.n	8001948 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3b10      	subs	r3, #16
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <DMA_CalcBaseAndBitshift+0x68>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d909      	bls.n	8001996 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	1d1a      	adds	r2, r3, #4
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	659a      	str	r2, [r3, #88]	; 0x58
 8001994:	e007      	b.n	80019a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	aaaaaaab 	.word	0xaaaaaaab
 80019bc:	08004ed8 	.word	0x08004ed8

080019c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11f      	bne.n	8001a1a <DMA_CheckFifoParam+0x5a>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d856      	bhi.n	8001a8e <DMA_CheckFifoParam+0xce>
 80019e0:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <DMA_CheckFifoParam+0x28>)
 80019e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e6:	bf00      	nop
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001a0b 	.word	0x08001a0b
 80019f0:	080019f9 	.word	0x080019f9
 80019f4:	08001a8f 	.word	0x08001a8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d046      	beq.n	8001a92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a08:	e043      	b.n	8001a92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a12:	d140      	bne.n	8001a96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a18:	e03d      	b.n	8001a96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a22:	d121      	bne.n	8001a68 <DMA_CheckFifoParam+0xa8>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d837      	bhi.n	8001a9a <DMA_CheckFifoParam+0xda>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <DMA_CheckFifoParam+0x70>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a47 	.word	0x08001a47
 8001a38:	08001a41 	.word	0x08001a41
 8001a3c:	08001a59 	.word	0x08001a59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      break;
 8001a44:	e030      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d025      	beq.n	8001a9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a56:	e022      	b.n	8001a9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a60:	d11f      	bne.n	8001aa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a66:	e01c      	b.n	8001aa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d903      	bls.n	8001a76 <DMA_CheckFifoParam+0xb6>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d003      	beq.n	8001a7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a74:	e018      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
      break;
 8001a7a:	e015      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00e      	beq.n	8001aa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a8c:	e00b      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e00a      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e008      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a96:	bf00      	nop
 8001a98:	e006      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9a:	bf00      	nop
 8001a9c:	e004      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
 8001aa0:	e002      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aa2:	bf00      	nop
 8001aa4:	e000      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa6:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e165      	b.n	8001da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8154 	bne.w	8001d9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d005      	beq.n	8001b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d130      	bne.n	8001b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 0201 	and.w	r2, r3, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d017      	beq.n	8001ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d123      	bne.n	8001bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	08da      	lsrs	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3208      	adds	r2, #8
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80ae 	beq.w	8001d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b5d      	ldr	r3, [pc, #372]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a5c      	ldr	r2, [pc, #368]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b5a      	ldr	r3, [pc, #360]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c5a:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <HAL_GPIO_Init+0x304>)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4f      	ldr	r2, [pc, #316]	; (8001dc0 <HAL_GPIO_Init+0x308>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d025      	beq.n	8001cd2 <HAL_GPIO_Init+0x21a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4e      	ldr	r2, [pc, #312]	; (8001dc4 <HAL_GPIO_Init+0x30c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01f      	beq.n	8001cce <HAL_GPIO_Init+0x216>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d019      	beq.n	8001cca <HAL_GPIO_Init+0x212>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4c      	ldr	r2, [pc, #304]	; (8001dcc <HAL_GPIO_Init+0x314>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_GPIO_Init+0x318>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_GPIO_Init+0x20a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4a      	ldr	r2, [pc, #296]	; (8001dd4 <HAL_GPIO_Init+0x31c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a49      	ldr	r2, [pc, #292]	; (8001dd8 <HAL_GPIO_Init+0x320>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_GPIO_Init+0x202>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e00c      	b.n	8001cd4 <HAL_GPIO_Init+0x21c>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	e00a      	b.n	8001cd4 <HAL_GPIO_Init+0x21c>
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	e008      	b.n	8001cd4 <HAL_GPIO_Init+0x21c>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x21c>
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e004      	b.n	8001cd4 <HAL_GPIO_Init+0x21c>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_Init+0x21c>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x21c>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f002 0203 	and.w	r2, r2, #3
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce4:	4935      	ldr	r1, [pc, #212]	; (8001dbc <HAL_GPIO_Init+0x304>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d16:	4a31      	ldr	r2, [pc, #196]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d40:	4a26      	ldr	r2, [pc, #152]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	f67f ae96 	bls.w	8001ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40021400 	.word	0x40021400
 8001dd8:	40021800 	.word	0x40021800
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0cc      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d90c      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0b8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	494d      	ldr	r1, [pc, #308]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d044      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d119      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e067      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4934      	ldr	r1, [pc, #208]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff f8d2 	bl	8001078 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7ff f8ce 	bl	8001078 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e04f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d20c      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e032      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4916      	ldr	r1, [pc, #88]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f66:	f000 f855 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f832 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08004ec0 	.word	0x08004ec0
 8001fa4:	20000020 	.word	0x20000020
 8001fa8:	20000024 	.word	0x20000024

08001fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000020 	.word	0x20000020

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0a9b      	lsrs	r3, r3, #10
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4903      	ldr	r1, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08004ed0 	.word	0x08004ed0

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff0:	f7ff ffdc 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0b5b      	lsrs	r3, r3, #13
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4903      	ldr	r1, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	08004ed0 	.word	0x08004ed0

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002018:	b087      	sub	sp, #28
 800201a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800201c:	2600      	movs	r6, #0
 800201e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002020:	2600      	movs	r6, #0
 8002022:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002024:	2600      	movs	r6, #0
 8002026:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002028:	2600      	movs	r6, #0
 800202a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800202c:	2600      	movs	r6, #0
 800202e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002030:	4ea3      	ldr	r6, [pc, #652]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002032:	68b6      	ldr	r6, [r6, #8]
 8002034:	f006 060c 	and.w	r6, r6, #12
 8002038:	2e0c      	cmp	r6, #12
 800203a:	f200 8137 	bhi.w	80022ac <HAL_RCC_GetSysClockFreq+0x298>
 800203e:	f20f 0c08 	addw	ip, pc, #8
 8002042:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002046:	bf00      	nop
 8002048:	0800207d 	.word	0x0800207d
 800204c:	080022ad 	.word	0x080022ad
 8002050:	080022ad 	.word	0x080022ad
 8002054:	080022ad 	.word	0x080022ad
 8002058:	08002083 	.word	0x08002083
 800205c:	080022ad 	.word	0x080022ad
 8002060:	080022ad 	.word	0x080022ad
 8002064:	080022ad 	.word	0x080022ad
 8002068:	08002089 	.word	0x08002089
 800206c:	080022ad 	.word	0x080022ad
 8002070:	080022ad 	.word	0x080022ad
 8002074:	080022ad 	.word	0x080022ad
 8002078:	0800219f 	.word	0x0800219f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b91      	ldr	r3, [pc, #580]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800207e:	613b      	str	r3, [r7, #16]
       break;
 8002080:	e117      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002084:	613b      	str	r3, [r7, #16]
      break;
 8002086:	e114      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002090:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d024      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	461a      	mov	r2, r3
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020ae:	f04f 0500 	mov.w	r5, #0
 80020b2:	ea02 0004 	and.w	r0, r2, r4
 80020b6:	ea03 0105 	and.w	r1, r3, r5
 80020ba:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020bc:	fb03 f201 	mul.w	r2, r3, r1
 80020c0:	2300      	movs	r3, #0
 80020c2:	fb03 f300 	mul.w	r3, r3, r0
 80020c6:	4413      	add	r3, r2
 80020c8:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020ca:	fba0 0102 	umull	r0, r1, r0, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	4619      	mov	r1, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	f7fe faa1 	bl	8000620 <__aeabi_uldivmod>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4613      	mov	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e04c      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b75      	ldr	r3, [pc, #468]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	461a      	mov	r2, r3
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020f8:	f04f 0100 	mov.w	r1, #0
 80020fc:	ea02 0800 	and.w	r8, r2, r0
 8002100:	ea03 0901 	and.w	r9, r3, r1
 8002104:	4640      	mov	r0, r8
 8002106:	4649      	mov	r1, r9
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	014b      	lsls	r3, r1, #5
 8002112:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002116:	0142      	lsls	r2, r0, #5
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	ebb0 0008 	subs.w	r0, r0, r8
 8002120:	eb61 0109 	sbc.w	r1, r1, r9
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	018b      	lsls	r3, r1, #6
 800212e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002132:	0182      	lsls	r2, r0, #6
 8002134:	1a12      	subs	r2, r2, r0
 8002136:	eb63 0301 	sbc.w	r3, r3, r1
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	00d9      	lsls	r1, r3, #3
 8002144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002148:	00d0      	lsls	r0, r2, #3
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	eb12 0208 	adds.w	r2, r2, r8
 8002152:	eb43 0309 	adc.w	r3, r3, r9
 8002156:	f04f 0000 	mov.w	r0, #0
 800215a:	f04f 0100 	mov.w	r1, #0
 800215e:	0299      	lsls	r1, r3, #10
 8002160:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002164:	0290      	lsls	r0, r2, #10
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	461a      	mov	r2, r3
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	f7fe fa53 	bl	8000620 <__aeabi_uldivmod>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4613      	mov	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002182:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	3301      	adds	r3, #1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	e089      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219e:	4948      	ldr	r1, [pc, #288]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021a0:	6849      	ldr	r1, [r1, #4]
 80021a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021a6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a8:	4945      	ldr	r1, [pc, #276]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021aa:	6849      	ldr	r1, [r1, #4]
 80021ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80021b0:	2900      	cmp	r1, #0
 80021b2:	d024      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4942      	ldr	r1, [pc, #264]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021b6:	6849      	ldr	r1, [r1, #4]
 80021b8:	0989      	lsrs	r1, r1, #6
 80021ba:	4608      	mov	r0, r1
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80021c4:	f04f 0500 	mov.w	r5, #0
 80021c8:	ea00 0204 	and.w	r2, r0, r4
 80021cc:	ea01 0305 	and.w	r3, r1, r5
 80021d0:	493d      	ldr	r1, [pc, #244]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021d2:	fb01 f003 	mul.w	r0, r1, r3
 80021d6:	2100      	movs	r1, #0
 80021d8:	fb01 f102 	mul.w	r1, r1, r2
 80021dc:	1844      	adds	r4, r0, r1
 80021de:	493a      	ldr	r1, [pc, #232]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021e0:	fba2 0101 	umull	r0, r1, r2, r1
 80021e4:	1863      	adds	r3, r4, r1
 80021e6:	4619      	mov	r1, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f7fe fa16 	bl	8000620 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e04a      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	461a      	mov	r2, r3
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	ea02 0400 	and.w	r4, r2, r0
 8002216:	ea03 0501 	and.w	r5, r3, r1
 800221a:	4620      	mov	r0, r4
 800221c:	4629      	mov	r1, r5
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	014b      	lsls	r3, r1, #5
 8002228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800222c:	0142      	lsls	r2, r0, #5
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	1b00      	subs	r0, r0, r4
 8002234:	eb61 0105 	sbc.w	r1, r1, r5
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	018b      	lsls	r3, r1, #6
 8002242:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002246:	0182      	lsls	r2, r0, #6
 8002248:	1a12      	subs	r2, r2, r0
 800224a:	eb63 0301 	sbc.w	r3, r3, r1
 800224e:	f04f 0000 	mov.w	r0, #0
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	00d9      	lsls	r1, r3, #3
 8002258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800225c:	00d0      	lsls	r0, r2, #3
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	1912      	adds	r2, r2, r4
 8002264:	eb45 0303 	adc.w	r3, r5, r3
 8002268:	f04f 0000 	mov.w	r0, #0
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	0299      	lsls	r1, r3, #10
 8002272:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002276:	0290      	lsls	r0, r2, #10
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	461a      	mov	r2, r3
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	f7fe f9ca 	bl	8000620 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0f1b      	lsrs	r3, r3, #28
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	613b      	str	r3, [r7, #16]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80022ae:	613b      	str	r3, [r7, #16]
      break;
 80022b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b2:	693b      	ldr	r3, [r7, #16]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	017d7840 	.word	0x017d7840

080022cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e28d      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8083 	beq.w	80023f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ec:	4b94      	ldr	r3, [pc, #592]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d019      	beq.n	800232c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022f8:	4b91      	ldr	r3, [pc, #580]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002300:	2b08      	cmp	r3, #8
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002304:	4b8e      	ldr	r3, [pc, #568]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b84      	ldr	r3, [pc, #528]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x124>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e25a      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x90>
 800234e:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a7b      	ldr	r2, [pc, #492]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xcc>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0xb4>
 8002366:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a72      	ldr	r2, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xcc>
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6b      	ldr	r2, [pc, #428]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe6a 	bl	8001078 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fe66 	bl	8001078 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e21f      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b61      	ldr	r3, [pc, #388]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xdc>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fe56 	bl	8001078 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fe52 	bl	8001078 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e20b      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x104>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06f      	beq.n	80024de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d017      	beq.n	800243a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800240a:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d105      	bne.n	8002422 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d11c      	bne.n	8002468 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b44      	ldr	r3, [pc, #272]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x186>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1d3      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4937      	ldr	r1, [pc, #220]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	e03a      	b.n	80024de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002470:	4b34      	ldr	r3, [pc, #208]	; (8002544 <HAL_RCC_OscConfig+0x278>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fdff 	bl	8001078 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247e:	f7fe fdfb 	bl	8001078 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e1b4      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4925      	ldr	r1, [pc, #148]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e015      	b.n	80024de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x278>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fdde 	bl	8001078 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c0:	f7fe fdda 	bl	8001078 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e193      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d036      	beq.n	8002558 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x27c>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fdbe 	bl	8001078 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fdba 	bl	8001078 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e173      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x234>
 800251e:	e01b      	b.n	8002558 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_OscConfig+0x27c>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fda7 	bl	8001078 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	e00e      	b.n	800254c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252e:	f7fe fda3 	bl	8001078 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d907      	bls.n	800254c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e15c      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
 8002540:	40023800 	.word	0x40023800
 8002544:	42470000 	.word	0x42470000
 8002548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ea      	bne.n	800252e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8097 	beq.w	8002694 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4b83      	ldr	r3, [pc, #524]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a7e      	ldr	r2, [pc, #504]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b79      	ldr	r3, [pc, #484]	; (800277c <HAL_RCC_OscConfig+0x4b0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x4b0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4b0>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7fe fd63 	bl	8001078 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fd5f 	bl	8001078 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e118      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x4b0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x31e>
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a65      	ldr	r2, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	e01c      	b.n	8002624 <HAL_RCC_OscConfig+0x358>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x340>
 80025f2:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0x358>
 800260c:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a59      	ldr	r2, [pc, #356]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	4b57      	ldr	r3, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a56      	ldr	r2, [pc, #344]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	f023 0304 	bic.w	r3, r3, #4
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fd24 	bl	8001078 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe fd20 	bl	8001078 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0d7      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0ee      	beq.n	8002634 <HAL_RCC_OscConfig+0x368>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fd0e 	bl	8001078 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265e:	e00a      	b.n	8002676 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7fe fd0a 	bl	8001078 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0c1      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ee      	bne.n	8002660 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	4a3a      	ldr	r2, [pc, #232]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80ad 	beq.w	80027f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d060      	beq.n	800276c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d145      	bne.n	800273e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_OscConfig+0x4b4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fcde 	bl	8001078 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fcda 	bl	8001078 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e093      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	4b29      	ldr	r3, [pc, #164]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	085b      	lsrs	r3, r3, #1
 80026f6:	3b01      	subs	r3, #1
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	071b      	lsls	r3, r3, #28
 800270a:	491b      	ldr	r1, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x4b4>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe fcaf 	bl	8001078 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe fcab 	bl	8001078 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e064      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x452>
 800273c:	e05c      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x4b4>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fc98 	bl	8001078 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fc94 	bl	8001078 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04d      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x480>
 800276a:	e045      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e040      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000
 8002780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_RCC_OscConfig+0x538>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d030      	beq.n	80027f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d129      	bne.n	80027f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d122      	bne.n	80027f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027bc:	4293      	cmp	r3, r2
 80027be:	d119      	bne.n	80027f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d10f      	bne.n	80027f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e041      	b.n	800289e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fa52 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 fa96 	bl	8002d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d001      	beq.n	80028c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e04e      	b.n	800295e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_TIM_Base_Start_IT+0xc4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d022      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x80>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ea:	d01d      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x80>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <HAL_TIM_Base_Start_IT+0xc8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x80>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_TIM_Base_Start_IT+0xcc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x80>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_TIM_Base_Start_IT+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x80>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_TIM_Base_Start_IT+0xd4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_TIM_Base_Start_IT+0xd8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_TIM_Base_Start_IT+0xdc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b06      	cmp	r3, #6
 8002938:	d010      	beq.n	800295c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	e007      	b.n	800295c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40010000 	.word	0x40010000
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800
 8002978:	40000c00 	.word	0x40000c00
 800297c:	40010400 	.word	0x40010400
 8002980:	40014000 	.word	0x40014000
 8002984:	40001800 	.word	0x40001800

08002988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0202 	mvn.w	r2, #2
 80029b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9b5 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f9a7 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9b8 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0204 	mvn.w	r2, #4
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f98b 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f97d 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f98e 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0208 	mvn.w	r2, #8
 8002a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f961 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f953 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f964 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d122      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0210 	mvn.w	r2, #16
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f937 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f929 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f93a 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0201 	mvn.w	r2, #1
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe f88e 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fae0 	bl	80030f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8ff 	bl	8002d62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0220 	mvn.w	r2, #32
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 faaa 	bl	80030e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0b4      	b.n	8002d1e <HAL_TIM_ConfigClockSource+0x186>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d03e      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0xd4>
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	f200 8087 	bhi.w	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	f000 8086 	beq.w	8002d0a <HAL_TIM_ConfigClockSource+0x172>
 8002bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c02:	d87f      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d01a      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0xa6>
 8002c08:	2b70      	cmp	r3, #112	; 0x70
 8002c0a:	d87b      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d050      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d877      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d03c      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0xfa>
 8002c18:	2b50      	cmp	r3, #80	; 0x50
 8002c1a:	d873      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d058      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d86f      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b30      	cmp	r3, #48	; 0x30
 8002c26:	d064      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d86b      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d060      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d867      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05c      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d05a      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c3c:	e062      	b.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f000 f9ad 	bl	8002fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	609a      	str	r2, [r3, #8]
      break;
 8002c6a:	e04f      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f000 f996 	bl	8002fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8e:	609a      	str	r2, [r3, #8]
      break;
 8002c90:	e03c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f000 f90a 	bl	8002eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2150      	movs	r1, #80	; 0x50
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f963 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002cb0:	e02c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f000 f929 	bl	8002f16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2160      	movs	r1, #96	; 0x60
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f953 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002cd0:	e01c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f000 f8ea 	bl	8002eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2140      	movs	r1, #64	; 0x40
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f943 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e00c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f000 f93a 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d02:	e003      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e000      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d00f      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3d      	ldr	r2, [pc, #244]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3c      	ldr	r2, [pc, #240]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d108      	bne.n	8002dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd8:	d027      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d023      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01f      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d017      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_Base_SetConfig+0x128>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <TIM_Base_SetConfig+0x12c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00f      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <TIM_Base_SetConfig+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <TIM_Base_SetConfig+0x134>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <TIM_Base_SetConfig+0x138>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <TIM_Base_SetConfig+0x13c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0xf8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d103      	bne.n	8002e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	615a      	str	r2, [r3, #20]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40010400 	.word	0x40010400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800
 8002eac:	40001800 	.word	0x40001800
 8002eb0:	40001c00 	.word	0x40001c00
 8002eb4:	40002000 	.word	0x40002000

08002eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0201 	bic.w	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 030a 	bic.w	r3, r3, #10
 8002ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b087      	sub	sp, #28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f023 0210 	bic.w	r2, r3, #16
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	031b      	lsls	r3, r3, #12
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f043 0307 	orr.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e05a      	b.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d01d      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40010400 	.word	0x40010400
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40001800 	.word	0x40001800

080030e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e03f      	b.n	800319e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd fdf6 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	; 0x24
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 ff49 	bl	8003fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d165      	bne.n	800328e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_UART_Transmit_DMA+0x26>
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e05e      	b.n	8003290 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_UART_Transmit_DMA+0x38>
 80031dc:	2302      	movs	r3, #2
 80031de:	e057      	b.n	8003290 <HAL_UART_Transmit_DMA+0xe8>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2221      	movs	r2, #33	; 0x21
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <HAL_UART_Transmit_DMA+0xf0>)
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	4a21      	ldr	r2, [pc, #132]	; (800329c <HAL_UART_Transmit_DMA+0xf4>)
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	4a20      	ldr	r2, [pc, #128]	; (80032a0 <HAL_UART_Transmit_DMA+0xf8>)
 800321e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	2200      	movs	r2, #0
 8003226:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3304      	adds	r3, #4
 800323c:	461a      	mov	r2, r3
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	f7fe f8e6 	bl	8001410 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800324c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	617b      	str	r3, [r7, #20]
   return(result);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003276:	627a      	str	r2, [r7, #36]	; 0x24
 8003278:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6a39      	ldr	r1, [r7, #32]
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	61fb      	str	r3, [r7, #28]
   return(result);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e5      	bne.n	8003256 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3730      	adds	r7, #48	; 0x30
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	08003889 	.word	0x08003889
 800329c:	08003923 	.word	0x08003923
 80032a0:	08003a9b 	.word	0x08003a9b

080032a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d11d      	bne.n	80032fa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_UART_Receive_DMA+0x26>
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e016      	b.n	80032fc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_UART_Receive_DMA+0x38>
 80032d8:	2302      	movs	r3, #2
 80032da:	e00f      	b.n	80032fc <HAL_UART_Receive_DMA+0x58>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fc1d 	bl	8003b30 <UART_Start_Receive_DMA>
 80032f6:	4603      	mov	r3, r0
 80032f8:	e000      	b.n	80032fc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b0ba      	sub	sp, #232	; 0xe8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fd85 	bl	8003e72 <UART_Receive_IT>
      return;
 8003368:	e256      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800336a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80de 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003384:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80d1 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
 800339a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
 80033be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
 80033e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f043 0204 	orr.w	r2, r3, #4
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
 8003406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0208 	orr.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 81ed 	beq.w	800380e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fd10 	bl	8003e72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_UART_IRQHandler+0x17a>
 8003476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04f      	beq.n	800351e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fc18 	bl	8003cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d141      	bne.n	8003516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1d9      	bne.n	8003492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4a7d      	ldr	r2, [pc, #500]	; (80036e0 <HAL_UART_IRQHandler+0x3dc>)
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f854 	bl	80015a0 <HAL_DMA_Abort_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00e      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9a4 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00a      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9a0 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e006      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f99c 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800352a:	e170      	b.n	800380e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	bf00      	nop
    return;
 800352e:	e16e      	b.n	800380e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 814a 	bne.w	80037ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8143 	beq.w	80037ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 813c 	beq.w	80037ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	f040 80b4 	bne.w	80036e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8140 	beq.w	8003812 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800359a:	429a      	cmp	r2, r3
 800359c:	f080 8139 	bcs.w	8003812 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b2:	f000 8088 	beq.w	80036c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1d9      	bne.n	80035b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3314      	adds	r3, #20
 8003608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800362a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800362e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e1      	bne.n	8003602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800364e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e3      	bne.n	800363e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003696:	f023 0310 	bic.w	r3, r3, #16
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80036aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e3      	bne.n	8003684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fefd 	bl	80014c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8ca 	bl	8003870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036dc:	e099      	b.n	8003812 <HAL_UART_IRQHandler+0x50e>
 80036de:	bf00      	nop
 80036e0:	08003d7b 	.word	0x08003d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 808b 	beq.w	8003816 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8086 	beq.w	8003816 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800372e:	647a      	str	r2, [r7, #68]	; 0x44
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800373c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e3      	bne.n	800370a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	623b      	str	r3, [r7, #32]
   return(result);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003766:	633a      	str	r2, [r7, #48]	; 0x30
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e3      	bne.n	8003742 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	60fb      	str	r3, [r7, #12]
   return(result);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0310 	bic.w	r3, r3, #16
 800379e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037ac:	61fa      	str	r2, [r7, #28]
 80037ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	69b9      	ldr	r1, [r7, #24]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	617b      	str	r3, [r7, #20]
   return(result);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e3      	bne.n	8003788 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f852 	bl	8003870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037cc:	e023      	b.n	8003816 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_UART_IRQHandler+0x4ea>
 80037da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fadb 	bl	8003da2 <UART_Transmit_IT>
    return;
 80037ec:	e014      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <HAL_UART_IRQHandler+0x514>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fb1b 	bl	8003e42 <UART_EndTransmit_IT>
    return;
 800380c:	e004      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
    return;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
      return;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
      return;
 8003816:	bf00      	nop
  }
}
 8003818:	37e8      	adds	r7, #232	; 0xe8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b090      	sub	sp, #64	; 0x40
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d137      	bne.n	8003914 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80038a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a6:	2200      	movs	r2, #0
 80038a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	623b      	str	r3, [r7, #32]
   return(result);
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ca:	633a      	str	r2, [r7, #48]	; 0x30
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fe:	61fa      	str	r2, [r7, #28]
 8003900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	617b      	str	r3, [r7, #20]
   return(result);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e5      	bne.n	80038de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003912:	e002      	b.n	800391a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003914:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003916:	f7ff ff83 	bl	8003820 <HAL_UART_TxCpltCallback>
}
 800391a:	bf00      	nop
 800391c:	3740      	adds	r7, #64	; 0x40
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff ff7f 	bl	8003834 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b09c      	sub	sp, #112	; 0x70
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d172      	bne.n	8003a40 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800395a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395c:	2200      	movs	r2, #0
 800395e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003976:	66bb      	str	r3, [r7, #104]	; 0x68
 8003978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003980:	65ba      	str	r2, [r7, #88]	; 0x58
 8003982:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800398e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e5      	bne.n	8003960 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	667b      	str	r3, [r7, #100]	; 0x64
 80039ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039b4:	647a      	str	r2, [r7, #68]	; 0x44
 80039b6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e5      	bne.n	8003994 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	623b      	str	r3, [r7, #32]
   return(result);
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039de:	663b      	str	r3, [r7, #96]	; 0x60
 80039e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039e8:	633a      	str	r2, [r7, #48]	; 0x30
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e5      	bne.n	80039c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d119      	bne.n	8003a40 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a2c:	61fa      	str	r2, [r7, #28]
 8003a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	617b      	str	r3, [r7, #20]
   return(result);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a50:	f7ff ff0e 	bl	8003870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a54:	e002      	b.n	8003a5c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a58:	f7fd f89c 	bl	8000b94 <HAL_UART_RxCpltCallback>
}
 8003a5c:	bf00      	nop
 8003a5e:	3770      	adds	r7, #112	; 0x70
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff fef3 	bl	8003870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a8a:	e002      	b.n	8003a92 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff fedb 	bl	8003848 <HAL_UART_RxHalfCpltCallback>
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b21      	cmp	r3, #33	; 0x21
 8003acc:	d108      	bne.n	8003ae0 <UART_DMAError+0x46>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ada:	68b8      	ldr	r0, [r7, #8]
 8003adc:	f000 f8c2 	bl	8003c64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b22      	cmp	r3, #34	; 0x22
 8003b00:	d108      	bne.n	8003b14 <UART_DMAError+0x7a>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b0e:	68b8      	ldr	r0, [r7, #8]
 8003b10:	f000 f8d0 	bl	8003cb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0210 	orr.w	r2, r3, #16
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b20:	68b8      	ldr	r0, [r7, #8]
 8003b22:	f7ff fe9b 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b098      	sub	sp, #96	; 0x60
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2222      	movs	r2, #34	; 0x22
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	4a3e      	ldr	r2, [pc, #248]	; (8003c58 <UART_Start_Receive_DMA+0x128>)
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <UART_Start_Receive_DMA+0x12c>)
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <UART_Start_Receive_DMA+0x130>)
 8003b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	2200      	movs	r2, #0
 8003b76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	f7fd fc3e 	bl	8001410 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3314      	adds	r3, #20
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c06:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	617b      	str	r3, [r7, #20]
   return(result);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c3a:	627a      	str	r2, [r7, #36]	; 0x24
 8003c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6a39      	ldr	r1, [r7, #32]
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3760      	adds	r7, #96	; 0x60
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	0800393f 	.word	0x0800393f
 8003c5c:	08003a65 	.word	0x08003a65
 8003c60:	08003a9b 	.word	0x08003a9b

08003c64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	61ba      	str	r2, [r7, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003ca8:	bf00      	nop
 8003caa:	3724      	adds	r7, #36	; 0x24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b095      	sub	sp, #84	; 0x54
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cdc:	643a      	str	r2, [r7, #64]	; 0x40
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d119      	bne.n	8003d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0310 	bic.w	r3, r3, #16
 8003d42:	647b      	str	r3, [r7, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d4c:	61ba      	str	r2, [r7, #24]
 8003d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d6e:	bf00      	nop
 8003d70:	3754      	adds	r7, #84	; 0x54
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7ff fd61 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b21      	cmp	r3, #33	; 0x21
 8003db4:	d13e      	bne.n	8003e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	d114      	bne.n	8003dea <UART_Transmit_IT+0x48>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d110      	bne.n	8003dea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]
 8003de8:	e008      	b.n	8003dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6211      	str	r1, [r2, #32]
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10f      	bne.n	8003e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fcdc 	bl	8003820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b08c      	sub	sp, #48	; 0x30
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b22      	cmp	r3, #34	; 0x22
 8003e84:	f040 80ab 	bne.w	8003fde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d117      	bne.n	8003ec2 <UART_Receive_IT+0x50>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d113      	bne.n	8003ec2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec0:	e026      	b.n	8003f10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d007      	beq.n	8003ee6 <UART_Receive_IT+0x74>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <UART_Receive_IT+0x82>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e008      	b.n	8003f06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d15a      	bne.n	8003fda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0220 	bic.w	r2, r2, #32
 8003f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d135      	bne.n	8003fd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f023 0310 	bic.w	r3, r3, #16
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	623a      	str	r2, [r7, #32]
 8003f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	69f9      	ldr	r1, [r7, #28]
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e5      	bne.n	8003f6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d10a      	bne.n	8003fc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fc51 	bl	8003870 <HAL_UARTEx_RxEventCallback>
 8003fce:	e002      	b.n	8003fd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fc fddf 	bl	8000b94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e002      	b.n	8003fe0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3730      	adds	r7, #48	; 0x30
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	b09f      	sub	sp, #124	; 0x7c
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffe:	68d9      	ldr	r1, [r3, #12]
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	ea40 0301 	orr.w	r3, r0, r1
 8004008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800400a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	431a      	orrs	r2, r3
 8004014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	431a      	orrs	r2, r3
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4313      	orrs	r3, r2
 8004020:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800402c:	f021 010c 	bic.w	r1, r1, #12
 8004030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004036:	430b      	orrs	r3, r1
 8004038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004046:	6999      	ldr	r1, [r3, #24]
 8004048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	ea40 0301 	orr.w	r3, r0, r1
 8004050:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4bc5      	ldr	r3, [pc, #788]	; (800436c <UART_SetConfig+0x384>)
 8004058:	429a      	cmp	r2, r3
 800405a:	d004      	beq.n	8004066 <UART_SetConfig+0x7e>
 800405c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4bc3      	ldr	r3, [pc, #780]	; (8004370 <UART_SetConfig+0x388>)
 8004062:	429a      	cmp	r2, r3
 8004064:	d103      	bne.n	800406e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004066:	f7fd ffc1 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 800406a:	6778      	str	r0, [r7, #116]	; 0x74
 800406c:	e002      	b.n	8004074 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800406e:	f7fd ffa9 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8004072:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407c:	f040 80b6 	bne.w	80041ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004082:	461c      	mov	r4, r3
 8004084:	f04f 0500 	mov.w	r5, #0
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	1891      	adds	r1, r2, r2
 800408e:	6439      	str	r1, [r7, #64]	; 0x40
 8004090:	415b      	adcs	r3, r3
 8004092:	647b      	str	r3, [r7, #68]	; 0x44
 8004094:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004098:	1912      	adds	r2, r2, r4
 800409a:	eb45 0303 	adc.w	r3, r5, r3
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	00d9      	lsls	r1, r3, #3
 80040a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ac:	00d0      	lsls	r0, r2, #3
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	1911      	adds	r1, r2, r4
 80040b4:	6639      	str	r1, [r7, #96]	; 0x60
 80040b6:	416b      	adcs	r3, r5
 80040b8:	667b      	str	r3, [r7, #100]	; 0x64
 80040ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	461a      	mov	r2, r3
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040c8:	415b      	adcs	r3, r3
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040d4:	f7fc faa4 	bl	8000620 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4ba5      	ldr	r3, [pc, #660]	; (8004374 <UART_SetConfig+0x38c>)
 80040de:	fba3 2302 	umull	r2, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	011e      	lsls	r6, r3, #4
 80040e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e8:	461c      	mov	r4, r3
 80040ea:	f04f 0500 	mov.w	r5, #0
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	1891      	adds	r1, r2, r2
 80040f4:	6339      	str	r1, [r7, #48]	; 0x30
 80040f6:	415b      	adcs	r3, r3
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
 80040fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040fe:	1912      	adds	r2, r2, r4
 8004100:	eb45 0303 	adc.w	r3, r5, r3
 8004104:	f04f 0000 	mov.w	r0, #0
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	00d9      	lsls	r1, r3, #3
 800410e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004112:	00d0      	lsls	r0, r2, #3
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	1911      	adds	r1, r2, r4
 800411a:	65b9      	str	r1, [r7, #88]	; 0x58
 800411c:	416b      	adcs	r3, r5
 800411e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	461a      	mov	r2, r3
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	1891      	adds	r1, r2, r2
 800412c:	62b9      	str	r1, [r7, #40]	; 0x28
 800412e:	415b      	adcs	r3, r3
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004136:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800413a:	f7fc fa71 	bl	8000620 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <UART_SetConfig+0x38c>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a87      	ldr	r2, [pc, #540]	; (8004374 <UART_SetConfig+0x38c>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004164:	441e      	add	r6, r3
 8004166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004168:	4618      	mov	r0, r3
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	1894      	adds	r4, r2, r2
 8004174:	623c      	str	r4, [r7, #32]
 8004176:	415b      	adcs	r3, r3
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800417e:	1812      	adds	r2, r2, r0
 8004180:	eb41 0303 	adc.w	r3, r1, r3
 8004184:	f04f 0400 	mov.w	r4, #0
 8004188:	f04f 0500 	mov.w	r5, #0
 800418c:	00dd      	lsls	r5, r3, #3
 800418e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004192:	00d4      	lsls	r4, r2, #3
 8004194:	4622      	mov	r2, r4
 8004196:	462b      	mov	r3, r5
 8004198:	1814      	adds	r4, r2, r0
 800419a:	653c      	str	r4, [r7, #80]	; 0x50
 800419c:	414b      	adcs	r3, r1
 800419e:	657b      	str	r3, [r7, #84]	; 0x54
 80041a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	461a      	mov	r2, r3
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	1891      	adds	r1, r2, r2
 80041ac:	61b9      	str	r1, [r7, #24]
 80041ae:	415b      	adcs	r3, r3
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041ba:	f7fc fa31 	bl	8000620 <__aeabi_uldivmod>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <UART_SetConfig+0x38c>)
 80041c4:	fba3 1302 	umull	r1, r3, r3, r2
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	2164      	movs	r1, #100	; 0x64
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	3332      	adds	r3, #50	; 0x32
 80041d6:	4a67      	ldr	r2, [pc, #412]	; (8004374 <UART_SetConfig+0x38c>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	f003 0207 	and.w	r2, r3, #7
 80041e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4432      	add	r2, r6
 80041e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041ea:	e0b9      	b.n	8004360 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ee:	461c      	mov	r4, r3
 80041f0:	f04f 0500 	mov.w	r5, #0
 80041f4:	4622      	mov	r2, r4
 80041f6:	462b      	mov	r3, r5
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	6139      	str	r1, [r7, #16]
 80041fc:	415b      	adcs	r3, r3
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004204:	1912      	adds	r2, r2, r4
 8004206:	eb45 0303 	adc.w	r3, r5, r3
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	00d9      	lsls	r1, r3, #3
 8004214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004218:	00d0      	lsls	r0, r2, #3
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	eb12 0804 	adds.w	r8, r2, r4
 8004222:	eb43 0905 	adc.w	r9, r3, r5
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4618      	mov	r0, r3
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	008b      	lsls	r3, r1, #2
 800423a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800423e:	0082      	lsls	r2, r0, #2
 8004240:	4640      	mov	r0, r8
 8004242:	4649      	mov	r1, r9
 8004244:	f7fc f9ec 	bl	8000620 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4b49      	ldr	r3, [pc, #292]	; (8004374 <UART_SetConfig+0x38c>)
 800424e:	fba3 2302 	umull	r2, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	011e      	lsls	r6, r3, #4
 8004256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004258:	4618      	mov	r0, r3
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	1894      	adds	r4, r2, r2
 8004264:	60bc      	str	r4, [r7, #8]
 8004266:	415b      	adcs	r3, r3
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800426e:	1812      	adds	r2, r2, r0
 8004270:	eb41 0303 	adc.w	r3, r1, r3
 8004274:	f04f 0400 	mov.w	r4, #0
 8004278:	f04f 0500 	mov.w	r5, #0
 800427c:	00dd      	lsls	r5, r3, #3
 800427e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004282:	00d4      	lsls	r4, r2, #3
 8004284:	4622      	mov	r2, r4
 8004286:	462b      	mov	r3, r5
 8004288:	1814      	adds	r4, r2, r0
 800428a:	64bc      	str	r4, [r7, #72]	; 0x48
 800428c:	414b      	adcs	r3, r1
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	008b      	lsls	r3, r1, #2
 80042a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042a8:	0082      	lsls	r2, r0, #2
 80042aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042ae:	f7fc f9b7 	bl	8000620 <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <UART_SetConfig+0x38c>)
 80042b8:	fba3 1302 	umull	r1, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	2164      	movs	r1, #100	; 0x64
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	3332      	adds	r3, #50	; 0x32
 80042ca:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <UART_SetConfig+0x38c>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d6:	441e      	add	r6, r3
 80042d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042da:	4618      	mov	r0, r3
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	1894      	adds	r4, r2, r2
 80042e6:	603c      	str	r4, [r7, #0]
 80042e8:	415b      	adcs	r3, r3
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f0:	1812      	adds	r2, r2, r0
 80042f2:	eb41 0303 	adc.w	r3, r1, r3
 80042f6:	f04f 0400 	mov.w	r4, #0
 80042fa:	f04f 0500 	mov.w	r5, #0
 80042fe:	00dd      	lsls	r5, r3, #3
 8004300:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004304:	00d4      	lsls	r4, r2, #3
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	eb12 0a00 	adds.w	sl, r2, r0
 800430e:	eb43 0b01 	adc.w	fp, r3, r1
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	008b      	lsls	r3, r1, #2
 8004326:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800432a:	0082      	lsls	r2, r0, #2
 800432c:	4650      	mov	r0, sl
 800432e:	4659      	mov	r1, fp
 8004330:	f7fc f976 	bl	8000620 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <UART_SetConfig+0x38c>)
 800433a:	fba3 1302 	umull	r1, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2164      	movs	r1, #100	; 0x64
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	3332      	adds	r3, #50	; 0x32
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <UART_SetConfig+0x38c>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	f003 020f 	and.w	r2, r3, #15
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4432      	add	r2, r6
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	377c      	adds	r7, #124	; 0x7c
 8004364:	46bd      	mov	sp, r7
 8004366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436a:	bf00      	nop
 800436c:	40011000 	.word	0x40011000
 8004370:	40011400 	.word	0x40011400
 8004374:	51eb851f 	.word	0x51eb851f

08004378 <__libc_init_array>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4d0d      	ldr	r5, [pc, #52]	; (80043b0 <__libc_init_array+0x38>)
 800437c:	4c0d      	ldr	r4, [pc, #52]	; (80043b4 <__libc_init_array+0x3c>)
 800437e:	1b64      	subs	r4, r4, r5
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	2600      	movs	r6, #0
 8004384:	42a6      	cmp	r6, r4
 8004386:	d109      	bne.n	800439c <__libc_init_array+0x24>
 8004388:	4d0b      	ldr	r5, [pc, #44]	; (80043b8 <__libc_init_array+0x40>)
 800438a:	4c0c      	ldr	r4, [pc, #48]	; (80043bc <__libc_init_array+0x44>)
 800438c:	f000 fd8c 	bl	8004ea8 <_init>
 8004390:	1b64      	subs	r4, r4, r5
 8004392:	10a4      	asrs	r4, r4, #2
 8004394:	2600      	movs	r6, #0
 8004396:	42a6      	cmp	r6, r4
 8004398:	d105      	bne.n	80043a6 <__libc_init_array+0x2e>
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a0:	4798      	blx	r3
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7ee      	b.n	8004384 <__libc_init_array+0xc>
 80043a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043aa:	4798      	blx	r3
 80043ac:	3601      	adds	r6, #1
 80043ae:	e7f2      	b.n	8004396 <__libc_init_array+0x1e>
 80043b0:	080052b8 	.word	0x080052b8
 80043b4:	080052b8 	.word	0x080052b8
 80043b8:	080052b8 	.word	0x080052b8
 80043bc:	080052bc 	.word	0x080052bc

080043c0 <memset>:
 80043c0:	4402      	add	r2, r0
 80043c2:	4603      	mov	r3, r0
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	f803 1b01 	strb.w	r1, [r3], #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <sinf>:
 80043d0:	ee10 3a10 	vmov	r3, s0
 80043d4:	b507      	push	{r0, r1, r2, lr}
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <sinf+0x7c>)
 80043d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	4293      	cmp	r3, r2
 80043de:	dc05      	bgt.n	80043ec <sinf+0x1c>
 80043e0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004450 <sinf+0x80>
 80043e4:	2000      	movs	r0, #0
 80043e6:	f000 fc5b 	bl	8004ca0 <__kernel_sinf>
 80043ea:	e004      	b.n	80043f6 <sinf+0x26>
 80043ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80043f0:	db04      	blt.n	80043fc <sinf+0x2c>
 80043f2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80043f6:	b003      	add	sp, #12
 80043f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80043fc:	4668      	mov	r0, sp
 80043fe:	f000 f829 	bl	8004454 <__ieee754_rem_pio2f>
 8004402:	f000 0003 	and.w	r0, r0, #3
 8004406:	2801      	cmp	r0, #1
 8004408:	d008      	beq.n	800441c <sinf+0x4c>
 800440a:	2802      	cmp	r0, #2
 800440c:	d00d      	beq.n	800442a <sinf+0x5a>
 800440e:	b9b0      	cbnz	r0, 800443e <sinf+0x6e>
 8004410:	eddd 0a01 	vldr	s1, [sp, #4]
 8004414:	ed9d 0a00 	vldr	s0, [sp]
 8004418:	2001      	movs	r0, #1
 800441a:	e7e4      	b.n	80043e6 <sinf+0x16>
 800441c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004420:	ed9d 0a00 	vldr	s0, [sp]
 8004424:	f000 f952 	bl	80046cc <__kernel_cosf>
 8004428:	e7e5      	b.n	80043f6 <sinf+0x26>
 800442a:	eddd 0a01 	vldr	s1, [sp, #4]
 800442e:	ed9d 0a00 	vldr	s0, [sp]
 8004432:	2001      	movs	r0, #1
 8004434:	f000 fc34 	bl	8004ca0 <__kernel_sinf>
 8004438:	eeb1 0a40 	vneg.f32	s0, s0
 800443c:	e7db      	b.n	80043f6 <sinf+0x26>
 800443e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004442:	ed9d 0a00 	vldr	s0, [sp]
 8004446:	f000 f941 	bl	80046cc <__kernel_cosf>
 800444a:	e7f5      	b.n	8004438 <sinf+0x68>
 800444c:	3f490fd8 	.word	0x3f490fd8
 8004450:	00000000 	.word	0x00000000

08004454 <__ieee754_rem_pio2f>:
 8004454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004456:	ee10 6a10 	vmov	r6, s0
 800445a:	4b8e      	ldr	r3, [pc, #568]	; (8004694 <__ieee754_rem_pio2f+0x240>)
 800445c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004460:	429d      	cmp	r5, r3
 8004462:	b087      	sub	sp, #28
 8004464:	eef0 7a40 	vmov.f32	s15, s0
 8004468:	4604      	mov	r4, r0
 800446a:	dc05      	bgt.n	8004478 <__ieee754_rem_pio2f+0x24>
 800446c:	2300      	movs	r3, #0
 800446e:	ed80 0a00 	vstr	s0, [r0]
 8004472:	6043      	str	r3, [r0, #4]
 8004474:	2000      	movs	r0, #0
 8004476:	e01a      	b.n	80044ae <__ieee754_rem_pio2f+0x5a>
 8004478:	4b87      	ldr	r3, [pc, #540]	; (8004698 <__ieee754_rem_pio2f+0x244>)
 800447a:	429d      	cmp	r5, r3
 800447c:	dc46      	bgt.n	800450c <__ieee754_rem_pio2f+0xb8>
 800447e:	2e00      	cmp	r6, #0
 8004480:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800469c <__ieee754_rem_pio2f+0x248>
 8004484:	4b86      	ldr	r3, [pc, #536]	; (80046a0 <__ieee754_rem_pio2f+0x24c>)
 8004486:	f025 050f 	bic.w	r5, r5, #15
 800448a:	dd1f      	ble.n	80044cc <__ieee754_rem_pio2f+0x78>
 800448c:	429d      	cmp	r5, r3
 800448e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004492:	d00e      	beq.n	80044b2 <__ieee754_rem_pio2f+0x5e>
 8004494:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80046a4 <__ieee754_rem_pio2f+0x250>
 8004498:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800449c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044a0:	ed80 0a00 	vstr	s0, [r0]
 80044a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044a8:	2001      	movs	r0, #1
 80044aa:	edc4 7a01 	vstr	s15, [r4, #4]
 80044ae:	b007      	add	sp, #28
 80044b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80046a8 <__ieee754_rem_pio2f+0x254>
 80044b6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80046ac <__ieee754_rem_pio2f+0x258>
 80044ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044be:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80044c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80044c6:	edc0 6a00 	vstr	s13, [r0]
 80044ca:	e7eb      	b.n	80044a4 <__ieee754_rem_pio2f+0x50>
 80044cc:	429d      	cmp	r5, r3
 80044ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80044d2:	d00e      	beq.n	80044f2 <__ieee754_rem_pio2f+0x9e>
 80044d4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80046a4 <__ieee754_rem_pio2f+0x250>
 80044d8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80044dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044e0:	ed80 0a00 	vstr	s0, [r0]
 80044e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	edc4 7a01 	vstr	s15, [r4, #4]
 80044f0:	e7dd      	b.n	80044ae <__ieee754_rem_pio2f+0x5a>
 80044f2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80046a8 <__ieee754_rem_pio2f+0x254>
 80044f6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80046ac <__ieee754_rem_pio2f+0x258>
 80044fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80044fe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004502:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004506:	edc0 6a00 	vstr	s13, [r0]
 800450a:	e7eb      	b.n	80044e4 <__ieee754_rem_pio2f+0x90>
 800450c:	4b68      	ldr	r3, [pc, #416]	; (80046b0 <__ieee754_rem_pio2f+0x25c>)
 800450e:	429d      	cmp	r5, r3
 8004510:	dc72      	bgt.n	80045f8 <__ieee754_rem_pio2f+0x1a4>
 8004512:	f000 fc0d 	bl	8004d30 <fabsf>
 8004516:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80046b4 <__ieee754_rem_pio2f+0x260>
 800451a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800451e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800452a:	ee17 0a90 	vmov	r0, s15
 800452e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800469c <__ieee754_rem_pio2f+0x248>
 8004532:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004536:	281f      	cmp	r0, #31
 8004538:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80046a4 <__ieee754_rem_pio2f+0x250>
 800453c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004540:	eeb1 6a47 	vneg.f32	s12, s14
 8004544:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004548:	ee16 2a90 	vmov	r2, s13
 800454c:	dc1c      	bgt.n	8004588 <__ieee754_rem_pio2f+0x134>
 800454e:	495a      	ldr	r1, [pc, #360]	; (80046b8 <__ieee754_rem_pio2f+0x264>)
 8004550:	1e47      	subs	r7, r0, #1
 8004552:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004556:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800455a:	428b      	cmp	r3, r1
 800455c:	d014      	beq.n	8004588 <__ieee754_rem_pio2f+0x134>
 800455e:	6022      	str	r2, [r4, #0]
 8004560:	ed94 7a00 	vldr	s14, [r4]
 8004564:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004568:	2e00      	cmp	r6, #0
 800456a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800456e:	ed84 0a01 	vstr	s0, [r4, #4]
 8004572:	da9c      	bge.n	80044ae <__ieee754_rem_pio2f+0x5a>
 8004574:	eeb1 7a47 	vneg.f32	s14, s14
 8004578:	eeb1 0a40 	vneg.f32	s0, s0
 800457c:	ed84 7a00 	vstr	s14, [r4]
 8004580:	ed84 0a01 	vstr	s0, [r4, #4]
 8004584:	4240      	negs	r0, r0
 8004586:	e792      	b.n	80044ae <__ieee754_rem_pio2f+0x5a>
 8004588:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800458c:	15eb      	asrs	r3, r5, #23
 800458e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8004592:	2d08      	cmp	r5, #8
 8004594:	dde3      	ble.n	800455e <__ieee754_rem_pio2f+0x10a>
 8004596:	eddf 7a44 	vldr	s15, [pc, #272]	; 80046a8 <__ieee754_rem_pio2f+0x254>
 800459a:	eef0 6a40 	vmov.f32	s13, s0
 800459e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80045a2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80045a6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80045aa:	eddf 7a40 	vldr	s15, [pc, #256]	; 80046ac <__ieee754_rem_pio2f+0x258>
 80045ae:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80045b2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80045b6:	eef0 7a40 	vmov.f32	s15, s0
 80045ba:	ee15 2a90 	vmov	r2, s11
 80045be:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80045c2:	1a5b      	subs	r3, r3, r1
 80045c4:	2b19      	cmp	r3, #25
 80045c6:	dc04      	bgt.n	80045d2 <__ieee754_rem_pio2f+0x17e>
 80045c8:	edc4 5a00 	vstr	s11, [r4]
 80045cc:	eeb0 0a66 	vmov.f32	s0, s13
 80045d0:	e7c6      	b.n	8004560 <__ieee754_rem_pio2f+0x10c>
 80045d2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80046bc <__ieee754_rem_pio2f+0x268>
 80045d6:	eeb0 0a66 	vmov.f32	s0, s13
 80045da:	eea6 0a25 	vfma.f32	s0, s12, s11
 80045de:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80045e2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80046c0 <__ieee754_rem_pio2f+0x26c>
 80045e6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80045ea:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80045ee:	ee30 7a67 	vsub.f32	s14, s0, s15
 80045f2:	ed84 7a00 	vstr	s14, [r4]
 80045f6:	e7b3      	b.n	8004560 <__ieee754_rem_pio2f+0x10c>
 80045f8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80045fc:	db06      	blt.n	800460c <__ieee754_rem_pio2f+0x1b8>
 80045fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004602:	edc0 7a01 	vstr	s15, [r0, #4]
 8004606:	edc0 7a00 	vstr	s15, [r0]
 800460a:	e733      	b.n	8004474 <__ieee754_rem_pio2f+0x20>
 800460c:	15ea      	asrs	r2, r5, #23
 800460e:	3a86      	subs	r2, #134	; 0x86
 8004610:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800461c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80046c4 <__ieee754_rem_pio2f+0x270>
 8004620:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004628:	ed8d 7a03 	vstr	s14, [sp, #12]
 800462c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004630:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800463c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004640:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004644:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464c:	edcd 7a05 	vstr	s15, [sp, #20]
 8004650:	d11e      	bne.n	8004690 <__ieee754_rem_pio2f+0x23c>
 8004652:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	bf14      	ite	ne
 800465c:	2302      	movne	r3, #2
 800465e:	2301      	moveq	r3, #1
 8004660:	4919      	ldr	r1, [pc, #100]	; (80046c8 <__ieee754_rem_pio2f+0x274>)
 8004662:	9101      	str	r1, [sp, #4]
 8004664:	2102      	movs	r1, #2
 8004666:	9100      	str	r1, [sp, #0]
 8004668:	a803      	add	r0, sp, #12
 800466a:	4621      	mov	r1, r4
 800466c:	f000 f88e 	bl	800478c <__kernel_rem_pio2f>
 8004670:	2e00      	cmp	r6, #0
 8004672:	f6bf af1c 	bge.w	80044ae <__ieee754_rem_pio2f+0x5a>
 8004676:	edd4 7a00 	vldr	s15, [r4]
 800467a:	eef1 7a67 	vneg.f32	s15, s15
 800467e:	edc4 7a00 	vstr	s15, [r4]
 8004682:	edd4 7a01 	vldr	s15, [r4, #4]
 8004686:	eef1 7a67 	vneg.f32	s15, s15
 800468a:	edc4 7a01 	vstr	s15, [r4, #4]
 800468e:	e779      	b.n	8004584 <__ieee754_rem_pio2f+0x130>
 8004690:	2303      	movs	r3, #3
 8004692:	e7e5      	b.n	8004660 <__ieee754_rem_pio2f+0x20c>
 8004694:	3f490fd8 	.word	0x3f490fd8
 8004698:	4016cbe3 	.word	0x4016cbe3
 800469c:	3fc90f80 	.word	0x3fc90f80
 80046a0:	3fc90fd0 	.word	0x3fc90fd0
 80046a4:	37354443 	.word	0x37354443
 80046a8:	37354400 	.word	0x37354400
 80046ac:	2e85a308 	.word	0x2e85a308
 80046b0:	43490f80 	.word	0x43490f80
 80046b4:	3f22f984 	.word	0x3f22f984
 80046b8:	08004ee0 	.word	0x08004ee0
 80046bc:	2e85a300 	.word	0x2e85a300
 80046c0:	248d3132 	.word	0x248d3132
 80046c4:	43800000 	.word	0x43800000
 80046c8:	08004f60 	.word	0x08004f60

080046cc <__kernel_cosf>:
 80046cc:	ee10 3a10 	vmov	r3, s0
 80046d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80046d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80046dc:	da05      	bge.n	80046ea <__kernel_cosf+0x1e>
 80046de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80046e2:	ee17 2a90 	vmov	r2, s15
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	d03d      	beq.n	8004766 <__kernel_cosf+0x9a>
 80046ea:	ee60 5a00 	vmul.f32	s11, s0, s0
 80046ee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800476c <__kernel_cosf+0xa0>
 80046f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004770 <__kernel_cosf+0xa4>
 80046f6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004774 <__kernel_cosf+0xa8>
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <__kernel_cosf+0xac>)
 80046fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004700:	4293      	cmp	r3, r2
 8004702:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800477c <__kernel_cosf+0xb0>
 8004706:	eee7 7a25 	vfma.f32	s15, s14, s11
 800470a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004780 <__kernel_cosf+0xb4>
 800470e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004712:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004784 <__kernel_cosf+0xb8>
 8004716:	eee7 7a25 	vfma.f32	s15, s14, s11
 800471a:	eeb0 7a66 	vmov.f32	s14, s13
 800471e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004722:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004726:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800472a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800472e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004732:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004736:	dc04      	bgt.n	8004742 <__kernel_cosf+0x76>
 8004738:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800473c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004740:	4770      	bx	lr
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <__kernel_cosf+0xbc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	bfda      	itte	le
 8004748:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800474c:	ee06 3a90 	vmovle	s13, r3
 8004750:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004754:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004758:	ee36 0a66 	vsub.f32	s0, s12, s13
 800475c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004760:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004764:	4770      	bx	lr
 8004766:	eeb0 0a46 	vmov.f32	s0, s12
 800476a:	4770      	bx	lr
 800476c:	ad47d74e 	.word	0xad47d74e
 8004770:	310f74f6 	.word	0x310f74f6
 8004774:	3d2aaaab 	.word	0x3d2aaaab
 8004778:	3e999999 	.word	0x3e999999
 800477c:	b493f27c 	.word	0xb493f27c
 8004780:	37d00d01 	.word	0x37d00d01
 8004784:	bab60b61 	.word	0xbab60b61
 8004788:	3f480000 	.word	0x3f480000

0800478c <__kernel_rem_pio2f>:
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	ed2d 8b04 	vpush	{d8-d9}
 8004794:	b0d7      	sub	sp, #348	; 0x15c
 8004796:	4616      	mov	r6, r2
 8004798:	4698      	mov	r8, r3
 800479a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800479c:	4bbb      	ldr	r3, [pc, #748]	; (8004a8c <__kernel_rem_pio2f+0x300>)
 800479e:	9001      	str	r0, [sp, #4]
 80047a0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80047a4:	1d33      	adds	r3, r6, #4
 80047a6:	460d      	mov	r5, r1
 80047a8:	f108 39ff 	add.w	r9, r8, #4294967295
 80047ac:	db29      	blt.n	8004802 <__kernel_rem_pio2f+0x76>
 80047ae:	1ef1      	subs	r1, r6, #3
 80047b0:	bf48      	it	mi
 80047b2:	1d31      	addmi	r1, r6, #4
 80047b4:	10c9      	asrs	r1, r1, #3
 80047b6:	1c4c      	adds	r4, r1, #1
 80047b8:	00e3      	lsls	r3, r4, #3
 80047ba:	9302      	str	r3, [sp, #8]
 80047bc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80047be:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004a9c <__kernel_rem_pio2f+0x310>
 80047c2:	eba1 0009 	sub.w	r0, r1, r9
 80047c6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80047ca:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80047ce:	eb07 0c09 	add.w	ip, r7, r9
 80047d2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80047d6:	2300      	movs	r3, #0
 80047d8:	4563      	cmp	r3, ip
 80047da:	dd14      	ble.n	8004806 <__kernel_rem_pio2f+0x7a>
 80047dc:	ab1a      	add	r3, sp, #104	; 0x68
 80047de:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80047e2:	46cc      	mov	ip, r9
 80047e4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80047e8:	f1c8 0b01 	rsb	fp, r8, #1
 80047ec:	eb0b 020c 	add.w	r2, fp, ip
 80047f0:	4297      	cmp	r7, r2
 80047f2:	db27      	blt.n	8004844 <__kernel_rem_pio2f+0xb8>
 80047f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80047f8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004a9c <__kernel_rem_pio2f+0x310>
 80047fc:	4618      	mov	r0, r3
 80047fe:	2200      	movs	r2, #0
 8004800:	e016      	b.n	8004830 <__kernel_rem_pio2f+0xa4>
 8004802:	2100      	movs	r1, #0
 8004804:	e7d7      	b.n	80047b6 <__kernel_rem_pio2f+0x2a>
 8004806:	42d8      	cmn	r0, r3
 8004808:	bf5d      	ittte	pl
 800480a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800480e:	ee07 2a90 	vmovpl	s15, r2
 8004812:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004816:	eef0 7a47 	vmovmi.f32	s15, s14
 800481a:	ecea 7a01 	vstmia	sl!, {s15}
 800481e:	3301      	adds	r3, #1
 8004820:	e7da      	b.n	80047d8 <__kernel_rem_pio2f+0x4c>
 8004822:	ecfe 6a01 	vldmia	lr!, {s13}
 8004826:	ed90 7a00 	vldr	s14, [r0]
 800482a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800482e:	3201      	adds	r2, #1
 8004830:	454a      	cmp	r2, r9
 8004832:	f1a0 0004 	sub.w	r0, r0, #4
 8004836:	ddf4      	ble.n	8004822 <__kernel_rem_pio2f+0x96>
 8004838:	ecea 7a01 	vstmia	sl!, {s15}
 800483c:	3304      	adds	r3, #4
 800483e:	f10c 0c01 	add.w	ip, ip, #1
 8004842:	e7d3      	b.n	80047ec <__kernel_rem_pio2f+0x60>
 8004844:	ab06      	add	r3, sp, #24
 8004846:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800484e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8004a98 <__kernel_rem_pio2f+0x30c>
 8004852:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8004a94 <__kernel_rem_pio2f+0x308>
 8004856:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800485a:	9303      	str	r3, [sp, #12]
 800485c:	46ba      	mov	sl, r7
 800485e:	ab56      	add	r3, sp, #344	; 0x158
 8004860:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004864:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8004868:	ab06      	add	r3, sp, #24
 800486a:	4618      	mov	r0, r3
 800486c:	4652      	mov	r2, sl
 800486e:	2a00      	cmp	r2, #0
 8004870:	dc51      	bgt.n	8004916 <__kernel_rem_pio2f+0x18a>
 8004872:	4620      	mov	r0, r4
 8004874:	9305      	str	r3, [sp, #20]
 8004876:	f000 faa5 	bl	8004dc4 <scalbnf>
 800487a:	eeb0 8a40 	vmov.f32	s16, s0
 800487e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004882:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004886:	f000 fa5b 	bl	8004d40 <floorf>
 800488a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800488e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004892:	2c00      	cmp	r4, #0
 8004894:	9b05      	ldr	r3, [sp, #20]
 8004896:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800489a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800489e:	edcd 7a00 	vstr	s15, [sp]
 80048a2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80048a6:	dd4b      	ble.n	8004940 <__kernel_rem_pio2f+0x1b4>
 80048a8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80048ac:	aa06      	add	r2, sp, #24
 80048ae:	f1c4 0e08 	rsb	lr, r4, #8
 80048b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80048b6:	ee17 1a90 	vmov	r1, s15
 80048ba:	fa42 f00e 	asr.w	r0, r2, lr
 80048be:	4401      	add	r1, r0
 80048c0:	9100      	str	r1, [sp, #0]
 80048c2:	fa00 f00e 	lsl.w	r0, r0, lr
 80048c6:	a906      	add	r1, sp, #24
 80048c8:	1a12      	subs	r2, r2, r0
 80048ca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80048ce:	f1c4 0007 	rsb	r0, r4, #7
 80048d2:	fa42 fb00 	asr.w	fp, r2, r0
 80048d6:	f1bb 0f00 	cmp.w	fp, #0
 80048da:	dd43      	ble.n	8004964 <__kernel_rem_pio2f+0x1d8>
 80048dc:	9a00      	ldr	r2, [sp, #0]
 80048de:	f04f 0e00 	mov.w	lr, #0
 80048e2:	3201      	adds	r2, #1
 80048e4:	9200      	str	r2, [sp, #0]
 80048e6:	4670      	mov	r0, lr
 80048e8:	45f2      	cmp	sl, lr
 80048ea:	dc6c      	bgt.n	80049c6 <__kernel_rem_pio2f+0x23a>
 80048ec:	2c00      	cmp	r4, #0
 80048ee:	dd04      	ble.n	80048fa <__kernel_rem_pio2f+0x16e>
 80048f0:	2c01      	cmp	r4, #1
 80048f2:	d079      	beq.n	80049e8 <__kernel_rem_pio2f+0x25c>
 80048f4:	2c02      	cmp	r4, #2
 80048f6:	f000 8082 	beq.w	80049fe <__kernel_rem_pio2f+0x272>
 80048fa:	f1bb 0f02 	cmp.w	fp, #2
 80048fe:	d131      	bne.n	8004964 <__kernel_rem_pio2f+0x1d8>
 8004900:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004904:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004908:	b360      	cbz	r0, 8004964 <__kernel_rem_pio2f+0x1d8>
 800490a:	4620      	mov	r0, r4
 800490c:	f000 fa5a 	bl	8004dc4 <scalbnf>
 8004910:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004914:	e026      	b.n	8004964 <__kernel_rem_pio2f+0x1d8>
 8004916:	ee60 7a28 	vmul.f32	s15, s0, s17
 800491a:	3a01      	subs	r2, #1
 800491c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004920:	a942      	add	r1, sp, #264	; 0x108
 8004922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004926:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800492a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800492e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004932:	eca0 0a01 	vstmia	r0!, {s0}
 8004936:	ed9c 0a00 	vldr	s0, [ip]
 800493a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800493e:	e796      	b.n	800486e <__kernel_rem_pio2f+0xe2>
 8004940:	d107      	bne.n	8004952 <__kernel_rem_pio2f+0x1c6>
 8004942:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004946:	a906      	add	r1, sp, #24
 8004948:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800494c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8004950:	e7c1      	b.n	80048d6 <__kernel_rem_pio2f+0x14a>
 8004952:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004956:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800495a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495e:	da2f      	bge.n	80049c0 <__kernel_rem_pio2f+0x234>
 8004960:	f04f 0b00 	mov.w	fp, #0
 8004964:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496c:	f040 8098 	bne.w	8004aa0 <__kernel_rem_pio2f+0x314>
 8004970:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004974:	469c      	mov	ip, r3
 8004976:	2200      	movs	r2, #0
 8004978:	45bc      	cmp	ip, r7
 800497a:	da48      	bge.n	8004a0e <__kernel_rem_pio2f+0x282>
 800497c:	2a00      	cmp	r2, #0
 800497e:	d05f      	beq.n	8004a40 <__kernel_rem_pio2f+0x2b4>
 8004980:	aa06      	add	r2, sp, #24
 8004982:	3c08      	subs	r4, #8
 8004984:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004988:	2900      	cmp	r1, #0
 800498a:	d07d      	beq.n	8004a88 <__kernel_rem_pio2f+0x2fc>
 800498c:	4620      	mov	r0, r4
 800498e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	f000 fa16 	bl	8004dc4 <scalbnf>
 8004998:	9b01      	ldr	r3, [sp, #4]
 800499a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004a98 <__kernel_rem_pio2f+0x30c>
 800499e:	4619      	mov	r1, r3
 80049a0:	2900      	cmp	r1, #0
 80049a2:	f280 80af 	bge.w	8004b04 <__kernel_rem_pio2f+0x378>
 80049a6:	4618      	mov	r0, r3
 80049a8:	2400      	movs	r4, #0
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f2c0 80d0 	blt.w	8004b50 <__kernel_rem_pio2f+0x3c4>
 80049b0:	a942      	add	r1, sp, #264	; 0x108
 80049b2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80049b6:	4a36      	ldr	r2, [pc, #216]	; (8004a90 <__kernel_rem_pio2f+0x304>)
 80049b8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004a9c <__kernel_rem_pio2f+0x310>
 80049bc:	2100      	movs	r1, #0
 80049be:	e0bb      	b.n	8004b38 <__kernel_rem_pio2f+0x3ac>
 80049c0:	f04f 0b02 	mov.w	fp, #2
 80049c4:	e78a      	b.n	80048dc <__kernel_rem_pio2f+0x150>
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	b948      	cbnz	r0, 80049de <__kernel_rem_pio2f+0x252>
 80049ca:	b11a      	cbz	r2, 80049d4 <__kernel_rem_pio2f+0x248>
 80049cc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f10e 0e01 	add.w	lr, lr, #1
 80049d8:	3304      	adds	r3, #4
 80049da:	4610      	mov	r0, r2
 80049dc:	e784      	b.n	80048e8 <__kernel_rem_pio2f+0x15c>
 80049de:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	4602      	mov	r2, r0
 80049e6:	e7f5      	b.n	80049d4 <__kernel_rem_pio2f+0x248>
 80049e8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80049ec:	ab06      	add	r3, sp, #24
 80049ee:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80049f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f6:	aa06      	add	r2, sp, #24
 80049f8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80049fc:	e77d      	b.n	80048fa <__kernel_rem_pio2f+0x16e>
 80049fe:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004a02:	ab06      	add	r3, sp, #24
 8004a04:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	e7f3      	b.n	80049f6 <__kernel_rem_pio2f+0x26a>
 8004a0e:	a906      	add	r1, sp, #24
 8004a10:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8004a14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a18:	4302      	orrs	r2, r0
 8004a1a:	e7ad      	b.n	8004978 <__kernel_rem_pio2f+0x1ec>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d0fa      	beq.n	8004a1c <__kernel_rem_pio2f+0x290>
 8004a26:	a91a      	add	r1, sp, #104	; 0x68
 8004a28:	eb0a 0208 	add.w	r2, sl, r8
 8004a2c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004a30:	f10a 0301 	add.w	r3, sl, #1
 8004a34:	eb0a 0100 	add.w	r1, sl, r0
 8004a38:	4299      	cmp	r1, r3
 8004a3a:	da04      	bge.n	8004a46 <__kernel_rem_pio2f+0x2ba>
 8004a3c:	468a      	mov	sl, r1
 8004a3e:	e70e      	b.n	800485e <__kernel_rem_pio2f+0xd2>
 8004a40:	9b04      	ldr	r3, [sp, #16]
 8004a42:	2001      	movs	r0, #1
 8004a44:	e7eb      	b.n	8004a1e <__kernel_rem_pio2f+0x292>
 8004a46:	9803      	ldr	r0, [sp, #12]
 8004a48:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004a4c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004a50:	9000      	str	r0, [sp, #0]
 8004a52:	ee07 0a90 	vmov	s15, r0
 8004a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	ece2 7a01 	vstmia	r2!, {s15}
 8004a60:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004a9c <__kernel_rem_pio2f+0x310>
 8004a64:	4696      	mov	lr, r2
 8004a66:	4548      	cmp	r0, r9
 8004a68:	dd06      	ble.n	8004a78 <__kernel_rem_pio2f+0x2ec>
 8004a6a:	a842      	add	r0, sp, #264	; 0x108
 8004a6c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004a70:	edc0 7a00 	vstr	s15, [r0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	e7df      	b.n	8004a38 <__kernel_rem_pio2f+0x2ac>
 8004a78:	ecfc 6a01 	vldmia	ip!, {s13}
 8004a7c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8004a80:	3001      	adds	r0, #1
 8004a82:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004a86:	e7ee      	b.n	8004a66 <__kernel_rem_pio2f+0x2da>
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	e779      	b.n	8004980 <__kernel_rem_pio2f+0x1f4>
 8004a8c:	080052a4 	.word	0x080052a4
 8004a90:	08005278 	.word	0x08005278
 8004a94:	43800000 	.word	0x43800000
 8004a98:	3b800000 	.word	0x3b800000
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	9b02      	ldr	r3, [sp, #8]
 8004aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8004aa6:	1b98      	subs	r0, r3, r6
 8004aa8:	f000 f98c 	bl	8004dc4 <scalbnf>
 8004aac:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004a94 <__kernel_rem_pio2f+0x308>
 8004ab0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	db1b      	blt.n	8004af2 <__kernel_rem_pio2f+0x366>
 8004aba:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004a98 <__kernel_rem_pio2f+0x30c>
 8004abe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ac2:	aa06      	add	r2, sp, #24
 8004ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ac8:	a906      	add	r1, sp, #24
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	3408      	adds	r4, #8
 8004ad0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004adc:	ee10 3a10 	vmov	r3, s0
 8004ae0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8004ae4:	ee17 2a90 	vmov	r2, s15
 8004ae8:	f10a 0301 	add.w	r3, sl, #1
 8004aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004af0:	e74c      	b.n	800498c <__kernel_rem_pio2f+0x200>
 8004af2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004af6:	aa06      	add	r2, sp, #24
 8004af8:	ee10 3a10 	vmov	r3, s0
 8004afc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8004b00:	4653      	mov	r3, sl
 8004b02:	e743      	b.n	800498c <__kernel_rem_pio2f+0x200>
 8004b04:	aa42      	add	r2, sp, #264	; 0x108
 8004b06:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8004b0a:	aa06      	add	r2, sp, #24
 8004b0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004b10:	9201      	str	r2, [sp, #4]
 8004b12:	ee07 2a90 	vmov	s15, r2
 8004b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1a:	3901      	subs	r1, #1
 8004b1c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004b20:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004b24:	edc0 7a00 	vstr	s15, [r0]
 8004b28:	e73a      	b.n	80049a0 <__kernel_rem_pio2f+0x214>
 8004b2a:	ecf2 6a01 	vldmia	r2!, {s13}
 8004b2e:	ecb6 7a01 	vldmia	r6!, {s14}
 8004b32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b36:	3101      	adds	r1, #1
 8004b38:	42b9      	cmp	r1, r7
 8004b3a:	dc01      	bgt.n	8004b40 <__kernel_rem_pio2f+0x3b4>
 8004b3c:	428c      	cmp	r4, r1
 8004b3e:	daf4      	bge.n	8004b2a <__kernel_rem_pio2f+0x39e>
 8004b40:	aa56      	add	r2, sp, #344	; 0x158
 8004b42:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8004b46:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004b4a:	3801      	subs	r0, #1
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	e72c      	b.n	80049aa <__kernel_rem_pio2f+0x21e>
 8004b50:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004b52:	2a02      	cmp	r2, #2
 8004b54:	dc0a      	bgt.n	8004b6c <__kernel_rem_pio2f+0x3e0>
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	dc61      	bgt.n	8004c1e <__kernel_rem_pio2f+0x492>
 8004b5a:	d03c      	beq.n	8004bd6 <__kernel_rem_pio2f+0x44a>
 8004b5c:	9b00      	ldr	r3, [sp, #0]
 8004b5e:	f003 0007 	and.w	r0, r3, #7
 8004b62:	b057      	add	sp, #348	; 0x15c
 8004b64:	ecbd 8b04 	vpop	{d8-d9}
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004b6e:	2a03      	cmp	r2, #3
 8004b70:	d1f4      	bne.n	8004b5c <__kernel_rem_pio2f+0x3d0>
 8004b72:	aa2e      	add	r2, sp, #184	; 0xb8
 8004b74:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004b78:	4608      	mov	r0, r1
 8004b7a:	461c      	mov	r4, r3
 8004b7c:	2c00      	cmp	r4, #0
 8004b7e:	f1a0 0004 	sub.w	r0, r0, #4
 8004b82:	dc59      	bgt.n	8004c38 <__kernel_rem_pio2f+0x4ac>
 8004b84:	4618      	mov	r0, r3
 8004b86:	2801      	cmp	r0, #1
 8004b88:	f1a1 0104 	sub.w	r1, r1, #4
 8004b8c:	dc64      	bgt.n	8004c58 <__kernel_rem_pio2f+0x4cc>
 8004b8e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8004a9c <__kernel_rem_pio2f+0x310>
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	dc70      	bgt.n	8004c78 <__kernel_rem_pio2f+0x4ec>
 8004b96:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004b9a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004b9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ba2:	d172      	bne.n	8004c8a <__kernel_rem_pio2f+0x4fe>
 8004ba4:	edc5 6a00 	vstr	s13, [r5]
 8004ba8:	ed85 7a01 	vstr	s14, [r5, #4]
 8004bac:	edc5 7a02 	vstr	s15, [r5, #8]
 8004bb0:	e7d4      	b.n	8004b5c <__kernel_rem_pio2f+0x3d0>
 8004bb2:	aa2e      	add	r2, sp, #184	; 0xb8
 8004bb4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004bb8:	ed91 7a00 	vldr	s14, [r1]
 8004bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	daf5      	bge.n	8004bb2 <__kernel_rem_pio2f+0x426>
 8004bc6:	f1bb 0f00 	cmp.w	fp, #0
 8004bca:	d001      	beq.n	8004bd0 <__kernel_rem_pio2f+0x444>
 8004bcc:	eef1 7a67 	vneg.f32	s15, s15
 8004bd0:	edc5 7a00 	vstr	s15, [r5]
 8004bd4:	e7c2      	b.n	8004b5c <__kernel_rem_pio2f+0x3d0>
 8004bd6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8004a9c <__kernel_rem_pio2f+0x310>
 8004bda:	e7f2      	b.n	8004bc2 <__kernel_rem_pio2f+0x436>
 8004bdc:	aa2e      	add	r2, sp, #184	; 0xb8
 8004bde:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8004be2:	edd0 7a00 	vldr	s15, [r0]
 8004be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bea:	3901      	subs	r1, #1
 8004bec:	2900      	cmp	r1, #0
 8004bee:	daf5      	bge.n	8004bdc <__kernel_rem_pio2f+0x450>
 8004bf0:	f1bb 0f00 	cmp.w	fp, #0
 8004bf4:	d017      	beq.n	8004c26 <__kernel_rem_pio2f+0x49a>
 8004bf6:	eef1 7a47 	vneg.f32	s15, s14
 8004bfa:	edc5 7a00 	vstr	s15, [r5]
 8004bfe:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004c02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c06:	a82f      	add	r0, sp, #188	; 0xbc
 8004c08:	2101      	movs	r1, #1
 8004c0a:	428b      	cmp	r3, r1
 8004c0c:	da0e      	bge.n	8004c2c <__kernel_rem_pio2f+0x4a0>
 8004c0e:	f1bb 0f00 	cmp.w	fp, #0
 8004c12:	d001      	beq.n	8004c18 <__kernel_rem_pio2f+0x48c>
 8004c14:	eef1 7a67 	vneg.f32	s15, s15
 8004c18:	edc5 7a01 	vstr	s15, [r5, #4]
 8004c1c:	e79e      	b.n	8004b5c <__kernel_rem_pio2f+0x3d0>
 8004c1e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8004a9c <__kernel_rem_pio2f+0x310>
 8004c22:	4619      	mov	r1, r3
 8004c24:	e7e2      	b.n	8004bec <__kernel_rem_pio2f+0x460>
 8004c26:	eef0 7a47 	vmov.f32	s15, s14
 8004c2a:	e7e6      	b.n	8004bfa <__kernel_rem_pio2f+0x46e>
 8004c2c:	ecb0 7a01 	vldmia	r0!, {s14}
 8004c30:	3101      	adds	r1, #1
 8004c32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c36:	e7e8      	b.n	8004c0a <__kernel_rem_pio2f+0x47e>
 8004c38:	edd0 7a00 	vldr	s15, [r0]
 8004c3c:	edd0 6a01 	vldr	s13, [r0, #4]
 8004c40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c44:	3c01      	subs	r4, #1
 8004c46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c4a:	ed80 7a00 	vstr	s14, [r0]
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	edc0 7a01 	vstr	s15, [r0, #4]
 8004c56:	e791      	b.n	8004b7c <__kernel_rem_pio2f+0x3f0>
 8004c58:	edd1 7a00 	vldr	s15, [r1]
 8004c5c:	edd1 6a01 	vldr	s13, [r1, #4]
 8004c60:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c64:	3801      	subs	r0, #1
 8004c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c6a:	ed81 7a00 	vstr	s14, [r1]
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	edc1 7a01 	vstr	s15, [r1, #4]
 8004c76:	e786      	b.n	8004b86 <__kernel_rem_pio2f+0x3fa>
 8004c78:	aa2e      	add	r2, sp, #184	; 0xb8
 8004c7a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004c7e:	ed91 7a00 	vldr	s14, [r1]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c88:	e783      	b.n	8004b92 <__kernel_rem_pio2f+0x406>
 8004c8a:	eef1 6a66 	vneg.f32	s13, s13
 8004c8e:	eeb1 7a47 	vneg.f32	s14, s14
 8004c92:	edc5 6a00 	vstr	s13, [r5]
 8004c96:	ed85 7a01 	vstr	s14, [r5, #4]
 8004c9a:	eef1 7a67 	vneg.f32	s15, s15
 8004c9e:	e785      	b.n	8004bac <__kernel_rem_pio2f+0x420>

08004ca0 <__kernel_sinf>:
 8004ca0:	ee10 3a10 	vmov	r3, s0
 8004ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ca8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004cac:	da04      	bge.n	8004cb8 <__kernel_sinf+0x18>
 8004cae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cb2:	ee17 3a90 	vmov	r3, s15
 8004cb6:	b35b      	cbz	r3, 8004d10 <__kernel_sinf+0x70>
 8004cb8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004cbc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004d14 <__kernel_sinf+0x74>
 8004cc0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004d18 <__kernel_sinf+0x78>
 8004cc4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004cc8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004d1c <__kernel_sinf+0x7c>
 8004ccc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004cd0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004d20 <__kernel_sinf+0x80>
 8004cd4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004cd8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004d24 <__kernel_sinf+0x84>
 8004cdc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004ce0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004ce4:	b930      	cbnz	r0, 8004cf4 <__kernel_sinf+0x54>
 8004ce6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004d28 <__kernel_sinf+0x88>
 8004cea:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004cee:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004cf2:	4770      	bx	lr
 8004cf4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004cf8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004cfc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004d00:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004d04:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004d2c <__kernel_sinf+0x8c>
 8004d08:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004d0c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2f2ec9d3 	.word	0x2f2ec9d3
 8004d18:	b2d72f34 	.word	0xb2d72f34
 8004d1c:	3638ef1b 	.word	0x3638ef1b
 8004d20:	b9500d01 	.word	0xb9500d01
 8004d24:	3c088889 	.word	0x3c088889
 8004d28:	be2aaaab 	.word	0xbe2aaaab
 8004d2c:	3e2aaaab 	.word	0x3e2aaaab

08004d30 <fabsf>:
 8004d30:	ee10 3a10 	vmov	r3, s0
 8004d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d38:	ee00 3a10 	vmov	s0, r3
 8004d3c:	4770      	bx	lr
	...

08004d40 <floorf>:
 8004d40:	ee10 3a10 	vmov	r3, s0
 8004d44:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d48:	3a7f      	subs	r2, #127	; 0x7f
 8004d4a:	2a16      	cmp	r2, #22
 8004d4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d50:	dc2a      	bgt.n	8004da8 <floorf+0x68>
 8004d52:	2a00      	cmp	r2, #0
 8004d54:	da11      	bge.n	8004d7a <floorf+0x3a>
 8004d56:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004db8 <floorf+0x78>
 8004d5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	dd05      	ble.n	8004d74 <floorf+0x34>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	da23      	bge.n	8004db4 <floorf+0x74>
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <floorf+0x7c>)
 8004d6e:	2900      	cmp	r1, #0
 8004d70:	bf18      	it	ne
 8004d72:	4613      	movne	r3, r2
 8004d74:	ee00 3a10 	vmov	s0, r3
 8004d78:	4770      	bx	lr
 8004d7a:	4911      	ldr	r1, [pc, #68]	; (8004dc0 <floorf+0x80>)
 8004d7c:	4111      	asrs	r1, r2
 8004d7e:	420b      	tst	r3, r1
 8004d80:	d0fa      	beq.n	8004d78 <floorf+0x38>
 8004d82:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004db8 <floorf+0x78>
 8004d86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	ddef      	ble.n	8004d74 <floorf+0x34>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bfbe      	ittt	lt
 8004d98:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004d9c:	fa40 f202 	asrlt.w	r2, r0, r2
 8004da0:	189b      	addlt	r3, r3, r2
 8004da2:	ea23 0301 	bic.w	r3, r3, r1
 8004da6:	e7e5      	b.n	8004d74 <floorf+0x34>
 8004da8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004dac:	d3e4      	bcc.n	8004d78 <floorf+0x38>
 8004dae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004db2:	4770      	bx	lr
 8004db4:	2300      	movs	r3, #0
 8004db6:	e7dd      	b.n	8004d74 <floorf+0x34>
 8004db8:	7149f2ca 	.word	0x7149f2ca
 8004dbc:	bf800000 	.word	0xbf800000
 8004dc0:	007fffff 	.word	0x007fffff

08004dc4 <scalbnf>:
 8004dc4:	ee10 3a10 	vmov	r3, s0
 8004dc8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004dcc:	d025      	beq.n	8004e1a <scalbnf+0x56>
 8004dce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004dd2:	d302      	bcc.n	8004dda <scalbnf+0x16>
 8004dd4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004dd8:	4770      	bx	lr
 8004dda:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004dde:	d122      	bne.n	8004e26 <scalbnf+0x62>
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <scalbnf+0xc8>)
 8004de2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004e90 <scalbnf+0xcc>
 8004de6:	4298      	cmp	r0, r3
 8004de8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004dec:	db16      	blt.n	8004e1c <scalbnf+0x58>
 8004dee:	ee10 3a10 	vmov	r3, s0
 8004df2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004df6:	3a19      	subs	r2, #25
 8004df8:	4402      	add	r2, r0
 8004dfa:	2afe      	cmp	r2, #254	; 0xfe
 8004dfc:	dd15      	ble.n	8004e2a <scalbnf+0x66>
 8004dfe:	ee10 3a10 	vmov	r3, s0
 8004e02:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004e94 <scalbnf+0xd0>
 8004e06:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004e98 <scalbnf+0xd4>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	eeb0 7a67 	vmov.f32	s14, s15
 8004e10:	bfb8      	it	lt
 8004e12:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e16:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004e1a:	4770      	bx	lr
 8004e1c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004e9c <scalbnf+0xd8>
 8004e20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e24:	4770      	bx	lr
 8004e26:	0dd2      	lsrs	r2, r2, #23
 8004e28:	e7e6      	b.n	8004df8 <scalbnf+0x34>
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	dd06      	ble.n	8004e3c <scalbnf+0x78>
 8004e2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e32:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004e36:	ee00 3a10 	vmov	s0, r3
 8004e3a:	4770      	bx	lr
 8004e3c:	f112 0f16 	cmn.w	r2, #22
 8004e40:	da1a      	bge.n	8004e78 <scalbnf+0xb4>
 8004e42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004e46:	4298      	cmp	r0, r3
 8004e48:	ee10 3a10 	vmov	r3, s0
 8004e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e50:	dd0a      	ble.n	8004e68 <scalbnf+0xa4>
 8004e52:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004e94 <scalbnf+0xd0>
 8004e56:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004e98 <scalbnf+0xd4>
 8004e5a:	eef0 7a40 	vmov.f32	s15, s0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	bf18      	it	ne
 8004e62:	eeb0 0a47 	vmovne.f32	s0, s14
 8004e66:	e7db      	b.n	8004e20 <scalbnf+0x5c>
 8004e68:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004e9c <scalbnf+0xd8>
 8004e6c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ea0 <scalbnf+0xdc>
 8004e70:	eef0 7a40 	vmov.f32	s15, s0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	e7f3      	b.n	8004e60 <scalbnf+0x9c>
 8004e78:	3219      	adds	r2, #25
 8004e7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e7e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004e82:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ea4 <scalbnf+0xe0>
 8004e86:	ee07 3a10 	vmov	s14, r3
 8004e8a:	e7c4      	b.n	8004e16 <scalbnf+0x52>
 8004e8c:	ffff3cb0 	.word	0xffff3cb0
 8004e90:	4c000000 	.word	0x4c000000
 8004e94:	7149f2ca 	.word	0x7149f2ca
 8004e98:	f149f2ca 	.word	0xf149f2ca
 8004e9c:	0da24260 	.word	0x0da24260
 8004ea0:	8da24260 	.word	0x8da24260
 8004ea4:	33000000 	.word	0x33000000

08004ea8 <_init>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr

08004eb4 <_fini>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr
